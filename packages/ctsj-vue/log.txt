.v-for的context值的嵌套 ok
.计算属性缓存 ok
.get监控时是否执行了render，是因为赋值$event的时候 ok
.watch ok
.v-show 判断display的值 ok
.v-html实现 ok
.v-on的实现 ok
.v-for的key ok
.v-model实现 ok
.component的kebab-case | PascalCase ok
.v-bind="xxx"这种形式的 ok
.component的$emit ok
.template标签 ok
.slot
 基本slot ok
 作用域slot ok
.component标签 ok
.在一个方法中多次修改data只render一次 ok
 在什么地方能进行数据的修改
 1.生命周期hook(在生命周期hook中在调用其他方法)
 2.事件处理函数(在事件处理函数中在调用其他方法)
   2.1 html的事件处理函数
   2.2 $emit触发的事件处理函数
 3.watch处理函数(在事件处理函数中在调用其他方法)
 现在应该可是实现同步的函数，但是异步函数无法实现(除非提供一个创建这样函数的方法可以实现此功能)
.Vue实例现在VNode替换了el元素，而我们想实现的是作为孩子 ok
.v-model select赋值需要创建一个template进行计算 ok
.v-if ok
.v-else-if ok
.v-else ok
.v-for没有实现of分隔符 ok
.v-for迭代对象没有实现(value,name,index) ok
.v-for里面使用范围值 ok
.$root,$parent,$refs的处理 ok
.mixin ok
 生命周期函数会合并在一起
 其他都是替换
 mixins属性是一个数组
 全局混入Vue.mixin
.插件 ok
.对数组的操作上代理有问题，没有考虑到push,splice等一系列操作 ok
.动态slot(动态插槽) ok
.v-text ok
.v-pre ok

.provide和inject
.v-once(难度较高)
 难度较高的原因：组件自身更新的时候如果是v-once则不能更新
 <div v-once>
   <my-component1 /> - 不能进行自身更新(控制起来很难-不一定在哪一级)
   <div>
     <my-component2 /> - 不能进行自身更新(控制起来很难-不一定在哪一级)
   </div>
 </div>
.keep-alive(难度较高)
 难度较高的原因：什么样的节点可以进行缓存，这个现在没太搞明白
 <template />
 <component />
 <slot />
 <router-view />
 <router-link />
 <组件的节点 />
 <html元素节点 />
.异步组件(代码需要改动很多，难度较高)
 难度较高的原因：诸多地方需要改写成异步操作，涉及核心流程
.filter(难度较高)
 难度较高的原因：需要类似于c++语言中的运算符重写功能才能够实现

.vuex
.指令的简写模式
.自定义指令
.v-on的其他功能，如键盘事件，只触发一次的事件
.关键代码的异常处理(或者说是整体的一个异常处理的编写)
.单文件组件

.正真的实现computed的实时更新
.组件上v-model
.v-model的节流
.现在是替换整个el节点(可以不做)
.computed传参数(可以不做)
.computed(不需要)
 get
 set

// components集合的键应该用元素的key
// 每一个组件元素没有key都要随机生成一个key
// v-if 和 v-for的时候需要根据条件删除components集合中的component
// components应该是按组来划分的
// parentEl [key1,key2]

<div>
   <component-1 key=1 />
   <component-1 key=2 />
   <component-1 key=3 />

   <component-1 v-if="true" key=4 />

   <div>
     <component-1 v-for="true" key=4 />
   </div>

</div>

proxyDirtyStack不能是全局对象，应该在vue和component实例中进行实例化，也就是vue实例和
component实例中都需要有单独的proxyDirtyStack，且push、pop和clear都需要调用各自的,
provider和inject需要调用createExecutionContext方法
