{"version":3,"file":"routeHooks.js","sources":["router/routeHooks.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * routeHooks - 和路由守卫相关的操作\r\n *\r\n * /system/123/456?id=1&name=2  ->  /system/567\r\n   / -> App -> /\r\n   /system System -> /system\r\n   /system/:id/:name -> SystemList -> /system/123/456\r\n\r\n   核心算法\r\n   .建立一个全局对象，用来存储在render中解析<router-view>标签路径和组件的对用关系\r\n   .在$getComponentIsVueIns和$getComponentIsComIns中进行处理\r\n   .得到了这个关系，目标地址例如：/car/list 再去进行一次和router配置匹配的查找过程\r\n   .就可以得出导航需要出发钩子的对象引用\r\n\r\n\r\n   导航被触发。\r\n   在(失活)的组件里调用 beforeRouteLeave 守卫。\r\n   调用全局的 beforeEach 守卫。\r\n   在(重用)的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\r\n   在路由配置里调用 beforeEnter。\r\n   解析异步路由组件。\r\n   在被激活的组件里调用 beforeRouteEnter。\r\n   调用全局的 beforeResolve 守卫 (2.5+)。\r\n   导航被确认。\r\n   调用全局的 afterEach 钩子。\r\n   触发 DOM 更新。\r\n   调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.clear = exports.getMatchData = exports.getTop = exports.push = exports.guard = void 0;\r\nvar path_to_regexp_1 = __importDefault(require(\"path-to-regexp\"));\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar constants_1 = require(\"./constants\");\r\nvar util_1 = require(\"./util\");\r\n/**\r\n * matchData - 匹配的路由数据\r\n * 数组中的每一项 {\r\n *   path: string - 匹配的路径(这个路径是路由配置中的路径)\r\n *   regexp: Regex - 匹配的正则表达式\r\n *   route: Route - 匹配的路由配置\r\n *   component: Component - 匹配的组件\r\n * }\r\n */\r\nvar matchData = [];\r\n// 守卫的步骤\r\nvar guard_steps = [guardStep1, guardStep2, guardStep3, guardStep4, guardStep5];\r\n/**\r\n * createNextHandler\r\n * @param resolve - Resolve\r\n * @param reject - Reject\r\n * @param afterHandler - Function 之后处理的函数句柄\r\n * @return {Function}\r\n */\r\nfunction createNextHandler(_a) {\r\n    var resolve = _a.resolve, reject = _a.reject, afterHandler = _a.afterHandler;\r\n    return function (result) {\r\n        if (!result) {\r\n            resolve();\r\n        }\r\n        if (vue_util_1.isBoolean(result)) {\r\n            if (result)\r\n                resolve();\r\n            else\r\n                reject();\r\n        }\r\n        if (vue_util_1.isString(result)) {\r\n            reject(result);\r\n        }\r\n        if (vue_util_1.isObject(result)) {\r\n            reject(result);\r\n        }\r\n        if (afterHandler) {\r\n            afterHandler({ result: result, resolve: resolve, reject: reject });\r\n        }\r\n    };\r\n}\r\n/**\r\n 在(失活)的组件里调用 beforeRouteLeave 守卫\r\n beforeRouteLeave (to, from, next) {\r\n        导航离开该组件的对应路由时调用\r\n        可以访问组件实例 `this`\r\n     }\r\n * @param to\r\n * @param from\r\n * @param $router\r\n * @return {Promise}\r\n */\r\nfunction guardStep1(_a) {\r\n    var to = _a.to, from = _a.from;\r\n    return new Promise(function (resolve, reject) {\r\n        var tasks = [];\r\n        matchData\r\n            .filter(function (matchRoute) { return matchRoute.status === 'inactivation'; })\r\n            .forEach(function (_a) {\r\n            var component = _a.component;\r\n            if ('beforeRouteLeave' in component && vue_util_1.isFunction(component.beforeRouteLeave)) {\r\n                tasks.push((function () {\r\n                    return new Promise(function (s, f) {\r\n                        component.beforeRouteLeave.call(component.$dataProxy, to, from, createNextHandler({\r\n                            resolve: s,\r\n                            reject: f,\r\n                        }));\r\n                    });\r\n                })());\r\n            }\r\n        });\r\n        // tasks方法的任务不为空\r\n        if (tasks.length) {\r\n            Promise.all(tasks)\r\n                .then(function () {\r\n                resolve();\r\n            })\r\n                .catch(function (result) {\r\n                reject(result);\r\n            });\r\n        }\r\n        // tasks为空\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\n/**\r\n * 调用全局的 beforeEach 守卫\r\n * @param to\r\n * @param from\r\n * @param $router\r\n */\r\nfunction guardStep2(_a) {\r\n    var to = _a.to, from = _a.from, $router = _a.$router;\r\n    return new Promise(function (resolve, reject) {\r\n        var beforeEach = $router.getBeforeEachHandler();\r\n        if (beforeEach) {\r\n            /**\r\n             一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\r\n             next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。\r\n             next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。\r\n             next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。\r\n             next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调\r\n             */\r\n            beforeEach(to, from, createNextHandler({\r\n                resolve: resolve,\r\n                reject: reject,\r\n            }));\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\n/**\r\n 在(重用)的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\r\n beforeRouteUpdate (to, from, next) {\r\n        // 在当前路由改变，但是该组件被复用时调用\r\n        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\r\n        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\r\n        // 可以访问组件实例 `this`\r\n      },\r\n * @param to\r\n * @param from\r\n * @param $router\r\n * @return {Promise}\r\n */\r\nfunction guardStep3(_a) {\r\n    var to = _a.to, from = _a.from;\r\n    return new Promise(function (resolve, reject) {\r\n        var tasks = [];\r\n        matchData\r\n            .filter(function (matchRoute) { return matchRoute.status === 'update'; })\r\n            .forEach(function (_a) {\r\n            var component = _a.component;\r\n            if ('beforeRouteUpdate' in component && vue_util_1.isFunction(component.beforeRouteUpdate)) {\r\n                tasks.push((function () {\r\n                    return new Promise(function (s, f) {\r\n                        component.beforeRouteUpdate.call(component.$dataProxy, to, from, createNextHandler({\r\n                            resolve: s,\r\n                            reject: f,\r\n                        }));\r\n                    });\r\n                })());\r\n            }\r\n        });\r\n        // tasks方法的任务不为空\r\n        if (tasks.length) {\r\n            Promise.all(tasks)\r\n                .then(function () {\r\n                resolve();\r\n            })\r\n                .catch(function (result) {\r\n                reject(result);\r\n            });\r\n        }\r\n        // tasks为空\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\n/**\r\n * 在路由配置里调用 beforeEnter。\r\n * @param to\r\n * @param from\r\n * @param $router\r\n * @return {Promise}\r\n */\r\nfunction guardStep4(_a) {\r\n    var to = _a.to, from = _a.from;\r\n    return new Promise(function (resolve, reject) {\r\n        // beforeEnter这个方法是在路由配置中定义的\r\n        // matchData的最后一个元素就是\r\n        var matchDataLast = matchData[matchData.length - 1];\r\n        if (matchDataLast) {\r\n            var route = matchDataLast.route;\r\n            if (route) {\r\n                if ('beforeEnter' in route) {\r\n                    if (vue_util_1.isFunction(route.beforeEnter)) {\r\n                        route.beforeEnter(to, from, createNextHandler({\r\n                            resolve: resolve,\r\n                            reject: reject,\r\n                        }));\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }\r\n            else {\r\n                reject();\r\n            }\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\n/**\r\n * 在被激活的组件里调用 beforeRouteEnter\r\n * @param to\r\n * @param from\r\n * @param $router\r\n * @return {Promise}\r\n */\r\nfunction guardStep5(_a) {\r\n    var to = _a.to, from = _a.from, $router = _a.$router;\r\n    return new Promise(function (resolve, reject) {\r\n        // 这个地方需要使用to路径再去$router的配置中执行操作去把匹配的组件配置项查出来\r\n        // 配置项里面有beforeRouteEnter的钩子，然后如果是next((vm)=>{})这种方式在配置中存放回调函数然后在触发\r\n        var _a = $router.$config, _b = _a.routes, routes = _b === void 0 ? [] : _b, base = _a.base;\r\n        var componentsConfig = [];\r\n        // 填充componentsConfig数组，寻找出所有匹配的component和命中的路径\r\n        findLoopComponent({ componentsConfig: componentsConfig, routes: routes, base: base, to: to });\r\n        // 去除重用的节点\r\n        componentsConfig = componentsConfig.filter(function (_a) {\r\n            var path = _a.path;\r\n            return matchData.findIndex(function (data) { return data.path === path && data.status === 'update'; }) === -1;\r\n        });\r\n        var tasks = [];\r\n        componentsConfig.forEach(function (_a) {\r\n            var config = _a.component;\r\n            if ('beforeRouteEnter' in config && vue_util_1.isFunction(config.beforeRouteEnter)) {\r\n                tasks.push((function () {\r\n                    return new Promise(function (s, f) {\r\n                        config.beforeRouteEnter(to, from, createNextHandler({\r\n                            resolve: s,\r\n                            reject: f,\r\n                            afterHandler: function (_a) {\r\n                                var result = _a.result;\r\n                                if (vue_util_1.isFunction(result)) {\r\n                                    // 向配置中赋值$vmCallback属性\r\n                                    config.$vmCallback = result;\r\n                                    s();\r\n                                }\r\n                            },\r\n                        }));\r\n                    });\r\n                })());\r\n            }\r\n        });\r\n        // tasks方法的任务不为空\r\n        if (tasks.length) {\r\n            Promise.all(tasks)\r\n                .then(function () {\r\n                resolve();\r\n            })\r\n                .catch(function (result) {\r\n                reject(result);\r\n            });\r\n        }\r\n        // tasks为空\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\n/**\r\n * findLoopComponent - 寻找适配的Component\r\n * @param componentsConfig - Array\r\n * @param to - string\r\n * @param routes - Array\r\n * @param base - string\r\n */\r\nfunction findLoopComponent(_a) {\r\n    var componentsConfig = _a.componentsConfig, to = _a.to, routes = _a.routes, base = _a.base;\r\n    for (var i = 0, len = (routes || []).length; i < len; i++) {\r\n        var route = routes[i];\r\n        // 获取route向上的完整路径\r\n        var fullPath = util_1.wrapPathByBase(base, util_1.getCurRoutePath(route));\r\n        var component = route.component, children = route.children;\r\n        var keys = [];\r\n        // 生成正则表达式\r\n        var reg = path_to_regexp_1.default(fullPath, keys, {\r\n            sensitive: false,\r\n            strict: false,\r\n            end: 'exact' in route,\r\n            delimiter: constants_1.PATH_SPLIT,\r\n        });\r\n        // 如果patchname匹配的path\r\n        if (reg.test(to)) {\r\n            componentsConfig.push({\r\n                path: fullPath,\r\n                component: component,\r\n            });\r\n            // 如果命中则继续深度优先遍历\r\n            findLoopComponent({\r\n                componentsConfig: componentsConfig,\r\n                to: to,\r\n                routes: children,\r\n                base: base,\r\n            });\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * guard - 路由守卫\r\n * @param toRoute Object - 要跳转的路径(也就是to)\r\n * @param $router vue-router VueRouter路由的实例对象\r\n * @return Promise\r\n *\r\n * /system/123/456?id=1&name=2(pathname)  ->  /system/567(path)\r\n * 匹配的路由对象\r\n   / -> App -> /\r\n   /system System -> /system\r\n   /system/:id/:name -> SystemList -> /system/123/456\r\n */\r\nfunction guard(toRoute, $router) {\r\n    var _a = window.location, pathname = _a.pathname, search = _a.search;\r\n    var topMatchData = getTop();\r\n    var fromRoute = !vue_util_1.isEmpty(topMatchData)\r\n        ? {\r\n            path: topMatchData.path,\r\n            fullPath: \"\" + pathname + search,\r\n            name: topMatchData.name,\r\n            params: topMatchData.params,\r\n            query: topMatchData.query,\r\n            hash: topMatchData.hash,\r\n        }\r\n        : {\r\n            fullPath: \"\" + pathname + search,\r\n        };\r\n    // promise对象初始化\r\n    var promise = new Promise(function (resolve, reject) {\r\n        // 当前浏览器路径的pathname(form)\r\n        // 一.需要进行一个操作计算出(失活)和(重用)的组件\r\n        // 直接修改matchData数据加入状态属性\r\n        for (var i = 0, len = matchData.length; i < len; i++) {\r\n            // 匹配的route\r\n            var regexp = matchData[i].regexp;\r\n            // 如果to匹配了regexp\r\n            if (regexp.test(toRoute.fullPath)) {\r\n                // 那就是重用\r\n                matchData[i].status = 'update';\r\n            }\r\n            else {\r\n                // 那就是失活\r\n                matchData[i].status = 'inactivation';\r\n            }\r\n        }\r\n        // 执行异步操作的当前索引\r\n        var index = 0;\r\n        /**\r\n         * loopTask - 循环执行异步的操作\r\n         * @return {Promise}\r\n         */\r\n        function loopTask() {\r\n            return new Promise(function (s, f) {\r\n                if (index >= guard_steps.length) {\r\n                    s();\r\n                }\r\n                else {\r\n                    var task = guard_steps[index++];\r\n                    if (task) {\r\n                        task({ to: toRoute, from: fromRoute, $router: $router })\r\n                            .then(function () {\r\n                            loopTask().then(function () {\r\n                                s();\r\n                            });\r\n                        })\r\n                            .catch(function (error) {\r\n                            f(error);\r\n                        });\r\n                    }\r\n                    else {\r\n                        f();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // 执行所有的异步操作\r\n        loopTask()\r\n            .then(function () {\r\n            // 所有的异步操作都完成了\r\n            resolve();\r\n        })\r\n            .catch(function (error) {\r\n            // 执行异步操作有错误\r\n            reject(error);\r\n        });\r\n    });\r\n    // 错误的处理\r\n    promise.catch(function (result) {\r\n        // 如果到了这里是不能进行路由跳转的\r\n        // 会对result进行处理\r\n        // 这里result会是对象，或字符串(重定向的字符串)或者是null\r\n        // 错误句柄函数\r\n        var errorHandler = $router.getErrorHandler();\r\n        // result不为null\r\n        if (!vue_util_1.isEmpty(result)) {\r\n            if (vue_util_1.isObject(result)) {\r\n                // Error的处理\r\n                if (result instanceof Error) {\r\n                    if (errorHandler) {\r\n                        errorHandler(result);\r\n                    }\r\n                }\r\n                // 进行重定向\r\n                if ('replace' in result && result.replace) {\r\n                    $router.replace(result);\r\n                }\r\n                else {\r\n                    $router.push(result);\r\n                }\r\n            }\r\n            if (vue_util_1.isString(result)) {\r\n                // 进行重定向\r\n                $router.push(result);\r\n            }\r\n        }\r\n        // result为null\r\n        else if (errorHandler) {\r\n            errorHandler();\r\n        }\r\n        // 继续下沉错误到下面的catch\r\n        throw new Error(result);\r\n    });\r\n    return promise;\r\n}\r\nexports.guard = guard;\r\n/**\r\n * push - 添加一个匹配项\r\n * @param matchEntry {\r\n *   path: string - 匹配的路径\r\n *   regexp: Regex - 匹配的正则表达式\r\n *   route: Route - 匹配的路由配置\r\n *   component: Component - 匹配的组件\r\n * }\r\n */\r\nfunction push(matchEntry) {\r\n    matchData.push(matchEntry);\r\n}\r\nexports.push = push;\r\n/**\r\n * getTop - 获取matchData的最后一个元素\r\n * @return Object\r\n */\r\nfunction getTop() {\r\n    if (matchData.length) {\r\n        return matchData[matchData.length - 1];\r\n    }\r\n    return null;\r\n}\r\nexports.getTop = getTop;\r\n/**\r\n * getMatchData - 获取MatchData的副本\r\n * @return {Array}\r\n */\r\nfunction getMatchData() {\r\n    return vue_util_1.cloneDeep(matchData);\r\n}\r\nexports.getMatchData = getMatchData;\r\n/**\r\n * clear - 清空匹配数据\r\n */\r\nfunction clear() {\r\n    matchData = [];\r\n}\r\nexports.clear = clear;\r\n"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","clear","getMatchData","getTop","push","guard","path_to_regexp_1","require","vue_util_1","constants_1","util_1","matchData","guard_steps","guardStep1","guardStep2","guardStep3","guardStep4","guardStep5","createNextHandler","_a","resolve","reject","afterHandler","result","isBoolean","isString","isObject","to","from","Promise","tasks","filter","matchRoute","status","forEach","component","isFunction","beforeRouteLeave","s","f","call","$dataProxy","length","all","then","catch","$router","beforeEach","getBeforeEachHandler","beforeRouteUpdate","matchDataLast","route","beforeEnter","$config","_b","routes","componentsConfig","findLoopComponent","base","path","findIndex","data","config","beforeRouteEnter","$vmCallback","i","len","fullPath","wrapPathByBase","getCurRoutePath","children","sensitive","strict","end","delimiter","PATH_SPLIT","test","toRoute","window","location","pathname","search","topMatchData","fromRoute","isEmpty","name","params","query","hash","promise","regexp","index","loopTask","task","error","errorHandler","getErrorHandler","Error","replace","matchEntry","cloneDeep"],"mappings":"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"}