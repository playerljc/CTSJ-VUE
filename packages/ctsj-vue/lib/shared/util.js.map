{"version":3,"file":"util.js","sources":["shared/util.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.log = exports.noop = exports.cloneDeep = exports.clone = exports.createExecutionContext = exports.execExpression = exports.createElement = exports.isDynamicComponentNode = exports.isSlotNode = exports.isTemplateNode = exports.isElementNode = exports.isTextNode = exports.isObject = exports.isFunction = exports.isNumber = exports.isArray = exports.isEmpty = exports.merge = exports.toCamelCase = void 0;\r\nvar cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\r\nvar util_1 = require(\"../core/util\");\r\nvar proxyDirtyStack_1 = require(\"../compiler/proxyDirtyStack\");\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * toCamelCase - 用连接符链接的字符串转换成驼峰写法\r\n * 例：abc-def AbcDef\r\n * @param str - string 用连接符节点的字符串\r\n * @param toUpperCase - boolean 是否转换成大写\r\n * @return {String}\r\n */\r\nfunction toCamelCase(str, toUpperCase) {\r\n    if (toUpperCase === void 0) { toUpperCase = false; }\r\n    var result = str\r\n        .split(constants_1.DIRECT_DIVIDING_SYMBOL)\r\n        .map(function (item) { return item.charAt(0).toUpperCase() + item.substring(1); })\r\n        .join('');\r\n    return !toUpperCase ? \"\" + result.charAt(0).toLowerCase() + result.substring(1) : result;\r\n}\r\nexports.toCamelCase = toCamelCase;\r\n/**\r\n * merge - 会改变srcObj并返回\r\n * @param srcObj - {Object} 混入的对象\r\n * @param tarObjs - {Array<Object>} - 要混入的值\r\n * @return {Object}\r\n */\r\nfunction merge(srcObj) {\r\n    var tarObjs = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        tarObjs[_i - 1] = arguments[_i];\r\n    }\r\n    return Object.assign.apply(Object, [srcObj].concat(tarObjs));\r\n}\r\nexports.merge = merge;\r\n/**\r\n * isEmpty - 对象是否为空\r\n * @param value\r\n */\r\nfunction isEmpty(value) {\r\n    if (value === null || value === '' || value === undefined)\r\n        return true;\r\n    return false;\r\n}\r\nexports.isEmpty = isEmpty;\r\n/**\r\n * isArray - 判断数组\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isArray(obj) {\r\n    return Array.isArray(obj);\r\n}\r\nexports.isArray = isArray;\r\n/**\r\n * isNumber - 判断是否是number\r\n * @param val\r\n * @return {boolean}\r\n */\r\nfunction isNumber(val) {\r\n    return !isObject(val) && !isArray(val) && !isFunction(val) && typeof val === 'number';\r\n}\r\nexports.isNumber = isNumber;\r\n/**\r\n * isFunction - 判断函数\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isFunction(obj) {\r\n    return obj instanceof Function;\r\n}\r\nexports.isFunction = isFunction;\r\n/**\r\n * isObject - 是否是对象\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isObject(obj) {\r\n    return obj instanceof Object && !Array.isArray(obj) && !(obj instanceof Function);\r\n}\r\nexports.isObject = isObject;\r\n/**\r\n * isTextNode - 是否是文本节点\r\n * @param el - Node\r\n * @return {boolean}\r\n */\r\nfunction isTextNode(el) {\r\n    return el.nodeType === Node.TEXT_NODE;\r\n}\r\nexports.isTextNode = isTextNode;\r\n/**\r\n * isElementNode - 是否是元素节点\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isElementNode(el) {\r\n    return el.nodeType === Node.ELEMENT_NODE;\r\n}\r\nexports.isElementNode = isElementNode;\r\n/**\r\n * isTemplateNode - 是否是template元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isTemplateNode(el) {\r\n    return el.nodeName.toLowerCase() === 'template';\r\n}\r\nexports.isTemplateNode = isTemplateNode;\r\n/**\r\n * isSlotNode - 是否是slot元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isSlotNode(el) {\r\n    return el.nodeName.toLowerCase() === 'slot';\r\n}\r\nexports.isSlotNode = isSlotNode;\r\n/**\r\n * isDynamicComponentNode - 是否是动态组件元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isDynamicComponentNode(el) {\r\n    return el.nodeName.toLowerCase() === 'component';\r\n}\r\nexports.isDynamicComponentNode = isDynamicComponentNode;\r\n/**\r\n * createElement - 根据html字符串创建dom\r\n * @param htmlStr - string\r\n * @return {Element}\r\n */\r\nfunction createElement(htmlStr) {\r\n    var el = document.createElement('div');\r\n    el.innerHTML = htmlStr;\r\n    return el.firstElementChild;\r\n}\r\nexports.createElement = createElement;\r\n/**\r\n * execExpression - 执行表达式\r\n * @param context - {Object} 执行的上下文\r\n * @param expressionStr - {String} 表达式\r\n * @return {any}\r\n */\r\nfunction execExpression(context, expressionStr) {\r\n    // return eval(`with(context){${expressionStr}}`);\r\n    // 实参列表，调用函数传递的参数\r\n    var argv = [this.$dataProxy];\r\n    // 形参列表，函数声明的参数列表\r\n    var parameters = ['context'];\r\n    // 迭代context\r\n    for (var p in context) {\r\n        // 拼凑其他实参\r\n        argv.push(context[p]);\r\n        // 拼凑其他形参\r\n        parameters.push(p);\r\n    }\r\n    // 创建函数并调用\r\n    return eval(\"\\n    const fun = new Function(\\n      `\" + parameters.join(',') + \"`,\\n      `return eval(\\\"with(context){\" + expressionStr + \"}\\\")`,\\n    );\\n  \\n    fun.apply(window, argv);\\n  \");\r\n    /* replaceWith(context, expressionStr); */\r\n    // const fun = new Function('context','expressionStr',`return with(context){${expressionStr}}`);\r\n    // return fun(context, expressionStr);\r\n}\r\nexports.execExpression = execExpression;\r\n/**\r\n * createExecutionContext - 创建一个执行上下文的调用\r\n * 其实就是创建一个函数，然后调用这个函数，在这个函数的最后会去调用render或者是renderComponent进行render的操作\r\n * @param codeCallContext - Object 调用上下文\r\n * @param codeCallBack - Function 回调的函数\r\n */\r\nfunction createExecutionContext(codeCallContext, codeCallBack) {\r\n    var executionContext = new Function('codeCallContext', // 代码执行的上下文也就是this\r\n    'codeCallBack', // 代码执行的回调函数\r\n    'dirtyCallContext', // 进行渲染函数的调用上下文\r\n    'dirtyCallBack', // 执行渲染的回调函数\r\n    'codeCallBack.call(codeCallContext);dirtyCallBack.call(dirtyCallContext);');\r\n    var self = this;\r\n    executionContext(codeCallContext, codeCallBack, this, function () {\r\n        // 判断是否有数据的修改，如果有执行render或者\r\n        if (proxyDirtyStack_1.isEmpty())\r\n            return false;\r\n        // 先获取renderHandler\r\n        var renderHandler = proxyDirtyStack_1.getRenderHandler();\r\n        // 在清空\r\n        proxyDirtyStack_1.clear();\r\n        // 以上2行代码的位置不能改变，否则会引起死循环\r\n        // $stack不为空说明了有数据的修改\r\n        // ---------------------------------有数据更新\r\n        // 重新计算所有的计算属性，因为没细化的知道哪些变量在哪些计算属性函数中使用，所以这里只能全部重新计算\r\n        util_1.resetComputed.call(self);\r\n        // 进行render,render有2中，一种是vue实例的render，一种是component的render\r\n        if (renderHandler) {\r\n            renderHandler.call(self);\r\n        }\r\n        return false;\r\n        // -----------------------------------end\r\n    });\r\n}\r\nexports.createExecutionContext = createExecutionContext;\r\n/**\r\n * clone - 创建一个 value 的浅拷贝\r\n * @param value - Object | Array\r\n * @return Object | Array | null\r\n */\r\nfunction clone(value) {\r\n    if (!isObject(value) && !isArray(value))\r\n        return null;\r\n    if (isObject(value)) {\r\n        // 新的引用\r\n        var cloneValue_1 = {};\r\n        Object.keys(value).forEach(function (key) {\r\n            if (value.hasOwnProperty(key)) {\r\n                cloneValue_1[key] = value[key];\r\n            }\r\n        });\r\n        return cloneValue_1;\r\n    }\r\n    if (isArray(value)) {\r\n        return [].concat(value);\r\n    }\r\n    return null;\r\n}\r\nexports.clone = clone;\r\n/**\r\n * cloneDeep - 创建一个value的深拷贝\r\n * @param value - Object | Array\r\n * @return Object | Array\r\n */\r\nfunction cloneDeep(value, map) {\r\n    if (map === void 0) { map = new Map(); }\r\n    return cloneDeep_1.default(value);\r\n    // if (!isObject(value) && !isArray(value)) return value;\r\n    //\r\n    // if (isObject(value)) {\r\n    //   // 新的引用\r\n    //   const cloneValue = {};\r\n    //\r\n    //   if (map.get(value)) {\r\n    //     return map.get(value);\r\n    //   }\r\n    //\r\n    //   map.set(value, cloneValue);\r\n    //\r\n    //   Object.keys(value).forEach((key) => {\r\n    //     if (value.hasOwnProperty(key)) {\r\n    //       const itemValue = value[key];\r\n    //       if (isObject(itemValue) || isArray(itemValue)) {\r\n    //         cloneValue[key] = cloneDeep(itemValue, map);\r\n    //       } else {\r\n    //         cloneValue[key] = value[key];\r\n    //       }\r\n    //     } else {\r\n    //       // 如果itemValue不是对象或者数组则直接赋值就可以(例如: primary 类型，和Function类型)\r\n    //       cloneValue[key] = value[key];\r\n    //     }\r\n    //   });\r\n    //\r\n    //   return cloneValue;\r\n    // }\r\n    //\r\n    // if (isArray(value)) {\r\n    //   const cloneValue = [];\r\n    //\r\n    //   if (map.get(value)) {\r\n    //     return map.get(value);\r\n    //   }\r\n    //   map.set(value, cloneValue);\r\n    //\r\n    //   value.forEach((itemValue) => {\r\n    //     if (isObject(itemValue) || isArray(itemValue)) {\r\n    //       cloneValue.push(cloneDeep(itemValue, map));\r\n    //     } else {\r\n    //       // 如果itemValue不是对象或者数组则直接赋值就可以(例如: primary 类型，和Function类型)\r\n    //       cloneValue.push(itemValue);\r\n    //     }\r\n    //   });\r\n    //   return cloneValue;\r\n    // }\r\n    //\r\n    // return value;\r\n}\r\nexports.cloneDeep = cloneDeep;\r\n/**\r\n * noop - 空函数\r\n */\r\nfunction noop() { }\r\nexports.noop = noop;\r\n/**\r\n * log - 输出\r\n * @param argv\r\n */\r\nfunction log() {\r\n    var argv = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        argv[_i] = arguments[_i];\r\n    }\r\n    if (constants_1.IS_LOG_OUTPUT) {\r\n        console.log.apply(console, argv);\r\n    }\r\n}\r\nexports.log = log;\r\n"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","log","noop","cloneDeep","clone","createExecutionContext","execExpression","createElement","isDynamicComponentNode","isSlotNode","isTemplateNode","isElementNode","isTextNode","isObject","isFunction","isNumber","isArray","isEmpty","merge","toCamelCase","cloneDeep_1","require","util_1","proxyDirtyStack_1","constants_1","str","toUpperCase","result","split","DIRECT_DIVIDING_SYMBOL","map","item","charAt","substring","join","toLowerCase","srcObj","tarObjs","_i","arguments","length","assign","apply","concat","undefined","obj","Array","val","Function","el","nodeType","Node","TEXT_NODE","ELEMENT_NODE","nodeName","htmlStr","document","innerHTML","firstElementChild","context","expressionStr","argv","$dataProxy","parameters","p","push","eval","codeCallContext","codeCallBack","executionContext","self","renderHandler","getRenderHandler","clear","resetComputed","call","cloneValue_1","keys","forEach","key","hasOwnProperty","Map","IS_LOG_OUTPUT","console"],"mappings":"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"}