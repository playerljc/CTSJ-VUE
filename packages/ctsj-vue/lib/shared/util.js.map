{"version":3,"file":"util.js","sources":["shared/util.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.log = exports.createExecutionContext = exports.execExpression = exports.pascalCaseToKebabCase = exports.isPascalCase = exports.isKebabCase = exports.toCamelCase = void 0;\r\nvar util_1 = require(\"../core/util\");\r\n// import { clear, isEmpty as dirtyStackIsEmpty, getRenderHandler } from '../compiler/proxyDirtyStack';\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * toCamelCase - 用连接符链接的字符串转换成驼峰写法\r\n * 例：abc-def AbcDef\r\n * @param str - string 用连接符节点的字符串\r\n * @param toUpperCase - boolean 是否转换成大写\r\n * @return {String}\r\n */\r\nfunction toCamelCase(str, toUpperCase) {\r\n    if (toUpperCase === void 0) { toUpperCase = false; }\r\n    var result = str\r\n        .split(constants_1.DIRECT_DIVIDING_SYMBOL)\r\n        .map(function (item) { return item.charAt(0).toUpperCase() + item.substring(1); })\r\n        .join('');\r\n    return !toUpperCase ? \"\" + result.charAt(0).toLowerCase() + result.substring(1) : result;\r\n}\r\nexports.toCamelCase = toCamelCase;\r\n/**\r\n * isKebabCase - 是否是烤肉串形式的名字\r\n * @param name - string 名称\r\n * @return boolean\r\n */\r\nfunction isKebabCase(name) {\r\n    return /^([a-z][a-z0-9]*)(-[a-z0-9]+)*$/.test(name);\r\n}\r\nexports.isKebabCase = isKebabCase;\r\n/**\r\n * isPascalCase - 是否是驼峰形式的名字\r\n * @param name - string 名称\r\n * @return boolean\r\n */\r\nfunction isPascalCase(name) {\r\n    return /^[A-Z][a-z]+(?:[A-Z][a-z]+)*$/.test(name);\r\n}\r\nexports.isPascalCase = isPascalCase;\r\n/**\r\n * pascalCaseToKebabCase 驼峰转xxx-xxx-xxx\r\n * @param name - string pascalCase的字符串\r\n * @return {string}\r\n */\r\nfunction pascalCaseToKebabCase(name) {\r\n    var result = name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2');\r\n    return (result.startsWith('-') ? result.substring(1) : result).toLowerCase();\r\n}\r\nexports.pascalCaseToKebabCase = pascalCaseToKebabCase;\r\n/**\r\n * execExpression - 执行表达式\r\n * @param context - {Object} 执行的上下文\r\n * @param expressionStr - {String} 表达式\r\n * @return {any}\r\n */\r\nfunction execExpression(context, expressionStr) {\r\n    // return eval(`with(context){${expressionStr}}`);\r\n    // 实参列表，调用函数传递的参数\r\n    var argv = [this.$dataProxy];\r\n    // 形参列表，函数声明的参数列表\r\n    var parameters = ['context'];\r\n    // 迭代context\r\n    for (var p in context) {\r\n        // 拼凑其他实参\r\n        argv.push(context[p]);\r\n        // 拼凑其他形参\r\n        parameters.push(p);\r\n    }\r\n    // 创建函数并调用\r\n    return eval(\"\\n    const fun = new Function(\\n      `\" + parameters.join(',') + \"`,\\n      `return eval(\\\"with(context){\" + expressionStr + \"}\\\")`,\\n    );\\n  \\n    fun.apply(window, argv);\\n  \");\r\n    /* replaceWith(context, expressionStr); */\r\n    // const fun = new Function('context','expressionStr',`return with(context){${expressionStr}}`);\r\n    // return fun(context, expressionStr);\r\n}\r\nexports.execExpression = execExpression;\r\n/**\r\n * createExecutionContext - 创建一个执行上下文的调用\r\n * 其实就是创建一个函数，然后调用这个函数，在这个函数的最后会去调用render或者是renderComponent进行render的操作\r\n * @param codeCallContext - Object 调用上下文\r\n * @param codeCallBack - Function 回调的函数\r\n */\r\nfunction createExecutionContext(codeCallContext, codeCallBack) {\r\n    var executionContext = new Function('codeCallContext', // 代码执行的上下文也就是this\r\n    'codeCallBack', // 代码执行的回调函数\r\n    'dirtyCallContext', // 进行渲染函数的调用上下文\r\n    'dirtyCallBack', // 执行渲染的回调函数\r\n    \"\\n     const result = codeCallBack.call(codeCallContext);\\n     dirtyCallBack.call(dirtyCallContext);\\n     return result;\\n    \");\r\n    var self = this;\r\n    return executionContext(codeCallContext, codeCallBack, this, function () {\r\n        // 判断是否有数据的修改，如果有执行render或者\r\n        if (self.$proxyDirtyStack.isEmpty())\r\n            return false;\r\n        // 先获取renderHandler\r\n        var renderHandler = self.$proxyDirtyStack.getRenderHandler();\r\n        // 在清空\r\n        self.$proxyDirtyStack.clear();\r\n        // 以上2行代码的位置不能改变，否则会引起死循环\r\n        // $stack不为空说明了有数据的修改\r\n        // ---------------------------------有数据更新\r\n        // 重新计算所有的计算属性，因为没细化的知道哪些变量在哪些计算属性函数中使用，所以这里只能全部重新计算\r\n        util_1.resetComputed.call(self);\r\n        // 进行render,render有2中，一种是vue实例的render，一种是component的render\r\n        if (renderHandler) {\r\n            renderHandler.call(self);\r\n        }\r\n        return false;\r\n        // -----------------------------------end\r\n    });\r\n}\r\nexports.createExecutionContext = createExecutionContext;\r\n/**\r\n * log - 输出\r\n * @param argv\r\n */\r\nfunction log() {\r\n    var argv = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        argv[_i] = arguments[_i];\r\n    }\r\n    if (constants_1.IS_LOG_OUTPUT) {\r\n        console.log.apply(console, argv);\r\n    }\r\n}\r\nexports.log = log;\r\n"],"names":["Object","defineProperty","exports","value","log","createExecutionContext","execExpression","pascalCaseToKebabCase","isPascalCase","isKebabCase","toCamelCase","util_1","require","constants_1","str","toUpperCase","result","split","DIRECT_DIVIDING_SYMBOL","map","item","charAt","substring","join","toLowerCase","name","test","replace","startsWith","context","expressionStr","argv","this","$dataProxy","parameters","p","push","eval","codeCallContext","codeCallBack","executionContext","Function","self","$proxyDirtyStack","isEmpty","renderHandler","getRenderHandler","clear","resetComputed","call","_i","arguments","length","IS_LOG_OUTPUT","console","apply"],"mappings":"aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,OAAO,IACtDD,QAAQE,IAAMF,QAAQG,uBAAyBH,QAAQI,eAAiBJ,QAAQK,sBAAwBL,QAAQM,aAAeN,QAAQO,YAAcP,QAAQQ,iBAAc,EAC3K,IAAIC,OAASC,QAAQ,gBAEjBC,YAAcD,QAAQ,eAQ1B,SAASF,YAAYI,EAAKC,QACF,IAAhBA,IAA0BA,GAAc,GACxCC,EAASF,EACRG,MAAMJ,YAAYK,wBAClBC,IAAI,SAAUC,GAAQ,OAAOA,EAAKC,OAAO,GAAGN,cAAgBK,EAAKE,UAAU,KAC3EC,KAAK,IACV,OAAQR,EAA0EC,EAA5D,GAAKA,EAAOK,OAAO,GAAGG,cAAgBR,EAAOM,UAAU,GAQjF,SAASb,YAAYgB,GACjB,MAAO,kCAAkCC,KAAKD,GAQlD,SAASjB,aAAaiB,GAClB,MAAO,gCAAgCC,KAAKD,GAQhD,SAASlB,sBAAsBkB,GACvBT,EAASS,EAAKE,QAAQ,+BAAgC,SAC1D,OAAQX,EAAOY,WAAW,KAAOZ,EAAOM,UAAU,GAAKN,GAAQQ,cASnE,SAASlB,eAAeuB,QAASC,eAG7B,IAAIC,KAAO,CAACC,KAAKC,YAEbC,WAAa,CAAC,WAETC,EAAT,IAASA,KAAKN,QAEVE,KAAKK,KAAKP,QAAQM,IAElBD,WAAWE,KAAKD,GAGpB,OAAOE,KAAK,2CAA6CH,WAAWX,KAAK,KAAO,yCAA4CO,cAAgB,uDAYhJ,SAASzB,uBAAuBiC,EAAiBC,GAC7C,IAAIC,EAAmB,IAAIC,SAAS,kBACpC,eACA,mBACA,gBACA,oIACIC,EAAOV,KACX,OAAOQ,EAAiBF,EAAiBC,EAAcP,KAAM,WAEzD,GAAIU,EAAKC,iBAAiBC,UACtB,OAAO,EAEX,IAAIC,EAAgBH,EAAKC,iBAAiBG,mBAY1C,OAVAJ,EAAKC,iBAAiBI,QAKtBpC,OAAOqC,cAAcC,KAAKP,GAEtBG,GACAA,EAAcI,KAAKP,IAEhB,IASf,SAAStC,MAEL,IADA,IAAI2B,EAAO,GACFmB,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCnB,EAAKmB,GAAMC,UAAUD,GAErBrC,YAAYwC,eACZC,QAAQlD,IAAImD,MAAMD,QAASvB,GApGnC7B,QAAQQ,YAAcA,YAStBR,QAAQO,YAAcA,YAStBP,QAAQM,aAAeA,aAUvBN,QAAQK,sBAAwBA,sBA0BhCL,QAAQI,eAAiBA,eAmCzBJ,QAAQG,uBAAyBA,uBAcjCH,QAAQE,IAAMA"}