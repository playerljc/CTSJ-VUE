{"version":3,"file":"util.js","sources":["shared/util.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.noop = exports.cloneDeep = exports.clone = exports.createExecutionContext = exports.execExpression = exports.createElement = exports.isDynamicComponentNode = exports.isSlotNode = exports.isTemplateNode = exports.isElementNode = exports.isTextNode = exports.isObject = exports.isFunction = exports.isArray = exports.isEmpty = exports.merge = exports.toCamelCase = void 0;\r\n// import lodashCloneDeep from 'lodash/cloneDeep';\r\n// import { render } from 'src/compiler/render';\r\nvar util_1 = require(\"../core/util\");\r\nvar dirtyStack_1 = require(\"../compiler/dirtyStack\");\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * toCamelCase - 用连接符链接的字符串转换成驼峰写法\r\n * 例：abc-def AbcDef\r\n * @param str - string 用连接符节点的字符串\r\n * @param toUpperCase - boolean 是否转换成大写\r\n * @return {String}\r\n */\r\nfunction toCamelCase(str, toUpperCase) {\r\n    if (toUpperCase === void 0) { toUpperCase = false; }\r\n    var result = str\r\n        .split(constants_1.DIRECT_DIVIDING_SYMBOL)\r\n        .map(function (item) { return item.charAt(0).toUpperCase() + item.substring(1); })\r\n        .join('');\r\n    return !toUpperCase ? \"\" + result.charAt(0).toLowerCase() + result.substring(1) : result;\r\n}\r\nexports.toCamelCase = toCamelCase;\r\n/**\r\n * merge - 会改变srcObj并返回\r\n * @param srcObj - {Object} 混入的对象\r\n * @param tarObjs - {Array<Object>} - 要混入的值\r\n * @return {Object}\r\n */\r\nfunction merge(srcObj) {\r\n    var tarObjs = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        tarObjs[_i - 1] = arguments[_i];\r\n    }\r\n    return Object.assign.apply(Object, [srcObj].concat(tarObjs));\r\n}\r\nexports.merge = merge;\r\n/**\r\n * isEmpty - 对象是否为空\r\n * @param value\r\n */\r\nfunction isEmpty(value) {\r\n    if (value === null || value === '' || value === undefined)\r\n        return true;\r\n    return false;\r\n}\r\nexports.isEmpty = isEmpty;\r\n/**\r\n * isArray - 判断数组\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isArray(obj) {\r\n    return Array.isArray(obj);\r\n}\r\nexports.isArray = isArray;\r\n/**\r\n * isFunction - 判断函数\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isFunction(obj) {\r\n    return obj instanceof Function;\r\n}\r\nexports.isFunction = isFunction;\r\n/**\r\n * isObject - 是否是对象\r\n * @param obj\r\n * @return {boolean}\r\n */\r\nfunction isObject(obj) {\r\n    return obj instanceof Object && !Array.isArray(obj) && !(obj instanceof Function);\r\n}\r\nexports.isObject = isObject;\r\n/**\r\n * isTextNode - 是否是文本节点\r\n * @param el - Node\r\n * @return {boolean}\r\n */\r\nfunction isTextNode(el) {\r\n    return el.nodeType === Node.TEXT_NODE;\r\n}\r\nexports.isTextNode = isTextNode;\r\n/**\r\n * isElementNode - 是否是元素节点\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isElementNode(el) {\r\n    return el.nodeType === Node.ELEMENT_NODE;\r\n}\r\nexports.isElementNode = isElementNode;\r\n/**\r\n * isTemplateNode - 是否是template元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isTemplateNode(el) {\r\n    return el.nodeName.toLowerCase() === 'template';\r\n}\r\nexports.isTemplateNode = isTemplateNode;\r\n/**\r\n * isSlotNode - 是否是slot元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isSlotNode(el) {\r\n    return el.nodeName.toLowerCase() === 'slot';\r\n}\r\nexports.isSlotNode = isSlotNode;\r\n/**\r\n * isDynamicComponentNode - 是否是动态组件元素\r\n * @param el - Element\r\n * @return {boolean}\r\n */\r\nfunction isDynamicComponentNode(el) {\r\n    return el.nodeName.toLowerCase() === 'component';\r\n}\r\nexports.isDynamicComponentNode = isDynamicComponentNode;\r\n/**\r\n * createElement - 根据html字符串创建dom\r\n * @param htmlStr - string\r\n * @return {Element}\r\n */\r\nfunction createElement(htmlStr) {\r\n    var el = document.createElement('div');\r\n    el.innerHTML = htmlStr;\r\n    return el.firstElementChild;\r\n}\r\nexports.createElement = createElement;\r\n/**\r\n * execExpression - 执行表达式\r\n * @param context - {Object} 执行的上下文\r\n * @param expressionStr - {String} 表达式\r\n * @return {any}\r\n */\r\nfunction execExpression(context, expressionStr) {\r\n    return eval(\"with(context){\" + expressionStr + \"}\");\r\n    /* replaceWith(context, expressionStr); */\r\n    // const fun = new Function('context','expressionStr',`return with(context){${expressionStr}}`);\r\n    // return fun(context, expressionStr);\r\n}\r\nexports.execExpression = execExpression;\r\n/**\r\n * createExecutionContext\r\n * @param codeCallContext - Object 调用上下文\r\n * @param codeCallBack - Function 回调的函数\r\n */\r\nfunction createExecutionContext(codeCallContext, codeCallBack) {\r\n    var executionContext = new Function('codeCallContext', 'codeCallBack', 'dirtyCallContext', 'dirtyCallBack', 'codeCallBack.call(codeCallContext);dirtyCallBack.call(dirtyCallContext);');\r\n    var self = this;\r\n    executionContext(codeCallContext, codeCallBack, this, function () {\r\n        debugger;\r\n        // 判断是否有数据的修改，如果有执行render或者\r\n        if (dirtyStack_1.isEmpty())\r\n            return false;\r\n        // 先获取renderHandler\r\n        var renderHandler = dirtyStack_1.getRenderHandler();\r\n        // 在清空\r\n        dirtyStack_1.clear();\r\n        // 以上2行代码的位置不能改变，否则会引起死循环\r\n        // $stack不为空说明了有数据的修改\r\n        // ---------------------------------有数据更新\r\n        // 重新计算所有的计算属性，因为没细化的知道哪些变量在哪些计算属性函数中使用，所以这里只能全部重新计算\r\n        util_1.resetComputed.call(self);\r\n        // 进行render,render有2中，一种是vue实例的render，一种是component的render\r\n        if (renderHandler) {\r\n            renderHandler.call(self);\r\n        }\r\n        return false;\r\n        // -----------------------------------end\r\n    });\r\n}\r\nexports.createExecutionContext = createExecutionContext;\r\n/**\r\n * clone - 创建一个 value 的浅拷贝\r\n * @param value - Object | Array\r\n * @return Object | Array | null\r\n */\r\nfunction clone(value) {\r\n    if (!isObject(value) && !isArray(value))\r\n        return null;\r\n    if (isObject(value)) {\r\n        // 新的引用\r\n        var cloneValue_1 = {};\r\n        Object.keys(value).forEach(function (key) {\r\n            if (value.hasOwnProperty(key)) {\r\n                cloneValue_1[key] = value[key];\r\n            }\r\n        });\r\n        return cloneValue_1;\r\n    }\r\n    if (isArray(value)) {\r\n        return [].concat(value);\r\n    }\r\n    return null;\r\n}\r\nexports.clone = clone;\r\n/**\r\n * cloneDeep - 创建一个value的深拷贝\r\n * @param value - Object | Array\r\n * @return Object | Array\r\n */\r\nfunction cloneDeep(value, map) {\r\n    // return lodashCloneDeep(value);\r\n    if (map === void 0) { map = new Map(); }\r\n    if (!isObject(value) && !isArray(value))\r\n        return value;\r\n    if (isObject(value)) {\r\n        // 新的引用\r\n        var cloneValue_2 = {};\r\n        if (map.get(value)) {\r\n            return map.get(value);\r\n        }\r\n        map.set(value, cloneValue_2);\r\n        Object.keys(value).forEach(function (key) {\r\n            if (value.hasOwnProperty(key)) {\r\n                var itemValue = value[key];\r\n                if (isObject(itemValue) || isArray(itemValue)) {\r\n                    cloneValue_2[key] = cloneDeep(itemValue, map);\r\n                }\r\n                else {\r\n                    cloneValue_2[key] = value[key];\r\n                }\r\n            }\r\n            else {\r\n                // 如果itemValue不是对象或者数组则直接赋值就可以(例如: primary 类型，和Function类型)\r\n                cloneValue_2[key] = value[key];\r\n            }\r\n        });\r\n        return cloneValue_2;\r\n    }\r\n    if (isArray(value)) {\r\n        var cloneValue_3 = [];\r\n        if (map.get(value)) {\r\n            return map.get(value);\r\n        }\r\n        map.set(value, cloneValue_3);\r\n        value.forEach(function (itemValue) {\r\n            if (isObject(itemValue) || isArray(itemValue)) {\r\n                cloneValue_3.push(cloneDeep(itemValue, map));\r\n            }\r\n            else {\r\n                // 如果itemValue不是对象或者数组则直接赋值就可以(例如: primary 类型，和Function类型)\r\n                cloneValue_3.push(itemValue);\r\n            }\r\n        });\r\n        return cloneValue_3;\r\n    }\r\n    return value;\r\n}\r\nexports.cloneDeep = cloneDeep;\r\n/**\r\n * noop - 空函数\r\n */\r\nfunction noop() { }\r\nexports.noop = noop;\r\n"],"names":["Object","defineProperty","exports","value","noop","cloneDeep","clone","createExecutionContext","execExpression","createElement","isDynamicComponentNode","isSlotNode","isTemplateNode","isElementNode","isTextNode","isObject","isFunction","isArray","isEmpty","merge","toCamelCase","util_1","require","dirtyStack_1","constants_1","str","toUpperCase","result","split","DIRECT_DIVIDING_SYMBOL","map","item","charAt","substring","join","toLowerCase","srcObj","tarObjs","_i","arguments","length","assign","apply","concat","undefined","obj","Array","Function","el","nodeType","Node","TEXT_NODE","ELEMENT_NODE","nodeName","htmlStr","document","innerHTML","firstElementChild","context","expressionStr","eval","codeCallContext","codeCallBack","executionContext","self","this","renderHandler","getRenderHandler","clear","resetComputed","call","cloneValue_1","keys","forEach","key","hasOwnProperty","Map","cloneValue_2","get","set","itemValue","cloneValue_3","push"],"mappings":"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"}