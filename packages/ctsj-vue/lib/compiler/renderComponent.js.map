{"version":3,"file":"renderComponent.js","sources":["compiler/renderComponent.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderComponent = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar util_1 = require(\"../core/util\");\r\nvar renderUtil_1 = require(\"./renderUtil\");\r\nvar constants_1 = require(\"../shared/constants\");\r\n/**\r\n * renderComponent - 组件实例的渲染\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponent() {\r\n    // 组件的实例对象\r\n    var self = this;\r\n    // 组件实例代表的vnode\r\n    var vnode = renderUtil_1.renderLoop.call(this, {\r\n        context: {},\r\n        el: this.templateEl,\r\n        parentVNode: null,\r\n        parentElement: null,\r\n    });\r\n    if (!vnode)\r\n        return null;\r\n    // vnode的hook设置\r\n    // 现在实现的hook有如下：\r\n    // init\r\n    // create\r\n    // insert\r\n    // prepatch\r\n    // postpatch\r\n    // destroy\r\n    // 这块可能vnode.data.hook已经有上面的生命周期函数，所以要进行判断\r\n    var hooks = vnode.data.hook;\r\n    vnode.data.hook = {\r\n        /**\r\n         * 一个vnode已添加\r\n         * @param vnode\r\n         */\r\n        init: function (curVNode) {\r\n            if (vue_util_1.isFunction(hooks.init)) {\r\n                hooks.init.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[1]);\r\n            }\r\n        },\r\n        /**\r\n         * 已基于vnode创建了一个DOM元素\r\n         * @param emptyVnode\r\n         * @param vnode\r\n         */\r\n        create: function (emptyVnode, curVNode) {\r\n            if (vue_util_1.isFunction(hooks.create)) {\r\n                hooks.create.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[2]);\r\n            }\r\n        },\r\n        /**\r\n         * insert - 元素已插入DOM\r\n         * @param vnode\r\n         */\r\n        insert: function (curVNode) {\r\n            if (vue_util_1.isFunction(hooks.insert)) {\r\n                hooks.insert.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (curVNode === vnode) {\r\n                // ------ mount\r\n                // 如果组件的配置中含有$vmCallback，这需要调用这个函数传入self\r\n                if ('$vmCallback' in self.$config && self.$config.$vmCallback) {\r\n                    self.$config.$vmCallback(self);\r\n                }\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[3]);\r\n                console.log(this.templateEl);\r\n            }\r\n        },\r\n        /**\r\n         * 元素即将被修补\r\n         */\r\n        prepatch: function (oldVNode, newVNode) {\r\n            if (vue_util_1.isFunction(hooks.prepatch)) {\r\n                hooks.prepatch.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (newVNode === vnode) {\r\n                // beforeUpdate\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[4]);\r\n            }\r\n        },\r\n        /**\r\n         * 元素已被修补\r\n         */\r\n        postpatch: function (oldVNode, newVNode) {\r\n            if (vue_util_1.isFunction(hooks.postpatch)) {\r\n                hooks.postpatch.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (newVNode === vnode) {\r\n                // update\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[5]);\r\n            }\r\n        },\r\n        /**\r\n         * 一个元素被直接或间接删除\r\n         */\r\n        destroy: function (curVNode) {\r\n            if (vue_util_1.isFunction(hooks.destroy)) {\r\n                hooks.destroy.apply(hooks, Array.from(arguments));\r\n            }\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[7]);\r\n            }\r\n        },\r\n    };\r\n    // 需要清空proxyDirtyStack\r\n    this.$proxyDirtyStack.clear();\r\n    return vnode;\r\n}\r\nexports.renderComponent = renderComponent;\r\n"],"names":["Object","defineProperty","exports","value","renderComponent","vue_util_1","require","util_1","renderUtil_1","constants_1","self","this","vnode","renderLoop","call","context","el","templateEl","parentVNode","parentElement","hooks","data","hook","init","curVNode","isFunction","apply","Array","from","arguments","triggerLifecycle","LIFECYCLE_HOOKS","create","emptyVnode","insert","$config","$vmCallback","console","log","prepatch","oldVNode","newVNode","postpatch","destroy","$proxyDirtyStack","clear"],"mappings":"aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,OAAO,IACtDD,QAAQE,qBAAkB,EAC1B,IAAIC,WAAaC,QAAQ,kBACrBC,OAASD,QAAQ,gBACjBE,aAAeF,QAAQ,gBACvBG,YAAcH,QAAQ,uBAK1B,SAASF,kBAEL,IAAIM,EAAOC,KAEPC,EAAQJ,aAAaK,WAAWC,KAAKH,KAAM,CAC3CI,QAAS,GACTC,GAAIL,KAAKM,WACTC,YAAa,KACbC,cAAe,OAEnB,IAAKP,EACD,OAAO,KAUX,IAAIQ,EAAQR,EAAMS,KAAKC,KAmFvB,OAlFAV,EAAMS,KAAKC,KAAO,CAKdC,KAAM,SAAUC,GACRnB,WAAWoB,WAAWL,EAAMG,OAC5BH,EAAMG,KAAKG,MAAMN,EAAOO,MAAMC,KAAKC,YAEnCL,IAAaZ,GACbL,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,KAQvEC,OAAQ,SAAUC,EAAYT,GACtBnB,WAAWoB,WAAWL,EAAMY,SAC5BZ,EAAMY,OAAON,MAAMN,EAAOO,MAAMC,KAAKC,YAErCL,IAAaZ,GACbL,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,KAOvEG,OAAQ,SAAUV,GACVnB,WAAWoB,WAAWL,EAAMc,SAC5Bd,EAAMc,OAAOR,MAAMN,EAAOO,MAAMC,KAAKC,YAErCL,IAAaZ,IAGT,gBAAiBF,EAAKyB,SAAWzB,EAAKyB,QAAQC,aAC9C1B,EAAKyB,QAAQC,YAAY1B,GAE7BH,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,IAC/DM,QAAQC,IAAI3B,KAAKM,cAMzBsB,SAAU,SAAUC,EAAUC,GACtBpC,WAAWoB,WAAWL,EAAMmB,WAC5BnB,EAAMmB,SAASb,MAAMN,EAAOO,MAAMC,KAAKC,YAEvCY,IAAa7B,GAEbL,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,KAMvEW,UAAW,SAAUF,EAAUC,GACvBpC,WAAWoB,WAAWL,EAAMsB,YAC5BtB,EAAMsB,UAAUhB,MAAMN,EAAOO,MAAMC,KAAKC,YAExCY,IAAa7B,GAEbL,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,KAMvEY,QAAS,SAAUnB,GACXnB,WAAWoB,WAAWL,EAAMuB,UAC5BvB,EAAMuB,QAAQjB,MAAMN,EAAOO,MAAMC,KAAKC,YAEtCL,IAAaZ,GACbL,OAAOuB,iBAAiBhB,KAAKJ,EAAMD,YAAYsB,gBAAgB,MAK3EpB,KAAKiC,iBAAiBC,QACfjC,EAEXV,QAAQE,gBAAkBA"}