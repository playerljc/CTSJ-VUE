{"version":3,"file":"renderSlotNode.js","sources":["compiler/renderSlotNode.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderSlotNode = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar for_1 = require(\"./directives/for\");\r\nvar if_1 = require(\"./directives/if\");\r\nvar else_1 = require(\"./directives/else\");\r\nvar else_if_1 = require(\"./directives/else-if\");\r\nvar util_1 = require(\"./directives/util\");\r\nvar bind_1 = require(\"./directives/bind\");\r\nvar constants_1 = require(\"../shared/constants\");\r\nvar util_2 = require(\"../shared/util\");\r\nvar proxy_1 = require(\"../core/proxy\");\r\nvar renderTemplateNode_1 = require(\"./renderTemplateNode\");\r\n/**\r\n * renderSlotNode - 渲染slot元素\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return VNode | VNodes\r\n *\r\n * --------------------下面是列举的一个例子---------------------\r\n *\r\n * wrap - 比如vue实例的模板\r\n * 元素如果是这样定义的\r\n * 1. 第一种情况 default用<template v-slot:default></template>表示的\r\n * <my-component>\r\n *   <template v-slot:head></template>\r\n *   <template v-slot:footer></template>\r\n *   <template v-slot:default>\r\n *     <div>{{name}}</div>\r\n *     <div>{{sex}}</div>\r\n *     <my-component-inner></my-component-inner>\r\n *   </template>\r\n * </my-component>\r\n *\r\n * 2. 第二种情况 default没用template表示\r\n * <li v-for=\"item in list\">\r\n *   <my-component>\r\n *      <div>{{item.name}}</div>\r\n *      <div>{{item.sex}}</div>\r\n *      <template v-slot:head></template>\r\n *      <template v-slot:footer></template>\r\n *      <my-component-inner></my-component-inner>\r\n *   </my-component>\r\n * </li>\r\n *\r\n * inner - 比如my-component的template模板\r\n * 比如VNode的结构是 my-component的template的内容\r\n * 1.没有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <slot></slot>\r\n *   <slot name=\"head\"></slot>\r\n *   <slot name=\"footer\"></slot>\r\n *   <template></template>\r\n * </div>\r\n *\r\n * 2.有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <ul>\r\n *    <li v-for=\"(item,index in list)\">\r\n *      {{item.name}}\r\n *      <slot></slot>\r\n *    </li>\r\n *   </ul>\r\n * </div>\r\n */\r\nfunction renderSlotNode(_a) {\r\n    // this是my-component的实例\r\n    // this.$parent是Vue实例或者是Component实例，应该用this.getParentContext()获取父亲的上下文对象作为调用renderTemplateNode的上下文参数\r\n    // el<slot></slot>的el this.$el是$parent的template中<my-component></my-component>这个el\r\n    var _this = this;\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    // this.$el这个变量需要克隆，因为下面会对这个变量进行操作，这个变量不能改变\r\n    // const $elClone = this.$el.cloneNode(true);\r\n    var vAttrNames = util_1.getVAttrNames(el);\r\n    // 循环和判断\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context,\r\n                // context === this.$dataProxy ? createContext.call(this, this.$dataProxy) : context,\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderSlotNode,\r\n            });\r\n        }\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n            // 如果不显示则返回null\r\n            if (!display) {\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else\r\n        if (else_1.hasVElse(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry.valid)\r\n                return null;\r\n            if (!entry.result)\r\n                return null;\r\n        }\r\n        // 解析v-else-if\r\n        if (else_if_1.hasVElseIf(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry.valid)\r\n                return null;\r\n            if (!entry.result)\r\n                return null;\r\n        }\r\n    }\r\n    var name = 'default';\r\n    var contextType = 'parent';\r\n    // 判断slot中是否存在name属性\r\n    if (util_1.hasAttr('name', el)) {\r\n        // slot有name属性\r\n        name = util_1.getAttribute.call(this, { context: context, attrName: 'name', el: el });\r\n    }\r\n    var bindEntrys;\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        bindEntrys = bind_1.getVBindEntrys.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n    }\r\n    // 在父亲中寻找指定的<template v-slot:name></template>元素\r\n    // 获取$el(父亲)中的所有template节点\r\n    var templateEls = Array.from(this.$el.getElementsByTagName('template'));\r\n    // 寻找含有v-slot:name的template节点\r\n    var slotTemplateElIndex = -1;\r\n    // 命中的attributeName\r\n    var hitAttributeName;\r\n    // 处理命中关系\r\n    for (var i = 0, len = templateEls.length; i < len; i++) {\r\n        var templateEl = templateEls[i];\r\n        var attributeNames = templateEl.getAttributeNames();\r\n        var result = attributeNames.some(function (attributeName) {\r\n            // 符合前缀标准(v-slot:开头)\r\n            if (attributeName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\")) {\r\n                // 如果是动态slot(v-slot:[symbol])\r\n                if (/v-slot:\\[\\w{1,}\\]/gim.test(attributeName)) {\r\n                    var startIndex = attributeName.indexOf('[');\r\n                    var endIndex = attributeName.indexOf(']', startIndex);\r\n                    // 这是一个表达式需要进行计算的\r\n                    var expressionName = attributeName.substring(startIndex + 1, endIndex);\r\n                    // 父亲去解析\r\n                    var expressionNameValue = util_2.execExpression.call(_this.$parent, _this.$getParentContext(), expressionName);\r\n                    if (expressionNameValue === name) {\r\n                        hitAttributeName = attributeName;\r\n                    }\r\n                    return expressionNameValue === name;\r\n                }\r\n                // 不是动态slot\r\n                if (attributeName === constants_1.DIRECT_PREFIX + \"slot:\" + name) {\r\n                    hitAttributeName = attributeName;\r\n                }\r\n                return attributeName === constants_1.DIRECT_PREFIX + \"slot:\" + name;\r\n            }\r\n            return false;\r\n        });\r\n        if (result) {\r\n            slotTemplateElIndex = i;\r\n            break;\r\n        }\r\n    }\r\n    // const slotTemplateElIndex = templateEls.findIndex((templateEl) =>\r\n    //   templateEl\r\n    //     .getAttributeNames()\r\n    //     // TODO:这块需要处理动态v-slot\r\n    //     // v-slot:[abc]\r\n    //     .some((attrName) => {\r\n    //       // 这里的attrName可能的情况v-slot:111也可能是动态的v-slot:[111]\r\n    //       return attrName.startsWith(`${DIRECT_PREFIX}slot:${name}`);\r\n    //     }),\r\n    // );\r\n    var slotTemplateEl = null;\r\n    if (slotTemplateElIndex !== -1) {\r\n        slotTemplateEl = templateEls[slotTemplateElIndex];\r\n    }\r\n    // 如果没有找到<template v-slot:name></template>的元素\r\n    if (!slotTemplateEl) {\r\n        // 如果是default 没有定义<template v-slot:default></template> 则需要自己创建一个template元素\r\n        slotTemplateEl = document.createElement('template');\r\n        slotTemplateEl.setAttribute(constants_1.DIRECT_PREFIX + \"slot:\" + name, '');\r\n        hitAttributeName = constants_1.DIRECT_PREFIX + \"slot:\" + name;\r\n        // 如果是default\r\n        if (name === 'default') {\r\n            // 需要在$elClone的childrenNodes排除<template v-slot开头的元素放入自定义template元素中\r\n            Array.from(this.$el.childNodes)\r\n                .filter(function (node) {\r\n                if (vue_util_1.isElementNode(node) && node.tagName.toLowerCase() === 'template') {\r\n                    return !node\r\n                        .getAttributeNames()\r\n                        .some(function (attrName) { return attrName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\"); });\r\n                }\r\n                return true;\r\n            })\r\n                .forEach(function (node) {\r\n                // 这个地方\r\n                // 获取el元素key属性的值\r\n                // 这个key属性可能是v-bind:key=，也可能是key=\r\n                var cloneNode = node.cloneNode(true);\r\n                if (!vue_util_1.isTextNode(cloneNode) && !vue_util_1.isCommentNode(cloneNode)) {\r\n                    var key = util_1.getKey.call(_this, { context: context, el: cloneNode });\r\n                    if (vue_util_1.isEmpty(key)) {\r\n                        key = vue_util_1.uuid();\r\n                        node.setAttribute('key', key);\r\n                        cloneNode.setAttribute('key', key);\r\n                    }\r\n                }\r\n                slotTemplateEl.content.appendChild(cloneNode);\r\n            });\r\n        }\r\n        // 如果没有对应的template对应则使用slot的内部内容作为内容\r\n        else {\r\n            contextType = 'self';\r\n            Array.from(el.childNodes).forEach(function (node) {\r\n                // 这个地方\r\n                var cloneNode = node.cloneNode(true);\r\n                // 不是文本节点和注释节点\r\n                if (!vue_util_1.isTextNode(cloneNode) && !vue_util_1.isCommentNode(cloneNode)) {\r\n                    var key = util_1.getKey.call(_this, { context: context, el: cloneNode });\r\n                    if (vue_util_1.isEmpty(key)) {\r\n                        key = vue_util_1.uuid();\r\n                        node.setAttribute('key', key);\r\n                        cloneNode.setAttribute('key', key);\r\n                    }\r\n                }\r\n                slotTemplateEl.content.appendChild(cloneNode);\r\n                // slotTemplateEl.content.appendChild(node);\r\n            });\r\n        }\r\n    }\r\n    var curContext;\r\n    if (contextType === 'parent') {\r\n        // 此处需要对parentContext进行克隆\r\n        curContext = proxy_1.createContext(this.$getParentContext());\r\n        // 判断<template v-slot:名字=\"\"></template>是否有v-slot:名字=\"\"\r\n        var slotTemplateAttrValue_1 = slotTemplateEl.getAttribute(hitAttributeName);\r\n        // 如果有v-slot:名字=\"\"说明是作用域插槽\r\n        if (bindEntrys && bindEntrys.length && slotTemplateAttrValue_1) {\r\n            // 向parentContext中创建bindEntrys的作用域\r\n            curContext[slotTemplateAttrValue_1] = {};\r\n            bindEntrys.forEach(function (bindEntry) {\r\n                curContext[slotTemplateAttrValue_1][bindEntry.arg] = bindEntry.value;\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        curContext = context;\r\n    }\r\n    // 调用renderTemplateNode方法进行渲染\r\n    return renderTemplateNode_1.renderTemplateNode.call(this.$parent, {\r\n        context: curContext,\r\n        el: slotTemplateEl,\r\n        parentVNode: parentVNode,\r\n        parentElement: this.$el,\r\n    });\r\n}\r\nexports.renderSlotNode = renderSlotNode;\r\n"],"names":["Object","defineProperty","exports","value","renderSlotNode","vue_util_1","require","for_1","if_1","else_1","else_if_1","util_1","bind_1","constants_1","util_2","proxy_1","renderTemplateNode_1","_a","_this","this","context","el","parentVNode","parentElement","vAttrNames","getVAttrNames","length","hasVFor","parseVFor","call","renderFun","hasVIf","parseVIf","hasVElse","entry","parseVElse","valid","result","hasVElseIf","parseVElseIf","bindEntrys","name","contextType","hasAttr","getAttribute","attrName","hasVBind","getVBindEntrys","hitAttributeName","templateEls","Array","from","$el","getElementsByTagName","slotTemplateElIndex","i","len","getAttributeNames","some","attributeName","startsWith","DIRECT_PREFIX","test","startIndex","indexOf","endIndex","expressionName","substring","expressionNameValue","execExpression","$parent","$getParentContext","curContext","slotTemplateAttrValue_1","slotTemplateEl","document","createElement","setAttribute","childNodes","filter","node","isElementNode","tagName","toLowerCase","forEach","key","cloneNode","isTextNode","isCommentNode","getKey","isEmpty","uuid","content","appendChild","createContext","bindEntry","arg","renderTemplateNode"],"mappings":"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"}