{"version":3,"file":"for.js","sources":["compiler/directives/for.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.iteratorVFor = exports.parseVFor = exports.hasVFor = void 0;\r\nvar uuid_1 = __importDefault(require(\"../../shared/uuid\"));\r\nvar util_1 = require(\"./util\");\r\nvar regexp_1 = require(\"../../shared/regexp\");\r\nvar constants_1 = require(\"../../shared/constants\");\r\nvar util_2 = require(\"../../shared/util\");\r\n/**\r\n * hasVFor - 是否有v-for属性\r\n * @param attrNames - Array 所有的指令属性集合\r\n * @return {boolean}\r\n */\r\nfunction hasVFor(attrNames) {\r\n    return util_1.hasVAttr(attrNames, constants_1.DIRECT_PREFIX + \"for\");\r\n}\r\nexports.hasVFor = hasVFor;\r\n/**\r\n * parseVFor\r\n * @param context\r\n * @param el\r\n * @param vAttrNames\r\n * @param renderFun - render函数\r\n * @return {Array<VNode>}\r\n */\r\nfunction parseVFor(_a) {\r\n    var context = _a.context, el = _a.el, vAttrNames = _a.vAttrNames, renderFun = _a.renderFun;\r\n    // 如果没有group属性则创建一个\r\n    // group属性使用来给v-for进行分组的\r\n    var groupName = el.getAttribute(constants_1.GROUP_KEY_NAME);\r\n    if (!el.hasAttribute(constants_1.GROUP_KEY_NAME) || !groupName) {\r\n        groupName = uuid_1.default();\r\n        el.setAttribute(constants_1.GROUP_KEY_NAME, groupName);\r\n    }\r\n    var attrName = vAttrNames.find(function (n) { return n.indexOf(constants_1.DIRECT_PREFIX + \"for\") !== -1; });\r\n    //  <li v-for=\"item in items\"></li>\r\n    //  <li v-for=\"(item,index) in items\">\r\n    //    <div>{{item,index}}</div>\r\n    //  </li>\r\n    // (item,index) in items\r\n    // item in items\r\n    // (item) in items\r\n    // v-for=\"\"的值\r\n    var value = el.getAttribute(attrName);\r\n    // 把值进行分割获取表达式的部分\r\n    var grammar = value.split(regexp_1.EMPTY_SPLIT);\r\n    if (grammar.length !== 2)\r\n        return null;\r\n    // item 获取 (item,index)\r\n    var itItemStr = grammar[0].trim();\r\n    // data中的值\r\n    var itObjStr = grammar[1].trim();\r\n    var VNodes = [];\r\n    // 获取迭代的对象，分为对象迭代和数组迭代\r\n    var itObj = util_2.execExpression(context, itObjStr); // eval(`with(context){${itObjStr}}`); /* context[itObjStr] */\r\n    // 对象迭代\r\n    if (util_2.isObject(itObj)) {\r\n        var index = 0;\r\n        for (var p in itObj) {\r\n            // iteratorVFor会创建一个VNode或VNodes\r\n            var itemVNodes = iteratorVFor.call(this, {\r\n                context: context,\r\n                el: el,\r\n                itItemStr: itItemStr,\r\n                itItemObj: itObj[p],\r\n                renderFun: renderFun,\r\n            }, index++);\r\n            if (util_2.isArray(itemVNodes)) {\r\n                VNodes = VNodes.concat(itemVNodes);\r\n            }\r\n            else if (util_2.isObject(itemVNodes)) {\r\n                VNodes.push(itemVNodes);\r\n            }\r\n        }\r\n    }\r\n    // 数组迭代\r\n    else if (util_2.isArray(itObj)) {\r\n        for (var i = 0; i < itObj.length; i++) {\r\n            var itemVNodes = iteratorVFor.call(this, {\r\n                context: context,\r\n                el: el,\r\n                itItemStr: itItemStr,\r\n                itItemObj: itObj[i],\r\n                renderFun: renderFun,\r\n            }, i);\r\n            if (util_2.isArray(itemVNodes)) {\r\n                VNodes = VNodes.concat(itemVNodes);\r\n            }\r\n            else if (util_2.isObject(itemVNodes)) {\r\n                VNodes.push(itemVNodes);\r\n            }\r\n        }\r\n    }\r\n    // 比较删除componentsMap中没有的组件引用\r\n    var componentKeys = this.componentsMap.keys();\r\n    var _loop_1 = function () {\r\n        var currentKey = componentKeys.pop();\r\n        // componentKeys和VNode之间的插集\r\n        var has = VNodes.some(function (VNode) { return VNode.key === currentKey; });\r\n        if (!has) {\r\n            this_1.componentsMap.delete(currentKey);\r\n        }\r\n    };\r\n    var this_1 = this;\r\n    // 迭代进行删除\r\n    while (componentKeys.length) {\r\n        _loop_1();\r\n    }\r\n    return VNodes;\r\n}\r\nexports.parseVFor = parseVFor;\r\n/**\r\n * iteratorVFor - 对v-for进行迭代(一个的生成)\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement\r\n * @param itItemStr - Object 迭代项变量\r\n * @param itItemObj - Object | Array 迭代的变量\r\n * @param renderFun - Function 渲染函数\r\n * @param index - number v-for的索引\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction iteratorVFor(_a, index) {\r\n    var context = _a.context, el = _a.el, itItemStr = _a.itItemStr, itItemObj = _a.itItemObj, renderFun = _a.renderFun;\r\n    // 如果项的迭代对象是用()进行包裹的\r\n    if (itItemStr.startsWith('(') && itItemStr.endsWith(')')) {\r\n        // item   ,    index\r\n        itItemStr = itItemStr.substring(1, itItemStr.length - 1).trim();\r\n        if (itItemStr.indexOf(',') !== -1) {\r\n            var itItemArr = itItemStr.split(',').map(function (t) { return t.trim(); });\r\n            // 从context中获取迭代项数据\r\n            context[itItemArr[0].trim()] = itItemObj;\r\n            // 从context中获取迭代项的索引\r\n            context[itItemArr[1].trim()] = index;\r\n        }\r\n        else {\r\n            // 从context中获取迭代项数据\r\n            context[itItemStr] = itItemObj;\r\n        }\r\n    }\r\n    else {\r\n        // 从context中获取迭代项数据\r\n        context[itItemStr] = itItemObj;\r\n    }\r\n    // 所有属性的集合\r\n    var attrNames = el.getAttributeNames();\r\n    // 处理cloneEl的key 需要加入group的值\r\n    var groupName = el.getAttribute(constants_1.GROUP_KEY_NAME);\r\n    // 元素有key属性\r\n    // 如果元素有key属性则需要对key属性进行一个全局唯一标识的处理\r\n    // 处理的方式就是给key加上groupName的前缀\r\n    if (attrNames.indexOf(constants_1.DIRECT_PREFIX + \"bind:key\") !== -1) {\r\n        var key = constants_1.DIRECT_PREFIX + \"bind:key\";\r\n        var value = el.getAttribute(key);\r\n        // 给key加入groupName前缀使之全局唯一\r\n        el.setAttribute(key, \"'\" + groupName + \"' + '(\" + util_2.execExpression(context, value) + \")'\");\r\n    }\r\n    else if (attrNames.indexOf('key')) {\r\n        var key = 'key';\r\n        var value = el.getAttribute(key);\r\n        // 给key加入groupName前缀使之全局唯一\r\n        el.setAttribute(key, groupName + \"(\" + value + \")\");\r\n    }\r\n    else {\r\n        // 如果v-for没写key则用索引作为key\r\n        el.setAttribute('key', \"\" + groupName + index);\r\n    }\r\n    // 对v-for元素进行克隆\r\n    var cloneEl = el.cloneNode(true);\r\n    // 删除v-for属性\r\n    cloneEl.removeAttribute(constants_1.DIRECT_PREFIX + \"for\");\r\n    return renderFun.call(this, context, cloneEl);\r\n}\r\nexports.iteratorVFor = iteratorVFor;\r\n"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","iteratorVFor","parseVFor","hasVFor","uuid_1","require","util_1","regexp_1","constants_1","util_2","attrNames","hasVAttr","DIRECT_PREFIX","_a","context","el","vAttrNames","renderFun","groupName","getAttribute","GROUP_KEY_NAME","hasAttribute","setAttribute","attrName","find","n","indexOf","grammar","split","EMPTY_SPLIT","length","itItemStr","trim","itObjStr","VNodes","itObj","execExpression","isObject","p","index","itemVNodes","call","itItemObj","isArray","concat","push","i","componentKeys","componentsMap","keys","this_1","currentKey","pop","some","VNode","key","delete","_loop_1","startsWith","endsWith","substring","itItemArr","map","t","getAttributeNames","cloneEl","cloneNode","removeAttribute"],"mappings":"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"}