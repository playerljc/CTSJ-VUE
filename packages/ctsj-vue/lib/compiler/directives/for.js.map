{"version":3,"file":"for.js","sources":["compiler/directives/for.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.iteratorVFor = exports.parseVFor = exports.hasVFor = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar util_1 = require(\"./util\");\r\nvar regexp_1 = require(\"../../shared/regexp\");\r\nvar constants_1 = require(\"../../shared/constants\");\r\nvar util_2 = require(\"../../shared/util\");\r\nvar proxy_1 = require(\"../../core/proxy\");\r\nvar ITERATOR_CHAIN = [\r\n    {\r\n        condition: function (obj) { return vue_util_1.isObject(obj); },\r\n        handler: iteratorObj,\r\n    },\r\n    {\r\n        condition: function (obj) { return vue_util_1.isArray(obj); },\r\n        handler: iteratorArray,\r\n    },\r\n    {\r\n        condition: function (val) { return vue_util_1.isNumber(val); },\r\n        handler: iteratorNumber,\r\n    },\r\n];\r\n/**\r\n * <div ref=\"aaa\">\r\n *   <my-component ref=\"bbb\"></my-component>\r\n * </div>\r\n */\r\n/**\r\n * iteratorObj - 迭代对象\r\n * @param val - Object\r\n * @param context - Object\r\n * @param el - HtmlElement\r\n * @param parentVNode - VNode\r\n * @param itItemStr - string\r\n * @param renderFun - Function\r\n * @param VNodes\r\n * @return VNodes\r\n */\r\nfunction iteratorObj(_a) {\r\n    var val = _a.val, context = _a.context, el = _a.el, parentVNode = _a.parentVNode, itItemStr = _a.itItemStr, renderFun = _a.renderFun, VNodes = _a.VNodes;\r\n    var index = 0;\r\n    for (var p in val) {\r\n        if (proxy_1.isProxyProperty(p)) {\r\n            // iteratorVFor会创建一个VNode或VNodes\r\n            var itemVNodes = iteratorVFor.call(this, {\r\n                context: proxy_1.createContext(context),\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                itItemStr: itItemStr,\r\n                itItemObj: val[p],\r\n                renderFun: renderFun,\r\n            }, \r\n            // 如果是迭代对象则是属性名\r\n            p, \r\n            // 索引值\r\n            index);\r\n            if (vue_util_1.isArray(itemVNodes)) {\r\n                VNodes = VNodes.concat(itemVNodes);\r\n            }\r\n            else if (vue_util_1.isObject(itemVNodes)) {\r\n                VNodes.push(itemVNodes);\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n    return VNodes;\r\n}\r\n/**\r\n * iteratorArray - 迭代数组\r\n * @param val - Array\r\n * @param context - Object\r\n * @param el - HtmlElement\r\n * @param parentVNode - VNode\r\n * @param itItemStr - string\r\n * @param renderFun - Function\r\n * @param VNodes\r\n * @return VNodes\r\n */\r\nfunction iteratorArray(_a) {\r\n    var val = _a.val, context = _a.context, el = _a.el, parentVNode = _a.parentVNode, itItemStr = _a.itItemStr, renderFun = _a.renderFun, VNodes = _a.VNodes;\r\n    for (var i = 0; i < val.length; i++) {\r\n        var itemVNodes = iteratorVFor.call(this, {\r\n            context: proxy_1.createContext(context),\r\n            el: el,\r\n            parentVNode: parentVNode,\r\n            itItemStr: itItemStr,\r\n            itItemObj: val[i],\r\n            renderFun: renderFun,\r\n        }, null, \r\n        // 如果是迭代数组则是索引值\r\n        i);\r\n        if (vue_util_1.isArray(itemVNodes)) {\r\n            VNodes = VNodes.concat(itemVNodes);\r\n        }\r\n        else if (vue_util_1.isObject(itemVNodes)) {\r\n            VNodes.push(itemVNodes);\r\n        }\r\n    }\r\n    return VNodes;\r\n}\r\n/**\r\n * iteratorNumber - 迭代范围值\r\n * @param - val - number\r\n * @param context - Object\r\n * @param el - HtmlElement\r\n * @param parentVNode - VNode\r\n * @param itItemStr - string\r\n * @param renderFun - Function\r\n * @param VNodes\r\n * @return VNodes\r\n */\r\nfunction iteratorNumber(_a) {\r\n    var val = _a.val, context = _a.context, el = _a.el, parentVNode = _a.parentVNode, itItemStr = _a.itItemStr, renderFun = _a.renderFun, VNodes = _a.VNodes;\r\n    for (var i = 1; i <= val; i++) {\r\n        var itemVNodes = iteratorVFor.call(this, {\r\n            context: proxy_1.createContext(context),\r\n            el: el,\r\n            parentVNode: parentVNode,\r\n            itItemStr: itItemStr,\r\n            itItemObj: i,\r\n            renderFun: renderFun,\r\n        }, \r\n        // 如果是迭代对象则是属性名\r\n        null, \r\n        // 索引值\r\n        i);\r\n        if (vue_util_1.isArray(itemVNodes)) {\r\n            VNodes = VNodes.concat(itemVNodes);\r\n        }\r\n        else if (vue_util_1.isObject(itemVNodes)) {\r\n            VNodes.push(itemVNodes);\r\n        }\r\n    }\r\n    return VNodes;\r\n}\r\n/**\r\n * hasVFor - 是否有v-for属性\r\n * @param attrNames - Array 所有的指令属性集合\r\n * @return {boolean}\r\n */\r\nfunction hasVFor(attrNames) {\r\n    return util_1.hasVAttr(attrNames, constants_1.DIRECT_PREFIX + \"for\");\r\n}\r\nexports.hasVFor = hasVFor;\r\n/**\r\n * parseVFor - 解析v-for\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement 当前元素\r\n * @param parentVNode - VNode 父VNode节点\r\n * @param vAttrNames - Array 指令属性集合\r\n * @param renderFun - Function render函数\r\n * @return {Array<VNode>}\r\n */\r\nfunction parseVFor(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, vAttrNames = _a.vAttrNames, renderFun = _a.renderFun;\r\n    // 如果没有group属性则创建一个\r\n    // group属性使用来给v-for进行分组的\r\n    var groupName = el.getAttribute(constants_1.GROUP_KEY_NAME);\r\n    if (!el.hasAttribute(constants_1.GROUP_KEY_NAME) || !groupName) {\r\n        groupName = vue_util_1.uuid();\r\n        el.setAttribute(constants_1.GROUP_KEY_NAME, groupName);\r\n    }\r\n    var attrName = vAttrNames.find(function (n) { return n.indexOf(constants_1.DIRECT_PREFIX + \"for\") !== -1; });\r\n    //  <li v-for=\"item in items\"></li>\r\n    //  <li v-for=\"(item,index) in items\">\r\n    //    <div>{{item,index}}</div>\r\n    //  </li>\r\n    // (item,index) in items\r\n    // item in items\r\n    // (item) in items\r\n    // v-for=\"\"的值\r\n    var value = el.getAttribute(attrName);\r\n    // 把值进行分割获取表达式的部分\r\n    var grammar = value.split(regexp_1.EMPTY_SPLIT);\r\n    if (grammar.length !== 2)\r\n        return null;\r\n    // item 获取 (item,index)\r\n    var itItemStr = grammar[0].trim();\r\n    // data中的值\r\n    var itObjStr = grammar[1].trim();\r\n    var VNodes = [];\r\n    // 获取迭代的对象，分为对象迭代和数组迭代\r\n    var itObj = util_2.execExpression.call(this, context, itObjStr); // eval(`with(context){${itObjStr}}`); /* context[itObjStr] */\r\n    var index = 0;\r\n    while (index < ITERATOR_CHAIN.length) {\r\n        if (ITERATOR_CHAIN[index].condition(itObj)) {\r\n            VNodes = ITERATOR_CHAIN[index].handler.call(this, {\r\n                val: itObj,\r\n                context: context,\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                itItemStr: itItemStr,\r\n                renderFun: renderFun,\r\n                VNodes: VNodes,\r\n            });\r\n            break;\r\n        }\r\n        index++;\r\n    }\r\n    // 比较删除componentsMap中没有的组件引用\r\n    var componentKeys = this.componentsMap.keys();\r\n    var _loop_1 = function () {\r\n        var currentKey = componentKeys.pop();\r\n        // componentKeys和VNode之间的插集\r\n        var has = VNodes.some(function (VNode) { return VNode.key === currentKey; });\r\n        if (!has) {\r\n            this_1.componentsMap.delete(currentKey);\r\n        }\r\n    };\r\n    var this_1 = this;\r\n    // 迭代进行删除\r\n    while (componentKeys.length) {\r\n        _loop_1();\r\n    }\r\n    return VNodes;\r\n}\r\nexports.parseVFor = parseVFor;\r\n/**\r\n * iteratorVFor - 对v-for进行迭代(一个的生成)\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement\r\n * @param parentVNode - VNode 父VNode\r\n * @param itItemStr - Object 迭代项变量\r\n * @param itItemObj - Object | Array 迭代的变量\r\n * @param renderFun - Function 渲染函数\r\n * @param property - string 属性名\r\n * @param index - number v-for的索引\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction iteratorVFor(_a, property, index) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, itItemStr = _a.itItemStr, itItemObj = _a.itItemObj, renderFun = _a.renderFun;\r\n    // 如果项的迭代对象是用()进行包裹的\r\n    if (itItemStr.startsWith('(') && itItemStr.endsWith(')')) {\r\n        // item   ,    index\r\n        // 截取出()中的值\r\n        itItemStr = itItemStr.substring(1, itItemStr.length - 1).trim();\r\n        // 如果内容中包含','\r\n        if (itItemStr.indexOf(',') !== -1) {\r\n            var itItemArr = itItemStr.split(regexp_1.COMMA_SPLIT).map(function (t) { return t.trim(); });\r\n            // 从context中获取迭代项数据\r\n            context[itItemArr[0].trim()] = itItemObj;\r\n            // 如果是迭代对象则是属性名，否则是索引\r\n            context[itItemArr[1].trim()] = property || index;\r\n            // 是索引\r\n            if (itItemArr.length >= 3) {\r\n                context[itItemArr[2].trim()] = index;\r\n            }\r\n        }\r\n        else {\r\n            // 从context中获取迭代项数据\r\n            context[itItemStr] = itItemObj;\r\n        }\r\n    }\r\n    else {\r\n        // 从context中获取迭代项数据\r\n        context[itItemStr] = itItemObj;\r\n    }\r\n    // 所有属性的集合\r\n    var attrNames = el.getAttributeNames();\r\n    // 处理cloneEl的key 需要加入group的值\r\n    var groupName = el.getAttribute(constants_1.GROUP_KEY_NAME);\r\n    // 元素有key属性\r\n    // 如果元素有key属性则需要对key属性进行一个全局唯一标识的处理\r\n    // 处理的方式就是给key加上groupName的前缀\r\n    // if (attrNames.indexOf(`${DIRECT_PREFIX}bind:key`) !== -1) {\r\n    //   const key = `${DIRECT_PREFIX}bind:key`;\r\n    //   const value = el.getAttribute(key);\r\n    //   const expressVal = execExpression.call(this, context, value);\r\n    //   if (!this.componentsMap.has(expressVal)) {\r\n    //     // 给key加入groupName前缀使之全局唯一\r\n    //     el.setAttribute(key, `'${groupName}' + '(${expressVal})'`);\r\n    //   }\r\n    // } else if (attrNames.indexOf('key')) {\r\n    //   const key = 'key';\r\n    //   const value = el.getAttribute(key);\r\n    //   if (!this.componentsMap.has(value)) {\r\n    //     // 给key加入groupName前缀使之全局唯一\r\n    //     el.setAttribute(key, `${groupName}(${value})`);\r\n    //   }\r\n    // } else {\r\n    //   // 如果v-for没写key则用索引作为key\r\n    //   el.setAttribute('key', `${groupName}${index}`);\r\n    // }\r\n    // 对v-for元素进行克隆,克隆之后cloneEl会有groupName属性\r\n    var cloneEl = el.cloneNode(true);\r\n    if (attrNames.indexOf(constants_1.DIRECT_PREFIX + \"bind:key\") !== -1) {\r\n        var key = constants_1.DIRECT_PREFIX + \"bind:key\";\r\n        var value = cloneEl.getAttribute(key);\r\n        var expressVal = util_2.execExpression.call(this, context, value);\r\n        cloneEl.setAttribute(key, \"'\" + groupName + \"' + '(\" + expressVal + \")'\");\r\n    }\r\n    else if (attrNames.indexOf('key')) {\r\n        var key = 'key';\r\n        var value = cloneEl.getAttribute(key);\r\n        cloneEl.setAttribute(key, groupName + \"(\" + value + \")\");\r\n    }\r\n    else {\r\n        cloneEl.setAttribute('key', \"\" + groupName + index);\r\n    }\r\n    // 删除v-for属性\r\n    cloneEl.removeAttribute(constants_1.DIRECT_PREFIX + \"for\");\r\n    return renderFun.call(this, {\r\n        context: context,\r\n        el: cloneEl,\r\n        parentVNode: parentVNode,\r\n        parentElement: el.parentElement,\r\n    });\r\n}\r\nexports.iteratorVFor = iteratorVFor;\r\n"],"names":["Object","defineProperty","exports","value","iteratorVFor","parseVFor","hasVFor","vue_util_1","require","util_1","regexp_1","constants_1","util_2","proxy_1","ITERATOR_CHAIN","condition","obj","isObject","handler","iteratorObj","isArray","iteratorArray","val","isNumber","iteratorNumber","_a","p","itemVNodes","context","el","parentVNode","itItemStr","renderFun","VNodes","index","isProxyProperty","call","this","createContext","itItemObj","concat","push","i","length","attrNames","hasVAttr","DIRECT_PREFIX","vAttrNames","groupName","getAttribute","GROUP_KEY_NAME","hasAttribute","uuid","setAttribute","attrName","find","n","indexOf","grammar","split","EMPTY_SPLIT","trim","itObjStr","itObj","execExpression","componentKeys","componentsMap","keys","this_1","currentKey","pop","some","VNode","key","delete","_loop_1","property","startsWith","endsWith","substring","itItemArr","COMMA_SPLIT","map","t","getAttributeNames","cloneEl","cloneNode","expressVal","removeAttribute","parentElement"],"mappings":"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"}