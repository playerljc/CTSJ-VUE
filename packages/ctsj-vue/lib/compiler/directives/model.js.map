{"version":3,"file":"model.js","sources":["compiler/directives/model.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.filterChain = exports.isFormTag = exports.parseOption = exports.parseVModel = exports.getVModelEntrys = exports.hasVModel = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar util_1 = require(\"../../shared/util\");\r\nvar util_2 = require(\"./util\");\r\nvar constants_1 = require(\"../../shared/constants\");\r\n/**\r\n * hasVModel\r\n * @param attrNames\r\n * @return {*}\r\n */\r\nfunction hasVModel(attrNames) {\r\n    return util_2.hasVAttr(attrNames, constants_1.DIRECT_PREFIX + \"model\");\r\n}\r\nexports.hasVModel = hasVModel;\r\n/**\r\n * getInputType\r\n * @param context\r\n * @param el\r\n * @return String\r\n */\r\nfunction getInputType(context, el) {\r\n    return getInputProp.call(this, { context: context, el: el, propName: 'type' }) || 'text';\r\n}\r\n/**\r\n * getInputValue\r\n * @param context\r\n * @param el\r\n * @return String\r\n */\r\nfunction getInputValue(context, el) {\r\n    return getInputProp.call(this, { context: context, el: el, propName: 'value' });\r\n}\r\n/**\r\n * getInputProp\r\n * @param context\r\n * @param el\r\n * @param propName\r\n * @return {string|*}\r\n */\r\nfunction getInputProp(_a) {\r\n    var context = _a.context, el = _a.el, propName = _a.propName;\r\n    var attrNames = el.getAttributeNames();\r\n    if (attrNames.includes(propName)) {\r\n        return el.getAttribute(propName);\r\n    }\r\n    if (attrNames.includes(constants_1.DIRECT_PREFIX + \"bind:\" + propName)) {\r\n        var value = el.getAttribute(constants_1.DIRECT_PREFIX + \"bind:\" + propName);\r\n        return util_1.execExpression.call(this, context, value);\r\n    }\r\n    return '';\r\n}\r\n/**\r\n * hasProp - 是否存在指定的属性\r\n * @param el\r\n * @param prop\r\n * @return {boolean}\r\n */\r\nfunction hasProp(_a) {\r\n    var el = _a.el, prop = _a.prop;\r\n    var attrNames = el.getAttributeNames();\r\n    var exists = attrNames.includes(prop);\r\n    if (!exists) {\r\n        exists = attrNames.includes(constants_1.DIRECT_PREFIX + \"bind:\" + prop);\r\n    }\r\n    return exists;\r\n}\r\n/**\r\n * getVModelEntrys\r\n * @param el\r\n * @param vAttrNames\r\n * @return {{expression: *, arg: string, name: string, modifiers: {}|{}, value: string}|null}\r\n */\r\nfunction getVModelEntrys(_a) {\r\n    var el = _a.el, vAttrNames = _a.vAttrNames;\r\n    var attrs = vAttrNames.filter(function (n) { return n.indexOf(constants_1.DIRECT_PREFIX + \"model\") !== -1; });\r\n    if (!attrs.length)\r\n        return null;\r\n    // 取出最后一个attr\r\n    var attrName = attrs[attrs.length - 1];\r\n    // 获取v-model=\"xxx\" 的 xxx\r\n    return util_2.getDirectiveEntry(el, attrName);\r\n}\r\nexports.getVModelEntrys = getVModelEntrys;\r\n/**\r\n * parseVModel\r\n * @param context\r\n * @param el\r\n * @param vAttrNames\r\n * @param tagName\r\n * @param VNode\r\n * @return {*}\r\n */\r\nfunction parseVModel(_a) {\r\n    var context = _a.context, el = _a.el, vAttrNames = _a.vAttrNames, tagName = _a.tagName, VNode = _a.VNode;\r\n    var self = this;\r\n    // const attrs = vAttrNames.filter((n) => n.indexOf(`${DIRECT_PREFIX}model`) !== -1);\r\n    //\r\n    // if (!attrs.length) return null;\r\n    //\r\n    // // 取出最后一个attr\r\n    // const attrName = attrs[attrs.length - 1];\r\n    // 获取v-model=\"xxx\" 的 xxx\r\n    // const entry = getDirectiveEntry(el, attrName);\r\n    var entry = getVModelEntrys({ el: el, vAttrNames: vAttrNames });\r\n    if (!entry)\r\n        return null;\r\n    // v-model的值\r\n    var value = util_1.execExpression.call(this, context, entry.expression);\r\n    var inputType = getInputType.call(this, context, el);\r\n    var inputValue = getInputValue.call(this, context, el);\r\n    // 1.赋值\r\n    if (tagName === 'input') {\r\n        debugger;\r\n        // radio | checkbox\r\n        if (constants_1.FORM_CONTROL_CHECKED_TAG_NAMES.includes(inputType)) {\r\n            // value属性\r\n            if (inputValue) {\r\n                //  <input type=\"radio\" value=\"1\" v-model=\"sex\" />男\r\n                //  <input type=\"radio\" value=\"2\" v-model=\"sex\" />女\r\n                if (inputType === 'radio') {\r\n                    VNode.data.props.checked = value == inputValue;\r\n                }\r\n                // checkbox\r\n                //  <input type=\"checkbox\" value=\"1\" v-model=\"data\" />java\r\n                //  <input type=\"checkbox\" value=\"2\" v-model=\"data\" />c++\r\n                //  <input type=\"checkbox\" value=\"3\" v-model=\"data\" />javascript\r\n                else if (inputType === 'checkbox') {\r\n                    if (vue_util_1.isArray(value)) {\r\n                        VNode.data.props.checked = value.includes(inputValue);\r\n                    }\r\n                    else {\r\n                        VNode.data.props.checked = value == inputValue;\r\n                    }\r\n                }\r\n            }\r\n            // 没有value属性\r\n            else {\r\n                VNode.data.props.checked = value;\r\n            }\r\n        }\r\n        // text | number | ...\r\n        else {\r\n            VNode.data.props.value = value;\r\n        }\r\n    }\r\n    // textarea\r\n    else if (tagName === 'textarea') {\r\n        VNode.data.props.value = value;\r\n    }\r\n    // select\r\n    // else if (tagName === 'select') {\r\n    //   //  <select>\r\n    //   //    <option>java</option>\r\n    //   //    <option>c++</option>\r\n    //   //    <option>javascript</option>\r\n    //   //  </select>\r\n    //\r\n    //   // 获取select下所有的option\r\n    //   const optionEls = Array.from(el.querySelectorAll('option'));\r\n    //   optionEls.forEach((optionEl) => {\r\n    //     // 获取option的value value表示的是text或value\r\n    //     const val = optionEl.value.trim();\r\n    //\r\n    //     // model的值是数组\r\n    //     if (isArray(value)) {\r\n    //       if (value.includes(val)) {\r\n    //         optionEl.setAttribute('selected', 'selected');\r\n    //       }\r\n    //     }\r\n    //     // model的值不是数组\r\n    //     else if (val == value) {\r\n    //       optionEl.setAttribute('selected', 'selected');\r\n    //     }\r\n    //   });\r\n    // }\r\n    var lazy = entry.modifiers.lazy;\r\n    // 2.事件\r\n    // select标签\r\n    if (tagName === 'select') {\r\n        VNode.data.on.change = function (e) {\r\n            util_1.createExecutionContext.call(self, self, function () {\r\n                var selectedOptions = e.target.selectedOptions;\r\n                // entry.expression 现在是xx.xx.xxx模式，需要处理一下\r\n                // 多选的模式\r\n                if (hasProp({ el: el, prop: 'multiple' })) {\r\n                    // model的值是数组\r\n                    if (vue_util_1.isArray(value)) {\r\n                        vue_util_1.chainCallAssignment({\r\n                            obj: self.$dataProxy,\r\n                            chainStr: entry.expression,\r\n                            value: Array.from(selectedOptions).map(function (selectedOption) {\r\n                                return filterChain(selectedOption.value, entry);\r\n                            }),\r\n                        });\r\n                        // self.$dataProxy[entry.expression] = Array.from(selectedOptions).map((selectedOption) =>\r\n                        //   filterChain(selectedOption.value, entry),\r\n                        // );\r\n                    }\r\n                    // 不是数组不处理\r\n                }\r\n                // 非多选的模式\r\n                else {\r\n                    // 不是数组才处理\r\n                    if (!vue_util_1.isArray(value)) {\r\n                        vue_util_1.chainCallAssignment({\r\n                            obj: self.$dataProxy,\r\n                            chainStr: entry.expression,\r\n                            value: filterChain(selectedOptions[0].value, entry),\r\n                        });\r\n                        // self.$dataProxy[entry.expression] = filterChain(selectedOptions[0].value, entry);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n    }\r\n    // input标签\r\n    else if (tagName === 'input') {\r\n        // radio | checkbox\r\n        if (constants_1.FORM_CONTROL_CHECKED_TAG_NAMES.includes(inputType)) {\r\n            // 有value属性\r\n            if (inputValue) {\r\n                //  <input type=\"radio\" value=\"1\" v-model=\"sex\" />男\r\n                //  <input type=\"radio\" value=\"2\" v-model=\"sex\" />女\r\n                if (inputType === 'radio') {\r\n                    VNode.data.on.change = function (e) {\r\n                        util_1.createExecutionContext.call(self, self, function () {\r\n                            vue_util_1.chainCallAssignment({\r\n                                obj: self.$dataProxy,\r\n                                chainStr: entry.expression,\r\n                                value: e.target.checked ? inputValue : '',\r\n                            });\r\n                            // self.$dataProxy[entry.expression] = e.target.checked ? inputValue : '';\r\n                        });\r\n                    };\r\n                }\r\n                //  <input type=\"checkbox\" value=\"1\" v-model=\"data\" />java\r\n                //  <input type=\"checkbox\" value=\"2\" v-model=\"data\" />c++\r\n                //  <input type=\"checkbox\" value=\"3\" v-model=\"data\" />javascript\r\n                else if (inputType === 'checkbox') {\r\n                    if (vue_util_1.isArray(value)) {\r\n                        VNode.data.on.change = function (e) {\r\n                            util_1.createExecutionContext.call(self, self, function () {\r\n                                var target = vue_util_1.getObjectByChainStr({\r\n                                    obj: self.$dataProxy,\r\n                                    chainStr: entry.expression,\r\n                                });\r\n                                if (e.target.checked) {\r\n                                    target.push(inputValue);\r\n                                    // self.$dataProxy[entry.expression].push(inputValue);\r\n                                }\r\n                                else {\r\n                                    var deleteIndex = target.indexOf(inputValue);\r\n                                    if (deleteIndex !== -1) {\r\n                                        target.splice(deleteIndex, 1);\r\n                                    }\r\n                                    // const deleteIndex = self.$dataProxy[entry.expression].indexOf(inputValue);\r\n                                    // if (deleteIndex !== -1) {\r\n                                    //   self.$dataProxy[entry.expression].splice(deleteIndex, 1);\r\n                                    // }\r\n                                }\r\n                            });\r\n                        };\r\n                    }\r\n                    // 不是数组\r\n                    else {\r\n                        VNode.data.on.change = function (e) {\r\n                            util_1.createExecutionContext.call(self, self, function () {\r\n                                vue_util_1.chainCallAssignment({\r\n                                    obj: self.$dataProxy,\r\n                                    chainStr: entry.expression,\r\n                                    value: e.target.checked ? inputValue : '',\r\n                                });\r\n                                // self.$dataProxy[entry.expression] = e.target.checked ? inputValue : '';\r\n                            });\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            // 没有value属性\r\n            else {\r\n                VNode.data.on.change = function (e) {\r\n                    util_1.createExecutionContext.call(self, self, function () {\r\n                        vue_util_1.chainCallAssignment({\r\n                            obj: self.$dataProxy,\r\n                            chainStr: entry.expression,\r\n                            value: e.target.checked,\r\n                        });\r\n                        // self.$dataProxy[entry.expression] = e.target.checked;\r\n                    });\r\n                };\r\n            }\r\n        }\r\n        // text | number ... lazy\r\n        else if (lazy) {\r\n            VNode.data.on.change = function (e) {\r\n                util_1.createExecutionContext.call(self, self, function () {\r\n                    vue_util_1.chainCallAssignment({\r\n                        obj: self.$dataProxy,\r\n                        chainStr: entry.expression,\r\n                        value: filterChain(e.target.value, entry),\r\n                    });\r\n                    // self.$dataProxy[entry.expression] = filterChain(e.target.value, entry);\r\n                });\r\n            };\r\n        }\r\n        // text | number ... 没有lazy\r\n        else {\r\n            VNode.data.on.input = function (e) {\r\n                util_1.createExecutionContext.call(self, self, function () {\r\n                    vue_util_1.chainCallAssignment({\r\n                        obj: self.$dataProxy,\r\n                        chainStr: entry.expression,\r\n                        value: filterChain(e.target.value, entry),\r\n                    });\r\n                    // self.$dataProxy[entry.expression] = filterChain(e.target.value, entry);\r\n                });\r\n            };\r\n        }\r\n    }\r\n    // textarea标签 lazy\r\n    else if (lazy) {\r\n        VNode.data.on.change = function (e) {\r\n            util_1.createExecutionContext.call(self, self, function () {\r\n                vue_util_1.chainCallAssignment({\r\n                    obj: self.$dataProxy,\r\n                    chainStr: entry.expression,\r\n                    value: filterChain(e.target.value, entry),\r\n                });\r\n                // self.$dataProxy[entry.expression] = filterChain(e.target.value, entry);\r\n            });\r\n        };\r\n    }\r\n    // textarea标签 没有lazy\r\n    else {\r\n        VNode.data.on.input = function (e) {\r\n            util_1.createExecutionContext.call(self, self, function () {\r\n                vue_util_1.chainCallAssignment({\r\n                    obj: self.$dataProxy,\r\n                    chainStr: entry.expression,\r\n                    value: filterChain(e.target.value, entry),\r\n                });\r\n                // self.$dataProxy[entry.expression] = filterChain(e.target.value, entry);\r\n            });\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nexports.parseVModel = parseVModel;\r\n/**\r\n * parseOption - 解析option 主要是赋值\r\n * @param context\r\n * @param VNode\r\n * @param parentElement\r\n */\r\nfunction parseOption(_a) {\r\n    var context = _a.context, VNode = _a.VNode, parentElement = _a.parentElement;\r\n    // v-model的值\r\n    var value = util_1.execExpression.call(this, context, parentElement.getAttribute(constants_1.DIRECT_PREFIX + \"model\"));\r\n    // 获取option的value value表示的是text或value\r\n    var val = VNode.data.props.value;\r\n    // model的值是数组\r\n    if (vue_util_1.isArray(value)) {\r\n        if (value.includes(val)) {\r\n            VNode.data.props.selected = 'selected';\r\n        }\r\n    }\r\n    // model的值不是数组\r\n    else if (val == value) {\r\n        VNode.data.props.selected = 'selected';\r\n    }\r\n}\r\nexports.parseOption = parseOption;\r\n/**\r\n * isFormTag\r\n * @param tagName\r\n * @return {boolean}\r\n */\r\nfunction isFormTag(tagName) {\r\n    return constants_1.FORM_CONTROL_BINDING_TAG_NAMES.includes(tagName);\r\n}\r\nexports.isFormTag = isFormTag;\r\n/**\r\n * filterChain\r\n * @param value\r\n * @param directiveEntry\r\n */\r\nfunction filterChain(value, directiveEntry) {\r\n    var result = value;\r\n    var chains = [\r\n        {\r\n            condition: directiveEntry.modifiers.trim,\r\n            handler: function (val) {\r\n                return val.trim();\r\n            },\r\n        },\r\n        {\r\n            condition: directiveEntry.modifiers.number,\r\n            handler: function (val) {\r\n                return Number(val);\r\n            },\r\n        },\r\n    ];\r\n    chains.forEach(function (_a) {\r\n        var condition = _a.condition, handler = _a.handler;\r\n        if (condition) {\r\n            result = handler(result);\r\n        }\r\n    });\r\n    return result;\r\n}\r\nexports.filterChain = filterChain;\r\n"],"names":["Object","defineProperty","exports","value","filterChain","isFormTag","parseOption","parseVModel","getVModelEntrys","hasVModel","vue_util_1","require","util_1","util_2","constants_1","attrNames","hasVAttr","DIRECT_PREFIX","getInputType","context","el","getInputProp","call","this","propName","getInputValue","_a","getAttributeNames","includes","getAttribute","execExpression","hasProp","prop","attrs","vAttrNames","filter","n","indexOf","length","attrName","getDirectiveEntry","tagName","VNode","self","entry","expression","inputType","inputValue","FORM_CONTROL_CHECKED_TAG_NAMES","data","props","checked","isArray","lazy","modifiers","on","change","e","createExecutionContext","selectedOptions","target","chainCallAssignment","obj","$dataProxy","chainStr","Array","from","map","selectedOption","deleteIndex","getObjectByChainStr","push","splice","input","parentElement","val","selected","FORM_CONTROL_BINDING_TAG_NAMES","directiveEntry","result","condition","trim","handler","number","Number","forEach"],"mappings":"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"}