{"version":3,"file":"else.js","sources":["compiler/directives/else.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.parseVElse = exports.hasVElse = void 0;\r\nvar util_1 = require(\"./util\");\r\nvar constants_1 = require(\"../../shared/constants\");\r\nvar util_2 = require(\"../../shared/util\");\r\n/**\r\n * hasVElse - 是否有v-else属性\r\n * @param attrNames - Array 所有的指令属性集合\r\n * @return {boolean}\r\n */\r\nfunction hasVElse(attrNames) {\r\n    return util_1.hasVAttr(attrNames, constants_1.DIRECT_PREFIX + \"else\");\r\n}\r\nexports.hasVElse = hasVElse;\r\n/**\r\n * parseVElse\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement 当前元素\r\n * @param parentElement = HtmlElement 父元素\r\n * @return {\r\n *   valid : boolean 链路是否有效\r\n *   result: boolean else的值\r\n * }\r\n */\r\nfunction parseVElse(_a) {\r\n    var context = _a.context, el = _a.el, parentElement = _a.parentElement;\r\n    // 说明el是v-for的一个克隆元素\r\n    if (!parentElement) {\r\n        // 寻找el元素的克隆元素\r\n        var groupName = el.getAttribute(constants_1.GROUP_KEY_NAME);\r\n        // 获取含有GROUP_KEY_NAME属性且值等于groupName的元素\r\n        var srcEl = this.templateEl.querySelector(\"[\" + constants_1.GROUP_KEY_NAME + \"=\" + groupName + \"]\");\r\n        if (srcEl) {\r\n            parentElement = srcEl.parentElement;\r\n        }\r\n    }\r\n    if (!parentElement) {\r\n        return {\r\n            valid: false,\r\n            result: false,\r\n        };\r\n    }\r\n    // 获取parentElement中的所有childNodes\r\n    var childNodes;\r\n    if (parentElement.nodeName.toLowerCase() === 'template') {\r\n        childNodes = parentElement.content.childNodes;\r\n    }\r\n    else {\r\n        childNodes = parentElement.childNodes;\r\n    }\r\n    // 获取el在childNodes中的位置\r\n    var elIndex = -1;\r\n    for (var i = 0, len = childNodes.length; i < len; i++) {\r\n        var childNode = childNodes.item(i);\r\n        if (childNode === el) {\r\n            elIndex = i;\r\n            break;\r\n        }\r\n    }\r\n    if (elIndex === -1) {\r\n        return {\r\n            valid: false,\r\n            result: false,\r\n        };\r\n    }\r\n    // 获取elIndex之前第一个v-if的位置\r\n    var firstIfIndex = -1;\r\n    for (var i = elIndex - 1; i >= 0; i--) {\r\n        var childNode = childNodes[i];\r\n        // 如果是元素 && 有v-if属性\r\n        if (util_2.isElementNode(childNode) && util_1.hasVAttr(util_1.getVAttrNames(childNode), constants_1.DIRECT_PREFIX + \"if\")) {\r\n            firstIfIndex = i;\r\n            break;\r\n        }\r\n    }\r\n    if (firstIfIndex === -1) {\r\n        return {\r\n            valid: false,\r\n            result: false,\r\n        };\r\n    }\r\n    // v-if和v-else之前只能包含文本节点或者v-else-if\r\n    var valid = true;\r\n    var values = [];\r\n    for (var i = firstIfIndex + 1; i <= elIndex - 1; i++) {\r\n        var childNode = childNodes[i];\r\n        // 如果是文本节点\r\n        if (util_2.isTextNode(childNode)) {\r\n            // 如果文本节点不是''\r\n            if (childNode.nodeValue.trim() !== '') {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            var hasVElseIf = util_1.hasVAttr(util_1.getVAttrNames(childNode), constants_1.DIRECT_PREFIX + \"else-if\");\r\n            // 如果不是v-else-if\r\n            if (!hasVElseIf) {\r\n                valid = false;\r\n                break;\r\n            }\r\n            // 如果是v-else-if\r\n            else {\r\n                values.push(util_2.execExpression.call(this, context, childNode.getAttribute(constants_1.DIRECT_PREFIX + \"else-if\")));\r\n            }\r\n        }\r\n    }\r\n    if (valid) {\r\n        // 计算v-if的值\r\n        var ifNode = childNodes[firstIfIndex];\r\n        values.push(util_2.execExpression.call(this, context, ifNode.getAttribute(constants_1.DIRECT_PREFIX + \"if\")));\r\n    }\r\n    return {\r\n        valid: valid,\r\n        result: valid ? !values.some(function (value) { return value; }) : false,\r\n    };\r\n}\r\nexports.parseVElse = parseVElse;\r\n"],"names":["Object","defineProperty","exports","value","parseVElse","hasVElse","util_1","require","constants_1","util_2","attrNames","hasVAttr","DIRECT_PREFIX","_a","childNodes","context","el","parentElement","groupName","getAttribute","GROUP_KEY_NAME","srcEl","this","templateEl","querySelector","valid","result","elIndex","i","len","nodeName","toLowerCase","content","length","childNode","item","firstIfIndex","isElementNode","getVAttrNames","values","isTextNode","nodeValue","trim","push","execExpression","call","ifNode","some"],"mappings":"aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,OAAO,IACtDD,QAAQE,WAAaF,QAAQG,cAAW,EACxC,IAAIC,OAASC,QAAQ,UACjBC,YAAcD,QAAQ,0BACtBE,OAASF,QAAQ,qBAMrB,SAASF,SAASK,GACd,OAAOJ,OAAOK,SAASD,EAAWF,YAAYI,cAAgB,QAalE,SAASR,WAAWS,GAChB,IAkBIC,EAlBAC,EAAUF,EAAGE,QAASC,EAAKH,EAAGG,GAAIC,EAAgBJ,EAAGI,cAWzD,GATKA,IAEGC,EAAYF,EAAGG,aAAaX,YAAYY,iBAExCC,EAAQC,KAAKC,WAAWC,cAAc,IAAMhB,YAAYY,eAAiB,IAAMF,EAAY,QAE3FD,EAAgBI,EAAMJ,iBAGzBA,EACD,MAAO,CACHQ,OAAO,EACPC,QAAQ,GAahB,IADA,IAAIC,GAAW,EACNC,EAAI,EAAGC,GAPZf,GADyC,aAAzCG,EAAca,SAASC,cACVd,EAAce,QAGdf,GAHsBH,YAONmB,OAAQL,EAAIC,EAAKD,IAE9C,IADIM,EAAYpB,EAAWqB,KAAKP,MACdZ,EAAI,CAClBW,EAAUC,EACV,MAGR,IAAiB,IAAbD,EACA,MAAO,CACHF,OAAO,EACPC,QAAQ,GAKhB,IADA,IAAIU,GAAgB,EACXR,EAAID,EAAU,EAAQ,GAALC,EAAQA,IAAK,CACnC,IAAIM,EAAYpB,EAAWc,GAE3B,GAAInB,OAAO4B,cAAcH,IAAc5B,OAAOK,SAASL,OAAOgC,cAAcJ,GAAY1B,YAAYI,cAAgB,MAAO,CACvHwB,EAAeR,EACf,OAGR,IAAsB,IAAlBQ,EACA,MAAO,CACHX,OAAO,EACPC,QAAQ,GAMhB,IAFA,IAAID,GAAQ,EACRc,EAAS,GACJX,EAAIQ,EAAe,EAAGR,GAAKD,EAAU,EAAGC,IAAK,CAC9CM,EAAYpB,EAAWc,GAE3B,GAAInB,OAAO+B,WAAWN,IAElB,GAAmC,KAA/BA,EAAUO,UAAUC,OAAe,CACnCjB,GAAQ,EACR,WAGH,CAGD,IAFiBnB,OAAOK,SAASL,OAAOgC,cAAcJ,GAAY1B,YAAYI,cAAgB,WAE7E,CACba,GAAQ,EACR,MAIAc,EAAOI,KAAKlC,OAAOmC,eAAeC,KAAKvB,KAAMP,EAASmB,EAAUf,aAAaX,YAAYI,cAAgB,cASrH,OALIa,IAEIqB,EAAShC,EAAWsB,GACxBG,EAAOI,KAAKlC,OAAOmC,eAAeC,KAAKvB,KAAMP,EAAS+B,EAAO3B,aAAaX,YAAYI,cAAgB,SAEnG,CACHa,MAAOA,EACPC,SAAQD,IAASc,EAAOQ,KAAK,SAAU5C,GAAS,OAAOA,KArG/DD,QAAQG,SAAWA,SAwGnBH,QAAQE,WAAaA"}