{"version":3,"file":"render.js","sources":["compiler/render.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderComponentNode = exports.renderDynamicComponentNode = exports.renderSlotNode = exports.renderTemplateNode = exports.renderElementNode = exports.renderTextNode = exports.renderLoop = exports.renderComponent = exports.render = void 0;\r\n// render\r\nvar util_1 = require(\"../core/util\");\r\nvar util_2 = require(\"../shared/util\");\r\nvar util_3 = require(\"../core/component/util\");\r\nvar proxy_1 = require(\"../core/proxy\");\r\nvar util_4 = require(\"./directives/util\");\r\nvar html_1 = require(\"./directives/html\");\r\nvar if_1 = require(\"./directives/if\");\r\nvar on_1 = require(\"./directives/on\");\r\nvar bind_1 = require(\"./directives/bind\");\r\nvar show_1 = require(\"./directives/show\");\r\nvar for_1 = require(\"./directives/for\");\r\nvar model_1 = require(\"./directives/model\");\r\nvar vdom_1 = require(\"../core/vdom\");\r\nvar uuid_1 = __importDefault(require(\"../shared/uuid\"));\r\nvar constants_1 = require(\"../shared/constants\");\r\n/**\r\n * render - Vue实例的渲染\r\n * @param el - HtmlElement\r\n * @param isMount - boolean 是否是挂载阶段\r\n */\r\nfunction render(el, isMount) {\r\n    console.log('render');\r\n    var self = this;\r\n    // 进行loopRender\r\n    // vue实例代表的vnode\r\n    var vnode = renderLoop.call(this, this.$dataProxy, this.templateEl);\r\n    // vnode的hook设置\r\n    vnode.data.hook = {\r\n        /**\r\n         * 一个vnode已添加\r\n         * @param vnode\r\n         */\r\n        init: function (vnode) {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[1]);\r\n        },\r\n        /**\r\n         * 已基于vnode创建了一个DOM元素\r\n         * @param emptyVnode\r\n         * @param vnode\r\n         */\r\n        create: function (emptyVnode, vnode) {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[2]);\r\n        },\r\n        /**\r\n         * insert - 元素已插入DOM\r\n         * @param vnode\r\n         */\r\n        insert: function (vnode) {\r\n            // ------ mount\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[3]);\r\n        },\r\n        /**\r\n         * 元素即将被修补\r\n         */\r\n        prepatch: function () {\r\n            // beforeUpdate\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[4]);\r\n        },\r\n        /**\r\n         * 元素已被修补\r\n         */\r\n        postpatch: function () {\r\n            // update\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[5]);\r\n        },\r\n        /**\r\n         * 一个元素被直接或间接删除\r\n         */\r\n        destroy: function () {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[7]);\r\n        },\r\n    };\r\n    if (isMount) {\r\n        // 需要赋值$preVNode\r\n        this.$preVNode = vnode;\r\n        this.$preVNode = vdom_1.patch(el, vnode);\r\n    }\r\n    else {\r\n        this.$preVNode = vdom_1.patch(this.$preVNode, vnode);\r\n    }\r\n}\r\nexports.render = render;\r\n/**\r\n * renderComponent - 组件实例的渲染\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponent() {\r\n    var self = this;\r\n    // 组件实例代表的vnode\r\n    var vnode = renderLoop.call(this, this.$dataProxy, this.templateEl);\r\n    // vnode的hook设置\r\n    vnode.data.hook = {\r\n        /**\r\n         * 一个vnode已添加\r\n         * @param vnode\r\n         */\r\n        init: function (vnode) {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[1]);\r\n        },\r\n        /**\r\n         * 已基于vnode创建了一个DOM元素\r\n         * @param emptyVnode\r\n         * @param vnode\r\n         */\r\n        create: function (emptyVnode, vnode) {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[2]);\r\n        },\r\n        /**\r\n         * insert - 元素已插入DOM\r\n         * @param vnode\r\n         */\r\n        insert: function (vnode) {\r\n            // ------ mount\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[3]);\r\n        },\r\n        /**\r\n         * 元素即将被修补\r\n         */\r\n        prepatch: function () {\r\n            // beforeUpdate\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[4]);\r\n        },\r\n        /**\r\n         * 元素已被修补\r\n         */\r\n        postpatch: function () {\r\n            // update\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[5]);\r\n        },\r\n        /**\r\n         * 一个元素被直接或间接删除\r\n         */\r\n        destroy: function () {\r\n            util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[7]);\r\n        },\r\n    };\r\n    return vnode;\r\n}\r\nexports.renderComponent = renderComponent;\r\n/**\r\n * renderLoop - 进行递归的渲染\r\n * @param context - 上下文对象\r\n * @param el - HtmlElement 当前节点的el\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderLoop(context, el) {\r\n    // 文本节点\r\n    if (util_2.isTextNode(el)) {\r\n        // 文本节点的渲染\r\n        return renderTextNode.call(this, context, el);\r\n    }\r\n    var isComponent = false;\r\n    var isVueIns = util_1.isVueInstance(this);\r\n    // this是否是vue实例\r\n    if (isVueIns) {\r\n        // 在vue实例下判断是否是组件节点\r\n        isComponent = util_3.isComponentNodeByVue(el);\r\n    }\r\n    else {\r\n        var isComponentIns = util_3.isComponentInstance(this);\r\n        // this是否是component实例\r\n        if (isComponentIns) {\r\n            // 在component实例下判断是否是组件节点\r\n            isComponent = util_3.isComponentNodeByComponent(el, this.getComponentsConfig());\r\n        }\r\n        // this既不是vue实例也不是component实例\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!isComponent) {\r\n        // 如果是template元素\r\n        if (util_2.isTemplateNode(el)) {\r\n            return renderTemplateNode.call(this, context, el);\r\n        }\r\n        // 如果是slot元素 vue实例没有slot元素\r\n        if (!isVueIns && util_2.isSlotNode(el)) {\r\n            return renderSlotNode.call(this, context, el);\r\n        }\r\n        // 如果是component元素\r\n        if (util_2.isDynamicComponentNode(el)) {\r\n            return renderDynamicComponentNode.call(this, context, el);\r\n        }\r\n        if (util_2.isElementNode(el)) {\r\n            // 是元素不是组件节点\r\n            return renderElementNode.call(this, context, el);\r\n        }\r\n    }\r\n    else {\r\n        // 自定义节点(Component)\r\n        // 例如：\r\n        // <div v-bind:id=\"id1\">\r\n        //  <div v-bind:id=\"id2\">\r\n        //    <my-component v-bind:id=\"id\" name=\"name\" v-show=\"flag\" v-if=\"display\" v-on=\"\"></my-component>\r\n        //  </div>\r\n        // </div>\r\n        return renderComponentNode.call(this, context, el);\r\n    }\r\n    return null;\r\n}\r\nexports.renderLoop = renderLoop;\r\n/**\r\n * renderTextNode - 渲染文本节点\r\n * @param context - 上下文对象\r\n * @param el - HtmlElement\r\n * @return {TextVNode}\r\n */\r\nfunction renderTextNode(context, el) {\r\n    // 表达式\r\n    var expression = el.textContent.trim();\r\n    var index = 0;\r\n    var value = '';\r\n    while (index < expression.length) {\r\n        var startIndex = expression.indexOf(constants_1.START_TAG, index);\r\n        if (startIndex !== -1) {\r\n            var endIndex = expression.indexOf(constants_1.END_TAG, startIndex + constants_1.START_TAG.length);\r\n            if (endIndex !== -1) {\r\n                var dfs = expression.substring(startIndex + constants_1.START_TAG.length, endIndex);\r\n                value += expression.substring(index, startIndex) + util_2.execExpression.call(this, context, dfs);\r\n                index = endIndex + constants_1.END_TAG.length;\r\n            }\r\n            else {\r\n                value += expression.substring(index);\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            value += expression.charAt(index++);\r\n        }\r\n    }\r\n    return vdom_1.createTextVNode(value);\r\n}\r\nexports.renderTextNode = renderTextNode;\r\n/**\r\n * renderVAttr - 解析指令属性\r\n * @param el - HtmlElement 元素的el\r\n * @param context - Object 上下文对象\r\n * @param renderFun - Function 渲染函数\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderVAttr(_a) {\r\n    /**\r\n     * for(item in items)   (new)context -> item\r\n     *  for(item1 in items)        context -> item1\r\n     *   for(item11 in items)       context -> item11\r\n     *    for(item111 in itmes)       context -> item111\r\n     *   for(item21 in items)       context -> item21\r\n     *  for(item2 in itmes)        context -> item2\r\n     *  for(item3 in itmes)        context -> item3\r\n     * for(item in items)   (new)context -> item\r\n     */\r\n    var el = _a.el, context = _a.context, renderFun = _a.renderFun;\r\n    var self = this;\r\n    // 获取所有指令属性\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (!vAttrNames.length) {\r\n        return {\r\n            Continue: true,\r\n            VNode: null,\r\n        };\r\n    }\r\n    // 解析el的v-for标签\r\n    if (for_1.hasVFor(vAttrNames)) {\r\n        // parse v-for\r\n        return {\r\n            Continue: false,\r\n            VNode: for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context === this.$dataProxy ? proxy_1.createContext(this.$dataProxy) : context,\r\n                el: el,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderFun,\r\n            }),\r\n        };\r\n    }\r\n    // 解析v-if\r\n    if (if_1.hasVIf(vAttrNames)) {\r\n        // parse v-if\r\n        var display = if_1.parseVIf({ context: context, el: el, vAttrNames: vAttrNames });\r\n        // 如果不显示则返回null\r\n        if (!display) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n    }\r\n    // 获取标签名称\r\n    var tagName = el.tagName.toLowerCase();\r\n    // createVNode\r\n    var VNode = vdom_1.createVNode(tagName);\r\n    // 解析v-show\r\n    if (show_1.hasVShow(vAttrNames)) {\r\n        // parse v-show\r\n        show_1.parseVShow({ context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-bind\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        // parse v-bind\r\n        bind_1.parseVBind({ context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-model\r\n    // 只有input | textarea | select才进行解析\r\n    if (constants_1.FORM_CONTROL_BINDING_TAG_NAMES.includes(tagName) && model_1.hasVModel(vAttrNames)) {\r\n        model_1.parseVModel.call(self, {\r\n            context: context,\r\n            tagName: tagName,\r\n            vProps: VNode.data.props,\r\n            el: el,\r\n            vAttrNames: vAttrNames,\r\n            VNode: VNode,\r\n        });\r\n    }\r\n    // 解析v-for\r\n    if (on_1.hasVOn(vAttrNames)) {\r\n        // parse v-on\r\n        on_1.parseVOn.call(self, { context: context, el: el, tagName: tagName, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-html\r\n    // 非表单标签的时候 && 是否是表单控件元素\r\n    if (!model_1.isFormTag(tagName) && html_1.hasVHtml(vAttrNames)) {\r\n        // parse v-html\r\n        html_1.parseVHtml({ context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n        // v-html在最后解析，因为v-html的children就是一个文本节点，不需要在进行children的loop\r\n        // return VNode;\r\n    }\r\n    return {\r\n        Continue: true,\r\n        VNode: VNode,\r\n    };\r\n}\r\n/**\r\n * renderAttr - 渲染非指令属性\r\n * @param el - HtmlElement 元素的el\r\n * @param VNode - VNode\r\n */\r\nfunction renderAttr(_a) {\r\n    var el = _a.el, VNode = _a.VNode;\r\n    var attrNames = util_4.getAttrNames(el);\r\n    if (attrNames.length) {\r\n        attrNames.forEach(function (attrName) {\r\n            var val = el.getAttribute(attrName);\r\n            if (attrName === 'key') {\r\n                VNode.key = val;\r\n            }\r\n            else if (attrName.startsWith('data-')) {\r\n                VNode.data.dataset[util_2.toCamelCase(attrName.substring('data-'.length))] = val;\r\n            }\r\n            else {\r\n                VNode.data.attrs[attrName] = val;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * renderElementNode - 渲染元素节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderElementNode(context, el) {\r\n    // 合并多个文本节点为一个文本节点\r\n    el.normalize();\r\n    // 解析指令属性\r\n    var _a = renderVAttr.call(this, { el: el, context: context, renderFun: renderElementNode }), Continue = _a.Continue, VNode = _a.VNode;\r\n    if (!Continue)\r\n        return VNode;\r\n    // 如果没有VNode，创建一个\r\n    if (!VNode) {\r\n        VNode = vdom_1.createVNode(el.tagName.toLowerCase());\r\n    }\r\n    // 解析非指令属性\r\n    renderAttr.call(this, { el: el, VNode: VNode });\r\n    // loop children\r\n    for (var i = 0, len = el.childNodes.length; i < len; i++) {\r\n        var VNodes = renderLoop.call(this, context, el.childNodes[i]);\r\n        if (!VNodes)\r\n            continue;\r\n        // v-for返回的\r\n        if (util_2.isArray(VNodes)) {\r\n            VNodes.filter(function (n) { return n; }).forEach(function (n) {\r\n                VNode.children.push(n);\r\n            });\r\n        }\r\n        else if (util_2.isObject(VNodes)) {\r\n            VNode.children.push(VNodes);\r\n        }\r\n    }\r\n    return VNode;\r\n}\r\nexports.renderElementNode = renderElementNode;\r\n/**\r\n * renderTemplateNode - 渲染template元素\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n *\r\n * 1.<template></template> -> 什么都没有\r\n * 2.<template v-if=\"xxx\"></template> -> 有v-if\r\n * 3.<template v-for=\"item in list|obj\"></template> -> 有v-for\r\n * 4.<template v-slot:default></template> -> 有v-slot\r\n */\r\nfunction renderTemplateNode(context, el) {\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context === this.$dataProxy ? proxy_1.createContext(this.$dataProxy) : context,\r\n                el: el,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderTemplateNode,\r\n            });\r\n        }\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf({ context: context, el: el, vAttrNames: vAttrNames });\r\n            // 如果不显示则返回null\r\n            if (!display) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // loop template的children\r\n    var result = [];\r\n    for (var i = 0, len = el.content.childNodes.length; i < len; i++) {\r\n        var VNodes = renderLoop.call(this, context, el.content.childNodes[i]);\r\n        if (!VNodes)\r\n            continue;\r\n        // v-for返回的\r\n        if (util_2.isArray(VNodes)) {\r\n            result = result.concat(VNodes);\r\n        }\r\n        else if (util_2.isObject(VNodes)) {\r\n            result.push(VNodes);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.renderTemplateNode = renderTemplateNode;\r\n/**\r\n * renderSlotNode - 渲染slot元素\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @return VNode | VNodes\r\n *\r\n * --------------------下面是列举的一个例子---------------------\r\n *\r\n * wrap - 比如vue实例的模板\r\n * 元素如果是这样定义的\r\n * 1. 第一种情况 default用<template v-slot:default></template>表示的\r\n * <my-component>\r\n *   <template v-slot:head></template>\r\n *   <template v-slot:footer></template>\r\n *   <template v-slot:default>\r\n *     <div>{{name}}</div>\r\n *     <div>{{sex}}</div>\r\n *     <my-component-inner></my-component-inner>\r\n *   </template>\r\n * </my-component>\r\n *\r\n * 2. 第二种情况 default没用template表示\r\n * <li v-for=\"item in list\">\r\n *   <my-component>\r\n *      <div>{{item.name}}</div>\r\n *      <div>{{item.sex}}</div>\r\n *      <template v-slot:head></template>\r\n *      <template v-slot:footer></template>\r\n *      <my-component-inner></my-component-inner>\r\n *   </my-component>\r\n * </li>\r\n *\r\n * inner - 比如my-component的template模板\r\n * 比如VNode的结构是 my-component的template的内容\r\n * 1.没有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <slot></slot>\r\n *   <slot name=\"head\"></slot>\r\n *   <slot name=\"footer\"></slot>\r\n *   <template></template>\r\n * </div>\r\n *\r\n * 2.有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <ul>\r\n *    <li v-for=\"(item,index in list)\">\r\n *      {{item.name}}\r\n *      <slot></slot>\r\n *    </li>\r\n *   </ul>\r\n * </div>\r\n */\r\nfunction renderSlotNode(context, el) {\r\n    // this是my-component的实例\r\n    // this.$parent是Vue实例或者是Component实例，应该用this.getParentContext()获取父亲的上下文对象作为调用renderTemplateNode的上下文参数\r\n    // el<slot></slot>的el this.$el是$parent的template中<my-component></my-component>这个el\r\n    var name = 'default';\r\n    var contextType = 'parent';\r\n    // 判断slot中是否存在name属性\r\n    if (el.hasAttribute('name')) {\r\n        // slot有name属性\r\n        name = el.getAttribute('name');\r\n    }\r\n    var bindEntrys;\r\n    // el可能会有多个v-bind,如果有则是作用域插槽\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        bindEntrys = bind_1.getVBindEntrys({ context: context, el: el, vAttrNames: vAttrNames });\r\n    }\r\n    // 在父亲中寻找指定的<template v-slot:name></template>元素\r\n    var templateEls = Array.from(this.$el.getElementsByTagName('template'));\r\n    var slotTemplateElIndex = templateEls.findIndex(function (templateEl) {\r\n        return templateEl\r\n            .getAttributeNames()\r\n            .some(function (attrName) { return attrName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\" + name); });\r\n    });\r\n    var slotTemplateEl = null;\r\n    if (slotTemplateElIndex !== -1) {\r\n        slotTemplateEl = templateEls[slotTemplateElIndex];\r\n    }\r\n    // 如果没有找到<template v-slot:name></template>的元素\r\n    if (!slotTemplateEl) {\r\n        // 如果是default 没有定义<template v-slot:default></template> 则需要自己创建一个template元素\r\n        slotTemplateEl = document.createElement('template');\r\n        slotTemplateEl.setAttribute(constants_1.DIRECT_PREFIX + \"slot:\" + name, '');\r\n        // 如果是default\r\n        if (name === 'default') {\r\n            // 需要在this.$el的childrenNodes排除<template v-slot开头的元素放入自定义template元素中\r\n            Array.from(this.$el.childNodes)\r\n                .filter(function (node) {\r\n                if (util_2.isElementNode(node) && node.tagName.toLowerCase() === 'template') {\r\n                    return !node\r\n                        .getAttributeNames()\r\n                        .some(function (attrName) { return attrName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\"); });\r\n                }\r\n                return true;\r\n            })\r\n                .forEach(function (node) {\r\n                slotTemplateEl.content.appendChild(node);\r\n            });\r\n        }\r\n        // 如果没有对应的template对应则使用slot的内部内容作为内容\r\n        else {\r\n            contextType = 'self';\r\n            Array.from(el.childNodes).forEach(function (node) {\r\n                slotTemplateEl.content.appendChild(node);\r\n            });\r\n        }\r\n    }\r\n    var curContext;\r\n    if (contextType === 'parent') {\r\n        // 此处需要对parentContext进行克隆\r\n        curContext = proxy_1.createContext(this.getParentContext());\r\n        // 判断<template v-slot:名字=\"\"></template>是否有v-slot:名字=\"\"\r\n        var slotTemplateAttrValue_1 = slotTemplateEl.getAttribute(constants_1.DIRECT_PREFIX + \"slot:\" + name);\r\n        // 如果有v-slot:名字=\"\"说明是作用域插槽\r\n        if (bindEntrys && bindEntrys.length && slotTemplateAttrValue_1) {\r\n            // 向parentContext中创建bindEntrys的作用域\r\n            curContext[slotTemplateAttrValue_1] = {};\r\n            bindEntrys.forEach(function (bindEntry) {\r\n                curContext[slotTemplateAttrValue_1][bindEntry.arg] = bindEntry.value;\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        curContext = context;\r\n    }\r\n    // 调用renderTemplateNode方法进行渲染\r\n    return renderTemplateNode.call(this.$parent, curContext, slotTemplateEl);\r\n}\r\nexports.renderSlotNode = renderSlotNode;\r\n/**\r\n * renderDynamicComponent - 渲染动态组件节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @return VNode | VNodes\r\n *\r\n * 如果<component></component>含有v-for和v-if则不用处理key\r\n *\r\n */\r\nfunction renderDynamicComponentNode(context, el) {\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    var key;\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context === this.$dataProxy ? proxy_1.createContext(this.$dataProxy) : context,\r\n                el: el,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderDynamicComponentNode,\r\n            });\r\n        }\r\n        // 这个key属性可能是v-bind:key=，也可能是key=\r\n        key = util_4.getKey({ context: context, el: el });\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf({ context: context, el: el, vAttrNames: vAttrNames });\r\n            if (!display) {\r\n                // 不显示这个节点\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    key = util_4.getKey({ context: context, el: el });\r\n    // 获取is属性的值\r\n    // is属性的值就是组件的标签的名称\r\n    var componentTagName = util_4.getAttribute({ context: context, attrName: 'is', el: el });\r\n    // 如果没有is属性\r\n    if (!componentTagName)\r\n        return null;\r\n    // 判断componentTagName是否注册过\r\n    var isComponent = false;\r\n    var componentEl = document.createElement(componentTagName);\r\n    var isVueIns = util_1.isVueInstance(this);\r\n    // this是否是vue实例\r\n    if (isVueIns) {\r\n        // 在vue实例下判断是否是组件节点\r\n        isComponent = util_3.isComponentNodeByVue(componentEl);\r\n    }\r\n    else {\r\n        var isComponentIns = util_3.isComponentInstance(this);\r\n        // this是否是component实例\r\n        if (isComponentIns) {\r\n            // 在component实例下判断是否是组件节点\r\n            isComponent = util_3.isComponentNodeByComponent(componentEl, this.getComponentsConfig());\r\n        }\r\n        // this既不是vue实例也不是component实例\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    // 如果is的值不是组件(没有注册过)\r\n    if (!isComponent)\r\n        return null;\r\n    // 获取到组件名称之后调用renderComponentNode方法\r\n    // 赋值component标签所有的属性给componentEl除了is属性\r\n    var isAttrName = util_4.getAttributeName({ attrName: 'is', el: el });\r\n    el.getAttributeNames()\r\n        .filter(function (attrName) {\r\n        return attrName !== isAttrName &&\r\n            !attrName.startsWith(constants_1.DIRECT_PREFIX + \"bind:key\") &&\r\n            attrName !== 'key';\r\n    })\r\n        .forEach(function (attrName) { return componentEl.setAttribute(attrName, el.getAttribute(attrName)); });\r\n    // el没有key属性\r\n    if (util_2.isEmpty(key)) {\r\n        key = uuid_1.default();\r\n        el.setAttribute('key', key);\r\n        this.componentsMap.set(key, { componentName: componentTagName, key: uuid_1.default() });\r\n    }\r\n    var entry = this.componentsMap.get(key);\r\n    if (util_2.isEmpty(entry)) {\r\n        this.componentsMap.set(key, { componentName: componentTagName, key: uuid_1.default() });\r\n    }\r\n    else {\r\n        // 如果切换了componentName则需要进行删除和重新生成key的操作\r\n        if (entry.componentName !== componentTagName) {\r\n            this.componentsMap.delete(entry.key);\r\n            entry.componentName = componentTagName;\r\n            entry.key = uuid_1.default();\r\n        }\r\n    }\r\n    entry = this.componentsMap.get(key);\r\n    componentEl.setAttribute('key', entry.key);\r\n    return renderComponentNode.call(this, context, componentEl);\r\n    // 主要是需要create一个组件元素节点，这个节点的key属性的值需要斟酌一下\r\n    // key属性的值应该是component的key属性值从componentMap中进行获取，一般这个集合获取的值是组件的实例对象\r\n    // 而对于component节点来说，值是一个对象{componentName:'组件标签名称',key:'组件的key'}\r\n}\r\nexports.renderDynamicComponentNode = renderDynamicComponentNode;\r\n/**\r\n * renderComponentNode - 渲染组件节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponentNode(context, el) {\r\n    // 合并多个文本节点为一个文本节点\r\n    el.normalize();\r\n    // <my-component v-bind:id=\"id\" v-if=\"\" v-show=\"\" v-on:aaa=\"person + 1\" v-on:bbb=\"display()\" v-for=\"\">\r\n    //  <div>\r\n    //    <div></div>\r\n    //    <div></div>\r\n    //  </div>\r\n    // </my-component>\r\n    // 只解析my-component标签的指令属性和非指令属性\r\n    // 解析指令属性\r\n    // 解析非指令属性\r\n    // 解析指令属性\r\n    // 1.v-for\r\n    // 2.v-if\r\n    // 3.v-show 修改组件第一层的样式属性\r\n    // 4.v-bind 一般都是组件的props\r\n    // 5.v-model v-bind:value v-on:input 可以通过组件属性进行修改\r\n    // 6.v-on 自定义事件 组件需要进行存储\r\n    // 解析非指令属性\r\n    // VNode赋值attr\r\n    var self = this;\r\n    // 获取指令属性\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    // 解析v-for\r\n    if (for_1.hasVFor(vAttrNames)) {\r\n        // parse v-for\r\n        return for_1.parseVFor.call(this, {\r\n            context: context === this.$dataProxy ? proxy_1.createContext(this.$dataProxy) : context,\r\n            el: el,\r\n            vAttrNames: vAttrNames,\r\n            renderFun: renderComponentNode,\r\n        });\r\n    }\r\n    // 获取el元素key属性的值\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    var key = util_4.getKey({ context: context, el: el });\r\n    // 解析v-if\r\n    if (if_1.hasVIf(vAttrNames)) {\r\n        // parse v-if\r\n        var display = if_1.parseVIf({ context: context, el: el, vAttrNames: vAttrNames });\r\n        if (!display) {\r\n            // 不显示这个节点\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    // 所有的v-bind计算\r\n    // 所有非指令属性的计算\r\n    // ------这些都是component的props\r\n    // v-model v-bind:value v-on:input 可以通过组件属性进行修改-\r\n    // className style 都直接赋值到VNode属性上，不需要添加到props中\r\n    // v-on都需要传递\r\n    // attrs和events是需要传递给Component组件的参数\r\n    var attrs = {};\r\n    var events = {};\r\n    // 解析v-bind\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        // parse v-bind 都是属性\r\n        var entrys = bind_1.getVBindEntrys({ context: context, el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, value = _a.value;\r\n            attrs[arg] = value;\r\n        });\r\n    }\r\n    // 非指令属性 都是属性\r\n    var attrEntrys = util_4.getAttrEntrys(el);\r\n    attrEntrys.forEach(function (_a) {\r\n        var name = _a.name, value = _a.value;\r\n        attrs[name] = value;\r\n    });\r\n    // v-model\r\n    // v-bind:value v-on:input\r\n    if (model_1.hasVModel(vAttrNames)) {\r\n        var entry = model_1.getVModelEntrys({ el: el, vAttrNames: vAttrNames });\r\n        // 这个地方需要获取组件的配置对象，看是否配置了model选项\r\n        attrs.value = util_2.execExpression(context, entry.expression);\r\n    }\r\n    // 解析v-on\r\n    if (on_1.hasVOn(vAttrNames)) {\r\n        // parse v-on\r\n        var entrys = on_1.getVOnEntrys.call(self, { el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, expression = _a.expression;\r\n            events[arg] = expression;\r\n        });\r\n    }\r\n    // <com1 key=1/>\r\n    // <com1 key=1 />\r\n    // <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    //  <com1 key=1 />\r\n    //  <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    if (util_2.isEmpty(key)) {\r\n        // el没有key属性\r\n        // 创建一个key属性并设置到el中\r\n        key = uuid_1.default();\r\n        el.setAttribute('key', key);\r\n    }\r\n    // 根据key获取组件实例\r\n    var component = self.componentsMap.get(key);\r\n    // 没有创建组件\r\n    if (!component) {\r\n        // 用key创建组件\r\n        component = util_3.createComponent({\r\n            attrs: attrs,\r\n            events: events,\r\n            parentContext: context,\r\n            parent: self,\r\n            top: util_1.isVueInstance(self) ? self : self.$top,\r\n            el: el,\r\n            key: key,\r\n        });\r\n        self.componentsMap.set(key, component);\r\n        // 调用组件的render方法返回VNode\r\n        return component.render();\r\n    }\r\n    // 不是第一次而是更新\r\n    component.setParams({ attrs: attrs, events: events, parentContext: context });\r\n    // 调用组件的update方法返回VNode\r\n    return component.update();\r\n}\r\nexports.renderComponentNode = renderComponentNode;\r\n"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","renderComponentNode","renderDynamicComponentNode","renderSlotNode","renderTemplateNode","renderElementNode","renderTextNode","renderLoop","renderComponent","render","util_1","require","util_2","util_3","proxy_1","util_4","html_1","if_1","on_1","bind_1","show_1","for_1","model_1","vdom_1","uuid_1","constants_1","el","isMount","console","log","self","vnode","call","$dataProxy","templateEl","data","hook","init","triggerLifecycle","LIFECYCLE_HOOKS","create","emptyVnode","insert","prepatch","postpatch","destroy","$preVNode","patch","context","isTextNode","isComponent","isVueIns","isVueInstance","isComponentNodeByVue","isComponentInstance","isComponentNodeByComponent","getComponentsConfig","isTemplateNode","isSlotNode","isDynamicComponentNode","isElementNode","expression","textContent","trim","index","length","startIndex","indexOf","START_TAG","endIndex","END_TAG","substring","dfs","execExpression","charAt","createTextVNode","renderVAttr","_a","renderFun","vAttrNames","getVAttrNames","Continue","VNode","hasVFor","parseVFor","createContext","hasVIf","parseVIf","tagName","toLowerCase","createVNode","hasVShow","parseVShow","hasVBind","parseVBind","FORM_CONTROL_BINDING_TAG_NAMES","includes","hasVModel","parseVModel","vProps","props","hasVOn","parseVOn","isFormTag","hasVHtml","parseVHtml","renderAttr","attrNames","getAttrNames","forEach","attrName","val","getAttribute","key","startsWith","dataset","toCamelCase","attrs","normalize","i","len","childNodes","VNodes","isArray","filter","n","children","push","isObject","result","content","concat","bindEntrys","name","contextType","hasAttribute","getVBindEntrys","curContext","slotTemplateAttrValue_1","templateEls","Array","from","$el","getElementsByTagName","slotTemplateElIndex","findIndex","getAttributeNames","some","DIRECT_PREFIX","slotTemplateEl","document","createElement","setAttribute","node","appendChild","getParentContext","bindEntry","arg","$parent","getKey","componentsMap","delete","componentTagName","componentEl","isAttrName","getAttributeName","isEmpty","set","componentName","entry","get","events","getAttrEntrys","getVModelEntrys","getVOnEntrys","component","setParams","parentContext","update","createComponent","parent","top","$top"],"mappings":"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"}