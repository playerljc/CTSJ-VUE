{"version":3,"file":"render.js","sources":["compiler/render.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderComponentNode = exports.renderDynamicComponentNode = exports.renderSlotNode = exports.renderTemplateNode = exports.renderElementNode = exports.renderTextNode = exports.renderLoop = exports.renderComponent = exports.render = void 0;\r\n// render\r\nvar util_1 = require(\"../core/util\");\r\nvar util_2 = require(\"../shared/util\");\r\nvar util_3 = require(\"../core/component/util\");\r\nvar proxy_1 = require(\"../core/proxy\");\r\nvar util_4 = require(\"./directives/util\");\r\nvar html_1 = require(\"./directives/html\");\r\nvar if_1 = require(\"./directives/if\");\r\nvar else_1 = require(\"./directives/else\");\r\nvar else_if_1 = require(\"./directives/else-if\");\r\nvar on_1 = require(\"./directives/on\");\r\nvar bind_1 = require(\"./directives/bind\");\r\nvar show_1 = require(\"./directives/show\");\r\nvar for_1 = require(\"./directives/for\");\r\nvar model_1 = require(\"./directives/model\");\r\nvar vdom_1 = require(\"../core/vdom\");\r\nvar uuid_1 = __importDefault(require(\"../shared/uuid\"));\r\nvar constants_1 = require(\"../shared/constants\");\r\n/**\r\n * render - Vue实例的渲染\r\n * @param el - HtmlElement\r\n * @param isMount - boolean 是否是挂载阶段\r\n */\r\nfunction render(el, isMount) {\r\n    var self = this;\r\n    // 进行loopRender\r\n    // vue实例代表的vnode\r\n    var startTime = new Date().getTime();\r\n    var vnode = renderLoop.call(this, {\r\n        context: {},\r\n        el: this.templateEl,\r\n        parentVNode: null,\r\n        parentElement: null,\r\n    });\r\n    var endTime = new Date().getTime();\r\n    util_2.log(\"render\\u6240\\u7528\\u65F6\\u95F4\" + (endTime - startTime) / 1000 + \"m\");\r\n    if (!vnode)\r\n        return false;\r\n    // vnode的hook设置\r\n    Object.assign(vnode.data.hook, {\r\n        /**\r\n         * 一个vnode已添加\r\n         * @param vnode\r\n         */\r\n        init: function (curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[1]);\r\n            }\r\n        },\r\n        /**\r\n         * 已基于vnode创建了一个DOM元素\r\n         * @param emptyVnode\r\n         * @param vnode\r\n         */\r\n        create: function (emptyVnode, curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[2]);\r\n            }\r\n        },\r\n        // /**\r\n        //  * insert - 元素已插入DOM\r\n        //  * @param vnode\r\n        //  */\r\n        // insert: (vnode) => {\r\n        //   // ------ mount\r\n        //   log(33333333333);\r\n        //   triggerLifecycle.call(self, LIFECYCLE_HOOKS[3]);\r\n        // },\r\n        /**\r\n         * 元素即将被修补\r\n         */\r\n        prepatch: function (oldVNode, newVNode) {\r\n            if (newVNode === vnode) {\r\n                // beforeUpdate\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[4]);\r\n            }\r\n        },\r\n        /**\r\n         * 元素已被修补\r\n         */\r\n        postpatch: function (oldVNode, newVNode) {\r\n            if (newVNode === vnode) {\r\n                // update\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[5]);\r\n            }\r\n        },\r\n        /**\r\n         * 一个元素被直接或间接删除\r\n         */\r\n        destroy: function (curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[7]);\r\n            }\r\n        },\r\n    });\r\n    if (isMount) {\r\n        // 需要赋值$preVNode\r\n        // this.$preVNode = vnode;\r\n        this.$preVNode = vdom_1.patch(el, vnode);\r\n        // ------ mount\r\n        util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[3]);\r\n    }\r\n    else {\r\n        if (!this.$preVNode) {\r\n            this.$preVNode = vnode;\r\n        }\r\n        var startTime_1 = new Date().getTime();\r\n        this.$preVNode = vdom_1.patch(this.$preVNode, vnode);\r\n        var endTime_1 = new Date().getTime();\r\n        util_2.log(\"patch\\u6240\\u7528\\u65F6\\u95F4\" + (endTime_1 - startTime_1) / 1000 + \"m\");\r\n    }\r\n    return true;\r\n}\r\nexports.render = render;\r\n/**\r\n * renderComponent - 组件实例的渲染\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponent() {\r\n    var self = this;\r\n    // 组件实例代表的vnode\r\n    var vnode = renderLoop.call(this, {\r\n        context: {},\r\n        el: this.templateEl,\r\n        parentVNode: null,\r\n        parentElement: null,\r\n    });\r\n    if (!vnode)\r\n        return null;\r\n    // vnode的hook设置\r\n    Object.assign(vnode.data.hook, {\r\n        /**\r\n         * 一个vnode已添加\r\n         * @param vnode\r\n         */\r\n        init: function (curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[1]);\r\n            }\r\n        },\r\n        /**\r\n         * 已基于vnode创建了一个DOM元素\r\n         * @param emptyVnode\r\n         * @param vnode\r\n         */\r\n        create: function (emptyVnode, curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[2]);\r\n            }\r\n        },\r\n        /**\r\n         * insert - 元素已插入DOM\r\n         * @param vnode\r\n         */\r\n        insert: function (curVNode) {\r\n            if (curVNode === vnode) {\r\n                // ------ mount\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[3]);\r\n            }\r\n        },\r\n        /**\r\n         * 元素即将被修补\r\n         */\r\n        prepatch: function (oldVNode, newVNode) {\r\n            if (newVNode === vnode) {\r\n                // beforeUpdate\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[4]);\r\n            }\r\n        },\r\n        /**\r\n         * 元素已被修补\r\n         */\r\n        postpatch: function (oldVNode, newVNode) {\r\n            if (newVNode === vnode) {\r\n                // update\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[5]);\r\n            }\r\n        },\r\n        /**\r\n         * 一个元素被直接或间接删除\r\n         */\r\n        destroy: function (curVNode) {\r\n            if (curVNode === vnode) {\r\n                util_1.triggerLifecycle.call(self, constants_1.LIFECYCLE_HOOKS[7]);\r\n            }\r\n        },\r\n    });\r\n    return vnode;\r\n}\r\nexports.renderComponent = renderComponent;\r\n/**\r\n * renderLoop - 进行递归的渲染\r\n * @param context - 上下文对象\r\n * @param el - HtmlElement 当前节点的el\r\n * @param parentVNode - VNode 父节点VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderLoop(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    // 文本节点\r\n    if (util_2.isTextNode(el)) {\r\n        // 文本节点的渲染\r\n        return renderTextNode.call(this, { context: context, el: el });\r\n    }\r\n    var isComponent = false;\r\n    var isVueIns = util_1.isVueInstance(this);\r\n    // this是否是vue实例\r\n    if (isVueIns) {\r\n        // 在vue实例下判断是否是组件节点\r\n        isComponent = util_3.isComponentNodeByVue(el);\r\n    }\r\n    else {\r\n        var isComponentIns = util_3.isComponentInstance(this);\r\n        // this是否是component实例\r\n        if (isComponentIns) {\r\n            // 在component实例下判断是否是组件节点\r\n            isComponent = util_3.isComponentNodeByComponent(el, this.$getComponentsConfig());\r\n        }\r\n        // this既不是vue实例也不是component实例\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!isComponent) {\r\n        // 如果是template元素\r\n        if (util_2.isTemplateNode(el)) {\r\n            return renderTemplateNode.call(this, { context: context, el: el, parentVNode: parentVNode, parentElement: parentElement });\r\n        }\r\n        // 如果是slot元素 vue实例没有slot元素\r\n        if (!isVueIns && util_2.isSlotNode(el)) {\r\n            return renderSlotNode.call(this, { context: context, el: el, parentVNode: parentVNode, parentElement: parentElement });\r\n        }\r\n        // 如果是component元素\r\n        if (util_2.isDynamicComponentNode(el)) {\r\n            return renderDynamicComponentNode.call(this, { context: context, el: el, parentVNode: parentVNode, parentElement: parentElement });\r\n        }\r\n        if (util_2.isElementNode(el)) {\r\n            // 是元素不是组件节点\r\n            return renderElementNode.call(this, { context: context, el: el, parentVNode: parentVNode, parentElement: parentElement });\r\n        }\r\n    }\r\n    else {\r\n        // 自定义节点(Component)\r\n        // 例如：\r\n        // <div v-bind:id=\"id1\">\r\n        //  <div v-bind:id=\"id2\">\r\n        //    <my-component v-bind:id=\"id\" name=\"name\" v-show=\"flag\" v-if=\"display\" v-on=\"\"></my-component>\r\n        //  </div>\r\n        // </div>\r\n        return renderComponentNode.call(this, { context: context, el: el, parentVNode: parentVNode, parentElement: parentElement });\r\n    }\r\n    return null;\r\n}\r\nexports.renderLoop = renderLoop;\r\n/**\r\n * renderTextNode - 渲染文本节点\r\n * @param context - 上下文对象\r\n * @param el - HtmlElement\r\n * @return {TextVNode}\r\n */\r\nfunction renderTextNode(_a) {\r\n    var context = _a.context, el = _a.el;\r\n    // 表达式\r\n    var expression = el.textContent.trim();\r\n    var index = 0;\r\n    var value = '';\r\n    while (index < expression.length) {\r\n        var startIndex = expression.indexOf(constants_1.START_TAG, index);\r\n        if (startIndex !== -1) {\r\n            var endIndex = expression.indexOf(constants_1.END_TAG, startIndex + constants_1.START_TAG.length);\r\n            if (endIndex !== -1) {\r\n                var dfs = expression.substring(startIndex + constants_1.START_TAG.length, endIndex);\r\n                value += expression.substring(index, startIndex) + util_2.execExpression.call(this, context, dfs);\r\n                index = endIndex + constants_1.END_TAG.length;\r\n            }\r\n            else {\r\n                value += expression.substring(index);\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            value += expression.charAt(index++);\r\n        }\r\n    }\r\n    return vdom_1.createTextVNode(value);\r\n}\r\nexports.renderTextNode = renderTextNode;\r\n/**\r\n * renderVAttr - 解析指令属性\r\n * @param el - HtmlElement 元素的el\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @param context - Object 上下文对象\r\n * @param renderFun - Function 渲染函数\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderVAttr(_a) {\r\n    /**\r\n     * for(item in items)   (new)context -> item\r\n     *  for(item1 in items)        context -> item1\r\n     *   for(item11 in items)       context -> item11\r\n     *    for(item111 in itmes)       context -> item111\r\n     *   for(item21 in items)       context -> item21\r\n     *  for(item2 in itmes)        context -> item2\r\n     *  for(item3 in itmes)        context -> item3\r\n     * for(item in items)   (new)context -> item\r\n     */\r\n    var el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement, context = _a.context, renderFun = _a.renderFun;\r\n    var self = this;\r\n    // 获取所有指令属性\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (!vAttrNames.length) {\r\n        return {\r\n            Continue: true,\r\n            VNode: null,\r\n        };\r\n    }\r\n    // 解析el的v-for标签\r\n    if (for_1.hasVFor(vAttrNames)) {\r\n        // parse v-for\r\n        return {\r\n            Continue: false,\r\n            // 如果没有父元素是不能使用v-for的所以返回null\r\n            VNode: parentVNode\r\n                ? for_1.parseVFor.call(this, \r\n                // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n                {\r\n                    context: context,\r\n                    // context === this.$dataProxy ? createContext.call(self, this.$dataProxy) : context,\r\n                    el: el,\r\n                    parentVNode: parentVNode,\r\n                    vAttrNames: vAttrNames,\r\n                    renderFun: renderFun,\r\n                })\r\n                : null,\r\n        };\r\n    }\r\n    // 解析v-if\r\n    if (if_1.hasVIf(vAttrNames)) {\r\n        // parse v-if\r\n        var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n        // 如果不显示则返回null\r\n        if (!display) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n    }\r\n    if (else_1.hasVElse(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n        if (!entry.result) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n    }\r\n    // 解析v-else-if\r\n    if (else_if_1.hasVElseIf(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n        if (!entry.result) {\r\n            return {\r\n                Continue: false,\r\n                VNode: null,\r\n            };\r\n        }\r\n    }\r\n    // 获取标签名称\r\n    var tagName = el.tagName.toLowerCase();\r\n    // createVNode\r\n    var VNode = vdom_1.createVNode(tagName);\r\n    // 解析v-show\r\n    if (show_1.hasVShow(vAttrNames)) {\r\n        // parse v-show\r\n        show_1.parseVShow.call(this, { context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-bind\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        // parse v-bind\r\n        bind_1.parseVBind.call(this, { context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-model\r\n    // 只有input | textarea | select才进行解析\r\n    if (constants_1.FORM_CONTROL_BINDING_TAG_NAMES.includes(tagName) && model_1.hasVModel(vAttrNames)) {\r\n        model_1.parseVModel.call(self, {\r\n            context: context,\r\n            tagName: tagName,\r\n            vProps: VNode.data.props,\r\n            el: el,\r\n            vAttrNames: vAttrNames,\r\n            VNode: VNode,\r\n        });\r\n    }\r\n    // 解析v-for\r\n    if (on_1.hasVOn(vAttrNames)) {\r\n        // parse v-on\r\n        on_1.parseVOn.call(self, { context: context, el: el, tagName: tagName, vAttrNames: vAttrNames, VNode: VNode });\r\n    }\r\n    // 解析v-html\r\n    // 非表单标签的时候 && 是否是表单控件元素\r\n    if (!model_1.isFormTag(tagName) && html_1.hasVHtml(vAttrNames)) {\r\n        // parse v-html\r\n        html_1.parseVHtml.call(this, { context: context, el: el, vAttrNames: vAttrNames, VNode: VNode });\r\n        // v-html在最后解析，因为v-html的children就是一个文本节点，不需要在进行children的loop\r\n        // return VNode;\r\n    }\r\n    return {\r\n        Continue: true,\r\n        VNode: VNode,\r\n    };\r\n}\r\n/**\r\n * renderAttr - 渲染非指令属性\r\n * @param el - HtmlElement 元素的el\r\n * @param VNode - VNode\r\n */\r\nfunction renderAttr(_a) {\r\n    var el = _a.el, VNode = _a.VNode;\r\n    var self = this;\r\n    var attrNames = util_4.getAttrNames(el);\r\n    if (attrNames.length) {\r\n        attrNames.forEach(function (attrName) {\r\n            var val = el.getAttribute(attrName);\r\n            // key属性\r\n            if (attrName === 'key') {\r\n                VNode.key = val;\r\n            }\r\n            // ref属性\r\n            else if (attrName === 'ref') {\r\n                // ref属性不放入到VNode中\r\n                // 创建当前VNode的hook\r\n                Object.assign(VNode.data.hook, {\r\n                    /**\r\n                     * insert - 元素已插入DOM\r\n                     * @param vnode\r\n                     */\r\n                    insert: function (vnode) {\r\n                        // 保存HtmlElement的el到$refs中\r\n                        self.$refs[val] = vnode.elm;\r\n                    },\r\n                });\r\n            }\r\n            // style属性\r\n            else if (attrName === 'style') {\r\n                VNode.data.style[attrName] = val;\r\n            }\r\n            // class属性\r\n            else if (attrName === 'class') {\r\n                VNode.data.class[val] = true;\r\n            }\r\n            // data-*属性\r\n            else if (attrName.startsWith('data-')) {\r\n                VNode.data.dataset[util_2.toCamelCase(attrName.substring('data-'.length))] = val;\r\n            }\r\n            // 其他的属性\r\n            else {\r\n                VNode.data.attrs[attrName] = val;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * renderElementNode - 渲染元素节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return {VNode | Array<VNode>}\r\n */\r\nfunction renderElementNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    // 合并多个文本节点为一个文本节点\r\n    el.normalize();\r\n    // 解析指令属性\r\n    var _b = renderVAttr.call(this, {\r\n        el: el,\r\n        parentVNode: parentVNode,\r\n        parentElement: parentElement,\r\n        context: context,\r\n        renderFun: renderElementNode,\r\n    }), Continue = _b.Continue, VNode = _b.VNode;\r\n    if (!Continue)\r\n        return VNode;\r\n    // 如果没有VNode，创建一个\r\n    if (!VNode) {\r\n        VNode = vdom_1.createVNode(el.tagName.toLowerCase());\r\n    }\r\n    // 解析非指令属性\r\n    renderAttr.call(this, { el: el, VNode: VNode });\r\n    // 处理一下option这种情况\r\n    if (el.tagName.toLowerCase() === 'option' && parentVNode && parentElement) {\r\n        model_1.parseOption.call(this, { context: context, VNode: VNode, parentElement: parentElement });\r\n    }\r\n    // loop children\r\n    for (var i = 0, len = el.childNodes.length; i < len; i++) {\r\n        var VNodes = renderLoop.call(this, {\r\n            context: context,\r\n            el: el.childNodes[i],\r\n            parentVNode: VNode,\r\n            parentElement: el,\r\n        });\r\n        if (!VNodes)\r\n            continue;\r\n        // v-for返回的\r\n        if (util_2.isArray(VNodes)) {\r\n            VNodes.filter(function (n) { return n; }).forEach(function (n) {\r\n                VNode.children.push(n);\r\n            });\r\n        }\r\n        else if (util_2.isObject(VNodes)) {\r\n            VNode.children.push(VNodes);\r\n        }\r\n    }\r\n    return VNode;\r\n}\r\nexports.renderElementNode = renderElementNode;\r\n/**\r\n * renderTemplateNode - 渲染template元素\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n *\r\n * 1.<template></template> -> 什么都没有\r\n * 2.<template v-if=\"xxx\"></template> -> 有v-if\r\n * 3.<template v-for=\"item in list|obj\"></template> -> 有v-for\r\n * 4.<template v-slot:default></template> -> 有v-slot\r\n * @return VNode | Array | null\r\n */\r\nfunction renderTemplateNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context,\r\n                // context === this.$dataProxy ? createContext.call(this, this.$dataProxy) : context,\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderTemplateNode,\r\n            });\r\n        }\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n            // 如果不显示则返回null\r\n            if (!display) {\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else\r\n        if (else_1.hasVElse(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry.valid)\r\n                return null;\r\n            if (!entry.result)\r\n                return null;\r\n        }\r\n        // 解析v-else-if\r\n        if (else_if_1.hasVElseIf(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry.valid)\r\n                return null;\r\n            if (!entry.result)\r\n                return null;\r\n        }\r\n    }\r\n    // loop template的children\r\n    var result = [];\r\n    for (var i = 0, len = el.content.childNodes.length; i < len; i++) {\r\n        var VNodes = renderLoop.call(this, {\r\n            context: context,\r\n            el: el.content.childNodes[i],\r\n            parentVNode: parentVNode,\r\n            parentElement: el,\r\n        });\r\n        if (!VNodes)\r\n            continue;\r\n        // v-for返回的\r\n        if (util_2.isArray(VNodes)) {\r\n            result = result.concat(VNodes.filter(function (n) { return n; }));\r\n        }\r\n        else if (util_2.isObject(VNodes)) {\r\n            result.push(VNodes);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.renderTemplateNode = renderTemplateNode;\r\n/**\r\n * renderSlotNode - 渲染slot元素\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return VNode | VNodes\r\n *\r\n * --------------------下面是列举的一个例子---------------------\r\n *\r\n * wrap - 比如vue实例的模板\r\n * 元素如果是这样定义的\r\n * 1. 第一种情况 default用<template v-slot:default></template>表示的\r\n * <my-component>\r\n *   <template v-slot:head></template>\r\n *   <template v-slot:footer></template>\r\n *   <template v-slot:default>\r\n *     <div>{{name}}</div>\r\n *     <div>{{sex}}</div>\r\n *     <my-component-inner></my-component-inner>\r\n *   </template>\r\n * </my-component>\r\n *\r\n * 2. 第二种情况 default没用template表示\r\n * <li v-for=\"item in list\">\r\n *   <my-component>\r\n *      <div>{{item.name}}</div>\r\n *      <div>{{item.sex}}</div>\r\n *      <template v-slot:head></template>\r\n *      <template v-slot:footer></template>\r\n *      <my-component-inner></my-component-inner>\r\n *   </my-component>\r\n * </li>\r\n *\r\n * inner - 比如my-component的template模板\r\n * 比如VNode的结构是 my-component的template的内容\r\n * 1.没有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <slot></slot>\r\n *   <slot name=\"head\"></slot>\r\n *   <slot name=\"footer\"></slot>\r\n *   <template></template>\r\n * </div>\r\n *\r\n * 2.有循环\r\n * <div>\r\n *   <div></div>\r\n *   <div></div>\r\n *   <ul>\r\n *    <li v-for=\"(item,index in list)\">\r\n *      {{item.name}}\r\n *      <slot></slot>\r\n *    </li>\r\n *   </ul>\r\n * </div>\r\n */\r\nfunction renderSlotNode(_a) {\r\n    // this是my-component的实例\r\n    // this.$parent是Vue实例或者是Component实例，应该用this.getParentContext()获取父亲的上下文对象作为调用renderTemplateNode的上下文参数\r\n    // el<slot></slot>的el this.$el是$parent的template中<my-component></my-component>这个el\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    var name = 'default';\r\n    var contextType = 'parent';\r\n    // 判断slot中是否存在name属性\r\n    if (util_4.hasAttr('name', el)) {\r\n        // slot有name属性\r\n        name = util_4.getAttribute.call(this, { context: context, attrName: 'name', el: el });\r\n    }\r\n    var bindEntrys;\r\n    // el可能会有多个v-bind,如果有则是作用域插槽\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        bindEntrys = bind_1.getVBindEntrys.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n    }\r\n    // 在父亲中寻找指定的<template v-slot:name></template>元素\r\n    var templateEls = Array.from(this.$el.getElementsByTagName('template'));\r\n    var slotTemplateElIndex = templateEls.findIndex(function (templateEl) {\r\n        return templateEl\r\n            .getAttributeNames()\r\n            .some(function (attrName) { return attrName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\" + name); });\r\n    });\r\n    var slotTemplateEl = null;\r\n    if (slotTemplateElIndex !== -1) {\r\n        slotTemplateEl = templateEls[slotTemplateElIndex];\r\n    }\r\n    // 如果没有找到<template v-slot:name></template>的元素\r\n    if (!slotTemplateEl) {\r\n        // 如果是default 没有定义<template v-slot:default></template> 则需要自己创建一个template元素\r\n        slotTemplateEl = document.createElement('template');\r\n        slotTemplateEl.setAttribute(constants_1.DIRECT_PREFIX + \"slot:\" + name, '');\r\n        // 如果是default\r\n        if (name === 'default') {\r\n            // 需要在this.$el的childrenNodes排除<template v-slot开头的元素放入自定义template元素中\r\n            Array.from(this.$el.childNodes)\r\n                .filter(function (node) {\r\n                if (util_2.isElementNode(node) && node.tagName.toLowerCase() === 'template') {\r\n                    return !node\r\n                        .getAttributeNames()\r\n                        .some(function (attrName) { return attrName.startsWith(constants_1.DIRECT_PREFIX + \"slot:\"); });\r\n                }\r\n                return true;\r\n            })\r\n                .forEach(function (node) {\r\n                slotTemplateEl.content.appendChild(node);\r\n            });\r\n        }\r\n        // 如果没有对应的template对应则使用slot的内部内容作为内容\r\n        else {\r\n            contextType = 'self';\r\n            Array.from(el.childNodes).forEach(function (node) {\r\n                slotTemplateEl.content.appendChild(node);\r\n            });\r\n        }\r\n    }\r\n    var curContext;\r\n    if (contextType === 'parent') {\r\n        // 此处需要对parentContext进行克隆\r\n        curContext = proxy_1.createContext(this.$getParentContext());\r\n        // 判断<template v-slot:名字=\"\"></template>是否有v-slot:名字=\"\"\r\n        var slotTemplateAttrValue_1 = slotTemplateEl.getAttribute(constants_1.DIRECT_PREFIX + \"slot:\" + name);\r\n        // 如果有v-slot:名字=\"\"说明是作用域插槽\r\n        if (bindEntrys && bindEntrys.length && slotTemplateAttrValue_1) {\r\n            // 向parentContext中创建bindEntrys的作用域\r\n            curContext[slotTemplateAttrValue_1] = {};\r\n            bindEntrys.forEach(function (bindEntry) {\r\n                curContext[slotTemplateAttrValue_1][bindEntry.arg] = bindEntry.value;\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        curContext = context;\r\n    }\r\n    // 调用renderTemplateNode方法进行渲染\r\n    return renderTemplateNode.call(this.$parent, {\r\n        context: curContext,\r\n        el: slotTemplateEl,\r\n        parentVNode: parentVNode,\r\n        parentElement: this.$el,\r\n    });\r\n}\r\nexports.renderSlotNode = renderSlotNode;\r\n/**\r\n * renderDynamicComponent - 渲染动态组件节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return VNode | VNodes\r\n *\r\n * 如果<component></component>含有v-for和v-if则不用处理key\r\n *\r\n */\r\nfunction renderDynamicComponentNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    var key;\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context,\r\n                // context === this.$dataProxy ? createContext.call(this, this.$dataProxy) : context,\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderDynamicComponentNode,\r\n            });\r\n        }\r\n        // 这个key属性可能是v-bind:key=，也可能是key=\r\n        key = util_4.getKey.call(this, { context: context, el: el });\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n            if (!display) {\r\n                // 不显示这个节点\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else\r\n        if (else_1.hasVElse(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry_1 = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry_1.valid) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n            if (!entry_1.result) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else-if\r\n        if (else_if_1.hasVElseIf(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry_2 = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry_2.valid) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n            if (!entry_2.result) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    key = util_4.getKey.call({ context: context, el: el });\r\n    // 获取is属性的值\r\n    // is属性的值就是组件的标签的名称\r\n    var componentTagName = util_4.getAttribute.call(this, { context: context, attrName: 'is', el: el });\r\n    // 如果没有is属性\r\n    if (!componentTagName)\r\n        return null;\r\n    // 判断componentTagName是否注册过\r\n    var isComponent = false;\r\n    var componentEl = document.createElement(componentTagName);\r\n    var isVueIns = util_1.isVueInstance(this);\r\n    // this是否是vue实例\r\n    if (isVueIns) {\r\n        // 在vue实例下判断是否是组件节点\r\n        isComponent = util_3.isComponentNodeByVue(componentEl);\r\n    }\r\n    else {\r\n        var isComponentIns = util_3.isComponentInstance(this);\r\n        // this是否是component实例\r\n        if (isComponentIns) {\r\n            // 在component实例下判断是否是组件节点\r\n            isComponent = util_3.isComponentNodeByComponent(componentEl, this.$getComponentsConfig());\r\n        }\r\n        // this既不是vue实例也不是component实例\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    // 如果is的值不是组件(没有注册过)\r\n    if (!isComponent)\r\n        return null;\r\n    // 获取到组件名称之后调用renderComponentNode方法\r\n    // 赋值component标签所有的属性给componentEl除了is属性\r\n    var isAttrName = util_4.getAttributeName({ attrName: 'is', el: el });\r\n    el.getAttributeNames()\r\n        .filter(function (attrName) {\r\n        return attrName !== isAttrName &&\r\n            !attrName.startsWith(constants_1.DIRECT_PREFIX + \"bind:key\") &&\r\n            attrName !== 'key';\r\n    })\r\n        .forEach(function (attrName) { return componentEl.setAttribute(attrName, el.getAttribute(attrName)); });\r\n    // el没有key属性\r\n    if (util_2.isEmpty(key)) {\r\n        key = uuid_1.default();\r\n        el.setAttribute('key', key);\r\n        this.componentsMap.set(key, { componentName: componentTagName, key: uuid_1.default() });\r\n    }\r\n    var entry = this.componentsMap.get(key);\r\n    if (util_2.isEmpty(entry)) {\r\n        this.componentsMap.set(key, { componentName: componentTagName, key: uuid_1.default() });\r\n    }\r\n    else {\r\n        // 如果切换了componentName则需要进行删除和重新生成key的操作\r\n        if (entry.componentName !== componentTagName) {\r\n            this.componentsMap.delete(entry.key);\r\n            entry.componentName = componentTagName;\r\n            entry.key = uuid_1.default();\r\n        }\r\n    }\r\n    entry = this.componentsMap.get(key);\r\n    componentEl.setAttribute('key', entry.key);\r\n    return renderComponentNode.call(this, {\r\n        context: context,\r\n        el: componentEl,\r\n        parentVNode: parentVNode,\r\n        parentElement: parentElement,\r\n    });\r\n    // 主要是需要create一个组件元素节点，这个节点的key属性的值需要斟酌一下\r\n    // key属性的值应该是component的key属性值从componentMap中进行获取，一般这个集合获取的值是组件的实例对象\r\n    // 而对于component节点来说，值是一个对象{componentName:'组件标签名称',key:'组件的key'}\r\n}\r\nexports.renderDynamicComponentNode = renderDynamicComponentNode;\r\n/**\r\n * renderComponentNode - 渲染组件节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponentNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    // 合并多个文本节点为一个文本节点\r\n    el.normalize();\r\n    // <my-component v-bind:id=\"id\" v-if=\"\" v-show=\"\" v-on:aaa=\"person + 1\" v-on:bbb=\"display()\" v-for=\"\">\r\n    //  <div>\r\n    //    <div></div>\r\n    //    <div></div>\r\n    //  </div>\r\n    // </my-component>\r\n    // 只解析my-component标签的指令属性和非指令属性\r\n    // 解析指令属性\r\n    // 解析非指令属性\r\n    // 解析指令属性\r\n    // 1.v-for\r\n    // 2.v-if\r\n    // 3.v-show 修改组件第一层的样式属性\r\n    // 4.v-bind 一般都是组件的props\r\n    // 5.v-model v-bind:value v-on:input 可以通过组件属性进行修改\r\n    // 6.v-on 自定义事件 组件需要进行存储\r\n    // 解析非指令属性\r\n    // VNode赋值attr\r\n    var self = this;\r\n    // 获取指令属性\r\n    var vAttrNames = util_4.getVAttrNames(el);\r\n    // 解析v-for\r\n    if (for_1.hasVFor(vAttrNames)) {\r\n        // parse v-for\r\n        return for_1.parseVFor.call(this, {\r\n            context: context,\r\n            el: el,\r\n            parentVNode: parentVNode,\r\n            vAttrNames: vAttrNames,\r\n            renderFun: renderComponentNode,\r\n        });\r\n    }\r\n    // 获取el元素key属性的值\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    var key = util_4.getKey.call(this, { context: context, el: el });\r\n    // 解析v-if\r\n    if (if_1.hasVIf(vAttrNames)) {\r\n        // parse v-if\r\n        var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n        if (!display) {\r\n            // 不显示这个节点\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    if (else_1.hasVElse(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n        if (!entry.result) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    // 解析v-else-if\r\n    if (else_if_1.hasVElseIf(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n        if (!entry.result) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    // 所有的v-bind计算\r\n    // 所有非指令属性的计算\r\n    // ------这些都是component的props\r\n    // v-model v-bind:value v-on:input 可以通过组件属性进行修改-\r\n    // className style 都直接赋值到VNode属性上，不需要添加到props中\r\n    // v-on都需要传递\r\n    // attrs和events是需要传递给Component组件的参数\r\n    var attrs = {};\r\n    var events = {};\r\n    // 解析v-bind\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        // parse v-bind 都是属性\r\n        var entrys = bind_1.getVBindEntrys.call(self, { context: context, el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, value = _a.value;\r\n            attrs[arg] = value;\r\n        });\r\n    }\r\n    // 非指令属性 都是属性\r\n    var attrEntrys = util_4.getAttrEntrys(el);\r\n    attrEntrys.forEach(function (_a) {\r\n        var name = _a.name, value = _a.value;\r\n        attrs[name] = value;\r\n    });\r\n    // v-model\r\n    // v-bind:value v-on:input\r\n    if (model_1.hasVModel(vAttrNames)) {\r\n        var entry = model_1.getVModelEntrys({ el: el, vAttrNames: vAttrNames });\r\n        // 这个地方需要获取组件的配置对象，看是否配置了model选项\r\n        attrs.value = util_2.execExpression.call(this, context, entry.expression);\r\n    }\r\n    // 解析v-on\r\n    if (on_1.hasVOn(vAttrNames)) {\r\n        // parse v-on\r\n        var entrys = on_1.getVOnEntrys.call(self, { el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, expression = _a.expression;\r\n            events[arg] = expression;\r\n        });\r\n    }\r\n    // <com1 key=1/>\r\n    // <com1 key=1 />\r\n    // <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    //  <com1 key=1 />\r\n    //  <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    if (util_2.isEmpty(key)) {\r\n        // el没有key属性\r\n        // 创建一个key属性并设置到el中\r\n        key = uuid_1.default();\r\n        el.setAttribute('key', key);\r\n    }\r\n    // 根据key获取组件实例\r\n    var component = self.componentsMap.get(key);\r\n    var refVal = attrs.ref;\r\n    if ('ref' in attrs && attrs.ref) {\r\n        delete attrs.ref;\r\n    }\r\n    // 没有创建组件\r\n    if (!component) {\r\n        // 用key创建组件\r\n        component = util_3.createComponent({\r\n            attrs: attrs,\r\n            events: events,\r\n            parentContext: context,\r\n            parent: self,\r\n            root: util_1.isVueInstance(self) ? self : self.$root,\r\n            el: el,\r\n            key: key,\r\n        });\r\n        // 处理ref\r\n        if (refVal) {\r\n            self.$refs[refVal] = component;\r\n        }\r\n        self.componentsMap.set(key, component);\r\n        // 调用组件的render方法返回VNode\r\n        return component.$render();\r\n    }\r\n    // 处理ref\r\n    if (refVal) {\r\n        self.$refs[refVal] = component;\r\n    }\r\n    // 不是第一次而是更新\r\n    component.$setParams({ attrs: attrs, events: events, parentContext: context });\r\n    console.log('componentUpdate', 'update');\r\n    // 调用组件的update方法返回VNode\r\n    return component.$update();\r\n}\r\nexports.renderComponentNode = renderComponentNode;\r\n"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","renderComponentNode","renderDynamicComponentNode","renderSlotNode","renderTemplateNode","renderElementNode","renderTextNode","renderLoop","renderComponent","render","util_1","require","util_2","util_3","proxy_1","util_4","html_1","if_1","else_1","else_if_1","on_1","bind_1","show_1","for_1","model_1","vdom_1","uuid_1","constants_1","el","isMount","self","startTime","Date","getTime","vnode","call","context","templateEl","parentVNode","parentElement","endTime","log","assign","data","hook","init","curVNode","triggerLifecycle","LIFECYCLE_HOOKS","create","emptyVnode","prepatch","oldVNode","newVNode","postpatch","destroy","$preVNode","patch","startTime_1","endTime_1","insert","_a","isTextNode","isComponent","isVueIns","isVueInstance","isComponentNodeByVue","isComponentInstance","isComponentNodeByComponent","$getComponentsConfig","isTemplateNode","isSlotNode","isDynamicComponentNode","isElementNode","expression","textContent","trim","index","length","startIndex","indexOf","START_TAG","endIndex","END_TAG","substring","dfs","execExpression","charAt","createTextVNode","renderVAttr","renderFun","vAttrNames","getVAttrNames","Continue","VNode","hasVFor","parseVFor","hasVIf","parseVIf","hasVElse","entry","parseVElse","valid","result","hasVElseIf","parseVElseIf","tagName","toLowerCase","createVNode","hasVShow","parseVShow","hasVBind","parseVBind","FORM_CONTROL_BINDING_TAG_NAMES","includes","hasVModel","parseVModel","vProps","props","hasVOn","parseVOn","isFormTag","hasVHtml","parseVHtml","renderAttr","attrNames","getAttrNames","forEach","attrName","val","getAttribute","key","$refs","elm","style","class","startsWith","dataset","toCamelCase","attrs","normalize","_b","parseOption","i","len","childNodes","VNodes","isArray","filter","n","children","push","isObject","content","concat","bindEntrys","name","contextType","hasAttr","getVBindEntrys","curContext","slotTemplateAttrValue_1","templateEls","Array","from","$el","getElementsByTagName","slotTemplateElIndex","findIndex","getAttributeNames","some","DIRECT_PREFIX","slotTemplateEl","document","createElement","setAttribute","node","appendChild","createContext","$getParentContext","bindEntry","arg","$parent","getKey","componentsMap","delete","entry_1","entry_2","componentTagName","componentEl","isAttrName","getAttributeName","isEmpty","set","componentName","get","events","getAttrEntrys","getVModelEntrys","getVOnEntrys","component","refVal","ref","$setParams","parentContext","console","$update","createComponent","parent","root","$root","$render"],"mappings":"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"}