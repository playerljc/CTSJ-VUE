{"version":3,"file":"renderRouterViewNode.js","sources":["compiler/renderRouterViewNode.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderRouterViewNode = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar util_1 = require(\"../shared/util\");\r\nvar util_2 = require(\"./directives/util\");\r\nvar for_1 = require(\"./directives/for\");\r\nvar if_1 = require(\"./directives/if\");\r\nvar else_1 = require(\"./directives/else\");\r\nvar else_if_1 = require(\"./directives/else-if\");\r\nvar util_3 = require(\"../core/util\");\r\nvar util_4 = require(\"../core/component/util\");\r\nvar register_1 = require(\"../core/component/register\");\r\nvar renderComponentNode_1 = require(\"./renderComponentNode\");\r\n/**\r\n * renderRouterViewNode - 渲染router-view元素\r\n *\r\n * 其实<router-view>会被转换成一个组件节点，这个方法的核心目的是\r\n * 通过路由的配置和window.location.pathname进行匹配选择出一个匹配的路由项\r\n * 匹配的路由项中会有component信息，params，query，name，fullpath等一系列信息\r\n * 细节会分为this是Vue实例和this是组件实例2种情况下\r\n *\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement 元素\r\n * @param parentVNode VNode\r\n * @param parentElement HtmlElement\r\n * @return VNode\r\n */\r\nfunction renderRouterViewNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement;\r\n    var vAttrNames = util_2.getVAttrNames(el);\r\n    var key;\r\n    if (vAttrNames.length) {\r\n        // 解析el的v-for标签\r\n        if (for_1.hasVFor(vAttrNames)) {\r\n            // parse v-for\r\n            return for_1.parseVFor.call(this, \r\n            // 如果context是this.$dataProxy则需要重新创建新的context(上下文)，因为一个v-for就是一个新的上下文环境，因为v-for会有新的变量放入到this中\r\n            {\r\n                context: context,\r\n                // context === this.$dataProxy ? createContext.call(this, this.$dataProxy) : context,\r\n                el: el,\r\n                parentVNode: parentVNode,\r\n                vAttrNames: vAttrNames,\r\n                renderFun: renderRouterViewNode,\r\n            });\r\n        }\r\n        // 这个key属性可能是v-bind:key=，也可能是key=\r\n        key = util_2.getKey.call(this, { context: context, el: el });\r\n        // 解析v-if\r\n        if (if_1.hasVIf(vAttrNames)) {\r\n            // parse v-if\r\n            var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n            if (!display) {\r\n                // 不显示这个节点\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else\r\n        if (else_1.hasVElse(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry_1 = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry_1.valid) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n            if (!entry_1.result) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        // 解析v-else-if\r\n        if (else_if_1.hasVElseIf(vAttrNames)) {\r\n            // 合理性判断\r\n            // 如果合理则进行计算\r\n            var entry_2 = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n            if (!entry_2.valid) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n            if (!entry_2.result) {\r\n                if (key) {\r\n                    // 有key属性则在componentsMap中删除这个组件的引用\r\n                    this.componentsMap.delete(key);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    key = util_2.getKey.call(this, { context: context, el: el });\r\n    // 获取<router-view>的name属性值，缺省是default，为了处理命名视图\r\n    var name = util_2.getAttribute({ context: context, attrName: 'name', el: el }) || 'default';\r\n    // 根据路由配置获取component的组件，然后根据component反查tagName\r\n    // 创建tagName的元素\r\n    var matchResult;\r\n    // 如果是vue实例\r\n    if (util_3.isVueInstance(this)) {\r\n        // 在ins是vue实例的情况下获取路由的匹配信息\r\n        matchResult = this.$router.$getComponentIsVueIns(name);\r\n    }\r\n    // 如果是组件\r\n    else if (util_4.isComponentInstance(this)) {\r\n        //  在ins是组件实例的情况下获取路由的匹配信息\r\n        //  组件的实例中需要有路由的配置项信息(重点)\r\n        matchResult = this.$router.$getComponentIsComIns(this.$matchRoute, name);\r\n    }\r\n    // 如果没有匹配的路由说明连*都没写\r\n    if (!matchResult)\r\n        return null;\r\n    // el没有key属性\r\n    if (vue_util_1.isEmpty(key)) {\r\n        key = vue_util_1.uuid();\r\n        el.setAttribute('key', key);\r\n    }\r\n    // 结构matchResult\r\n    var \r\n    // 匹配的组件配置\r\n    component = matchResult.component, \r\n    // 匹配的详细信息\r\n    detail = matchResult.detail, \r\n    // 匹配的路由项\r\n    route = matchResult.route, \r\n    // 传递给组件的props值\r\n    props = matchResult.props, \r\n    // 匹配的路由配置项\r\n    path = matchResult.path, \r\n    // 匹配的正则表达式\r\n    regexp = matchResult.regexp;\r\n    // 初始化$route对象\r\n    // this.$route = { ...detail };\r\n    // 根据component去全局注册中寻找组件的名字\r\n    var comName = register_1.getNameByComponentInGlobal(component);\r\n    // 根据注册的名字创建一个el元素并赋值key属性\r\n    var comEl = document.createElement(comName);\r\n    var entry = this.componentsMap.get(key);\r\n    if (!entry) {\r\n        entry = { component: component, key: vue_util_1.uuid() };\r\n        this.componentsMap.set(key, entry);\r\n    }\r\n    // 如果2次组件是不一致的会重新生成key\r\n    if (component !== entry.component) {\r\n        entry.component = component;\r\n        entry.key = vue_util_1.uuid();\r\n    }\r\n    // 给组件元素设置key属性\r\n    comEl.setAttribute('key', entry.key);\r\n    // 给comEl元素设置props的值\r\n    if (props && vue_util_1.isObject(props)) {\r\n        Array.from(Object.keys(props)).forEach(function (property) {\r\n            // props的属性是驼峰的需要转换成kebabCase形式\r\n            comEl.setAttribute(util_1.pascalCaseToKebabCase(property), props[property]);\r\n        });\r\n    }\r\n    // 调用renderComponentNode方法\r\n    return renderComponentNode_1.renderComponentNode.call(this, {\r\n        context: context,\r\n        el: comEl,\r\n        parentVNode: parentVNode,\r\n        parentElement: parentElement,\r\n        route: route,\r\n        $route: __assign(__assign({}, detail), { path: path, regexp: regexp }),\r\n    });\r\n}\r\nexports.renderRouterViewNode = renderRouterViewNode;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","renderRouterViewNode","vue_util_1","require","util_1","util_2","for_1","if_1","else_1","else_if_1","util_3","util_4","register_1","renderComponentNode_1","_a","context","el","parentVNode","parentElement","vAttrNames","getVAttrNames","hasVFor","parseVFor","renderFun","key","getKey","hasVIf","parseVIf","componentsMap","delete","hasVElse","entry_1","parseVElse","valid","result","hasVElseIf","entry_2","parseVElseIf","name","getAttribute","attrName","isVueInstance","matchResult","$router","$getComponentIsVueIns","isComponentInstance","$getComponentIsComIns","$matchRoute","isEmpty","uuid","setAttribute","component","detail","route","props","path","regexp","comName","getNameByComponentInGlobal","comEl","document","createElement","entry","get","set","isObject","Array","from","keys","forEach","property","pascalCaseToKebabCase","renderComponentNode","$route"],"mappings":"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"}