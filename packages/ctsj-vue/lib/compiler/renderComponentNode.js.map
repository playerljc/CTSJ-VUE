{"version":3,"file":"renderComponentNode.js","sources":["compiler/renderComponentNode.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.renderComponentNode = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar routeHooks_1 = require(\"@ctsj/vue-router/lib/routeHooks\");\r\nvar util_1 = require(\"./directives/util\");\r\nvar for_1 = require(\"./directives/for\");\r\nvar if_1 = require(\"./directives/if\");\r\nvar else_1 = require(\"./directives/else\");\r\nvar else_if_1 = require(\"./directives/else-if\");\r\nvar bind_1 = require(\"./directives/bind\");\r\nvar model_1 = require(\"./directives/model\");\r\nvar util_2 = require(\"../shared/util\");\r\nvar on_1 = require(\"./directives/on\");\r\nvar util_3 = require(\"../core/component/util\");\r\nvar util_4 = require(\"../core/util\");\r\n/**\r\n * renderComponentNode - 渲染组件节点\r\n * @param context - Object 上下文对象\r\n * @param el - HtmlElement el元素\r\n * @param parentVNode - VNode 父元素VNode\r\n * @param parentElement - HtmlElement 父元素\r\n * @param route - Object 如果是路由匹配，则是匹配路由的配置项\r\n * @param $route - Object 当前的路由信息\r\n * @return VNode | Array<VNode>\r\n */\r\nfunction renderComponentNode(_a) {\r\n    var context = _a.context, el = _a.el, parentVNode = _a.parentVNode, parentElement = _a.parentElement, route = _a.route, $route = _a.$route;\r\n    // 合并多个文本节点为一个文本节点\r\n    el.normalize();\r\n    // <my-component v-bind:id=\"id\" v-if=\"\" v-show=\"\" v-on:aaa=\"person + 1\" v-on:bbb=\"display()\" v-for=\"\">\r\n    //  <div>\r\n    //    <div></div>\r\n    //    <div></div>\r\n    //  </div>\r\n    // </my-component>\r\n    // 只解析my-component标签的指令属性和非指令属性\r\n    // 解析指令属性\r\n    // 解析非指令属性\r\n    // 解析指令属性\r\n    // 1.v-for\r\n    // 2.v-if\r\n    // 3.v-show 修改组件第一层的样式属性\r\n    // 4.v-bind 一般都是组件的props\r\n    // 5.v-model v-bind:value v-on:input 可以通过组件属性进行修改\r\n    // 6.v-on 自定义事件 组件需要进行存储\r\n    // 解析非指令属性\r\n    // VNode赋值attr\r\n    var self = this;\r\n    // 获取指令属性\r\n    var vAttrNames = util_1.getVAttrNames(el);\r\n    // 解析v-for\r\n    if (for_1.hasVFor(vAttrNames)) {\r\n        // parse v-for\r\n        return for_1.parseVFor.call(this, {\r\n            context: context,\r\n            el: el,\r\n            parentVNode: parentVNode,\r\n            vAttrNames: vAttrNames,\r\n            renderFun: renderComponentNode,\r\n        });\r\n    }\r\n    // 获取el元素key属性的值\r\n    // 这个key属性可能是v-bind:key=，也可能是key=\r\n    var key = util_1.getKey.call(this, { context: context, el: el });\r\n    // 解析v-if\r\n    if (if_1.hasVIf(vAttrNames)) {\r\n        // parse v-if\r\n        var display = if_1.parseVIf.call(this, { context: context, el: el, vAttrNames: vAttrNames });\r\n        if (!display) {\r\n            // 不显示这个节点\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    if (else_1.hasVElse(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_1.parseVElse.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n        if (!entry.result) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    // 解析v-else-if\r\n    if (else_if_1.hasVElseIf(vAttrNames)) {\r\n        // 合理性判断\r\n        // 如果合理则进行计算\r\n        var entry = else_if_1.parseVElseIf.call(this, { context: context, el: el, parentElement: parentElement });\r\n        if (!entry.valid) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n        if (!entry.result) {\r\n            if (key) {\r\n                // 有key属性则在componentsMap中删除这个组件的引用\r\n                this.componentsMap.delete(key);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    // 所有的v-bind计算\r\n    // 所有非指令属性的计算\r\n    // ------这些都是component的props\r\n    // v-model v-bind:value v-on:input 可以通过组件属性进行修改-\r\n    // className style 都直接赋值到VNode属性上，不需要添加到props中\r\n    // v-on都需要传递\r\n    // attrs和events是需要传递给Component组件的参数\r\n    var attrs = {};\r\n    var events = {};\r\n    // 解析v-bind\r\n    if (bind_1.hasVBind(vAttrNames)) {\r\n        // parse v-bind 都是属性\r\n        var entrys = bind_1.getVBindEntrys.call(self, { context: context, el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, value = _a.value;\r\n            attrs[arg] = value;\r\n        });\r\n    }\r\n    // 非指令属性 都是属性\r\n    var attrEntrys = util_1.getAttrEntrys(el);\r\n    attrEntrys.forEach(function (_a) {\r\n        var name = _a.name, value = _a.value;\r\n        attrs[name] = value;\r\n    });\r\n    // v-model\r\n    // v-bind:value v-on:input\r\n    if (model_1.hasVModel(vAttrNames)) {\r\n        var entry = model_1.getVModelEntrys({ el: el, vAttrNames: vAttrNames });\r\n        // 这个地方需要获取组件的配置对象，看是否配置了model选项\r\n        attrs.value = util_2.execExpression.call(this, context, entry.expression);\r\n    }\r\n    // 解析v-on\r\n    if (on_1.hasVOn(vAttrNames)) {\r\n        // parse v-on\r\n        var entrys = on_1.getVOnEntrys.call(self, { el: el, vAttrNames: vAttrNames });\r\n        entrys.forEach(function (_a) {\r\n            var arg = _a.arg, expression = _a.expression;\r\n            events[arg] = expression;\r\n        });\r\n    }\r\n    // <com1 key=1/>\r\n    // <com1 key=1 />\r\n    // <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    //  <com1 key=1 />\r\n    //  <com1 key=2 />\r\n    //  <com1 key=3 />\r\n    if (vue_util_1.isEmpty(key)) {\r\n        // el没有key属性\r\n        // 创建一个key属性并设置到el中\r\n        key = vue_util_1.uuid();\r\n        el.setAttribute('key', key);\r\n    }\r\n    // 根据key获取组件实例\r\n    var component = self.componentsMap.get(key);\r\n    var refVal = attrs.ref;\r\n    if ('ref' in attrs && attrs.ref) {\r\n        delete attrs.ref;\r\n    }\r\n    // 没有创建组件\r\n    if (!component) {\r\n        // 用key创建组件\r\n        component = util_3.createComponent({\r\n            attrs: attrs,\r\n            events: events,\r\n            parentContext: context,\r\n            parent: self,\r\n            root: util_4.isVueInstance(self) ? self : self.$root,\r\n            el: el,\r\n            key: key,\r\n            route: route,\r\n            $route: $route,\r\n        });\r\n        // 当前匹配路由的设置\r\n        if (route && $route) {\r\n            routeHooks_1.push(__assign(__assign({}, $route), { route: route,\r\n                component: component }));\r\n        }\r\n        // 处理ref\r\n        if (refVal) {\r\n            self.$refs[refVal] = component;\r\n        }\r\n        self.componentsMap.set(key, component);\r\n        // 调用组件的render方法返回VNode\r\n        return component.$render();\r\n    }\r\n    // 当前匹配路由的设置\r\n    if (route && $route) {\r\n        routeHooks_1.push(__assign(__assign({}, $route), { route: route,\r\n            component: component }));\r\n    }\r\n    // 处理ref\r\n    if (refVal) {\r\n        self.$refs[refVal] = component;\r\n    }\r\n    // 不是第一次而是更新\r\n    component.$setParams({ attrs: attrs, events: events, parentContext: context });\r\n    // 重新赋值一下$matchRoute\r\n    component.$matchRoute = route;\r\n    // 当前路由信息\r\n    component.$route = $route;\r\n    console.log('componentUpdate', 'update');\r\n    // 调用组件的update方法返回VNode\r\n    return component.$update();\r\n}\r\nexports.renderComponentNode = renderComponentNode;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","renderComponentNode","vue_util_1","require","routeHooks_1","util_1","for_1","if_1","else_1","else_if_1","bind_1","model_1","util_2","on_1","util_3","util_4","_a","context","el","parentVNode","parentElement","route","$route","normalize","self","vAttrNames","getVAttrNames","hasVFor","parseVFor","renderFun","key","getKey","hasVIf","parseVIf","componentsMap","delete","hasVElse","entry","parseVElse","valid","result","hasVElseIf","parseVElseIf","attrs","events","hasVBind","getVBindEntrys","forEach","arg","getAttrEntrys","name","hasVModel","getVModelEntrys","execExpression","expression","hasVOn","getVOnEntrys","isEmpty","uuid","setAttribute","component","get","refVal","ref","push","$refs","$setParams","parentContext","$matchRoute","console","log","$update","createComponent","parent","root","isVueInstance","$root","set","$render"],"mappings":"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"}