{"version":3,"file":"proxy.js","sources":["core/proxy.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isProxyProperty = exports.getPropertyVisitPathStr = exports.createPropsProxy = exports.createComponentProxy = exports.createVueProxy = exports.createContext = void 0;\r\nvar util_1 = require(\"./util\");\r\nvar dirtyStack_1 = require(\"../compiler/dirtyStack\");\r\nvar util_2 = require(\"../shared/util\");\r\nvar render_1 = require(\"../compiler/render\");\r\nvar constants_1 = require(\"../shared/constants\");\r\n/**\r\n * createContext - 创建上下文(主要是在v-for的时候需要重新创建一个新的上下文)\r\n * @param srcContext - Object 原始的srcContext对象\r\n * @param arg - Object 上下文的参数\r\n * @return Object 新的上下文\r\n */\r\nfunction createContext(srcContext, arg) {\r\n    if (arg === void 0) { arg = {}; }\r\n    var context = __assign({}, (arg || {}));\r\n    // 根据this的代理对象创建上下对象\r\n    for (var p in srcContext) {\r\n        if (isProxyProperty(p)) {\r\n            context[p] = srcContext[p];\r\n        }\r\n    }\r\n    return context;\r\n}\r\nexports.createContext = createContext;\r\n/**\r\n * createProxy - 创建对象的代理(对data和computed的响应式创建，支持Object和Array)\r\n * @param srcObj - Object | Array 要代理的对象\r\n * @param renderHandler - Function 渲染的句柄函数\r\n * @return Proxy\r\n */\r\nfunction createProxy(srcObj, renderHandler) {\r\n    var self = this;\r\n    var proxy = null;\r\n    // 只有对象和数组才能进行代理\r\n    if (!util_2.isObject(srcObj) && !util_2.isArray(srcObj))\r\n        return proxy;\r\n    // 创建srcObj的代理过程\r\n    proxy = new Proxy(srcObj, {\r\n        /**\r\n         * get 陷阱的函数\r\n         * @param target\r\n         * @param key\r\n         * @param receiver\r\n         * @return {any}\r\n         */\r\n        get: function (target, key, receiver) {\r\n            // 处理计算属性\r\n            if (key in (self.$config.computed || {})) {\r\n                // 如果这个值存在则返回，否则进行一次computed的计算\r\n                if (target[key] === null || target[key] === undefined) {\r\n                    // computed:{\r\n                    //   message:function(){\r\n                    //\r\n                    //   },\r\n                    //   message:{\r\n                    //     get: function(){\r\n                    //\r\n                    //     },\r\n                    //     set: function() {\r\n                    //\r\n                    //     }\r\n                    //   }\r\n                    // }\r\n                    // 调用计算属性方法返回计算属性的值\r\n                    target[key] = self.$config.computed[key].call(self.$dataProxy);\r\n                }\r\n            }\r\n            return Reflect.get(target, key, receiver);\r\n        },\r\n        /**\r\n         * set 陷阱的函数\r\n         * 一般都是在生命周期hooks或者事件处理函数中对data的值进行修改，会触发set\r\n         * @param target\r\n         * @param key\r\n         * @param value\r\n         * @param receiver\r\n         * @return {boolean}\r\n         */\r\n        set: function (target, key, value, receiver) {\r\n            // 如果不是代理属性则不处理\r\n            // 比如已$等开头的key不进行处理 或者是计算属性的key\r\n            if (!isProxyProperty(key) || util_1.isComputedProperty(target, key)) {\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            // a.b.c.d = 1\r\n            // target = c\r\n            // key = d\r\n            // value = 1\r\n            // 对data和computed的值进行了修改\r\n            // 1.进行watch监听\r\n            // 2.对代理的修改同步到noProxy对象上\r\n            // 3.如果修改的值是引用类型则递归的设置代理\r\n            // 4.重新计算所有的计算属性\r\n            // 5.进行render\r\n            // 一个表达式路径 比如a.b.c.d这样的一个路径，key是target的一个键，但是target也是其他对象键的值，\r\n            // 这个方法会返回追溯到整个的一个访问链\r\n            var propertyAccessStr = getPropertyVisitPathStr(target, key);\r\n            var cloneValue;\r\n            // watch监听\r\n            if (self.$config.watch && util_2.isObject(self.$config.watch)) {\r\n                // 监听表达式 例如：'a.b.c.d'\r\n                // 根据propertyAccessStr获取watch的句柄\r\n                var handler_1 = self.$config.watch[propertyAccessStr];\r\n                if (handler_1) {\r\n                    // 调用watch的监听句柄\r\n                    // handler(oldValue,newValue)\r\n                    // value是没有被代理的\r\n                    // target[key]已经是被代理的对象，需要找到对应的非代理对象\r\n                    // clone的目的是不让用户修改这个值\r\n                    cloneValue = util_2.cloneDeep(value);\r\n                    // 新的值\r\n                    var newVal_1 = cloneValue;\r\n                    // 是数组且不是length监听\r\n                    // 如果是数组修改target的array对象,key是修改项的索引或者数组的length属性\r\n                    if (util_2.isArray(target) && key !== 'length') {\r\n                        // 在$noProxySrcData中取出array的值，clone的目的防止用户修改\r\n                        var array = util_2.cloneDeep(eval(\"self.$noProxySrcData.\" + propertyAccessStr));\r\n                        // key是数组的索引，为key索引赋值新值\r\n                        array[key] = cloneValue;\r\n                        newVal_1 = array;\r\n                    }\r\n                    // 调用watch的相关句柄\r\n                    // oldVal,newVal\r\n                    // TODO: createProxy的watch的处理\r\n                    util_2.createExecutionContext.call(self, self, function () {\r\n                        handler_1.call(self, util_2.execExpression(self.$noProxySrcData, propertyAccessStr), newVal_1);\r\n                    });\r\n                }\r\n            }\r\n            // 对代理的修改同步到noProxy对象上\r\n            // 例如修改的是a.b.c.d\r\n            // 例如修改的是a\r\n            // 例如修改的是a.b\r\n            var cloneDeepRef = util_2.cloneDeep;\r\n            // 回写原始数据\r\n            eval('if(!cloneValue) {cloneValue = cloneDeepRef(value);}');\r\n            if (util_2.isArray(target) && key !== 'length') {\r\n                // 数组则更新索引出的值\r\n                eval(\"self.$noProxySrcData.\" + propertyAccessStr + \"[\" + key + \"] = cloneValue\");\r\n            }\r\n            else {\r\n                // 其他则直接更新\r\n                eval(\"self.$noProxySrcData.\" + propertyAccessStr + \" = cloneValue\");\r\n            }\r\n            // 如果不是私有属性且是对象或数组继续loop，给value进行代理\r\n            if (util_2.isObject(value) || util_2.isArray(value)) {\r\n                value = createProxy.call(self, value, renderHandler);\r\n                // 创建value的上下级关系(留着在watch中在原始对象中通过上下级关系找到变量)\r\n                value[constants_1.PATH_SYMBOLS[0]] = key;\r\n                value[constants_1.PATH_SYMBOLS[1]] = target /* [key] */;\r\n            }\r\n            // ---------------------------------有数据更新\r\n            // 先进行计算\r\n            var result = Reflect.set(target, key, value, receiver);\r\n            dirtyStack_1.push(renderHandler, value);\r\n            // -----------------------------------end\r\n            return result;\r\n        },\r\n        /**\r\n         * deleteProperty - 对象删除属性\r\n         * @param target - 目标对象\r\n         * @param property - 删除的属性\r\n         * @return Object\r\n         */\r\n        deleteProperty: function (target, property) {\r\n            if (!isProxyProperty(property) || util_1.isComputedProperty(target, property)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            var propertyAccessStr = getPropertyVisitPathStr(target, property);\r\n            // watch监听\r\n            if (self.$config.watch && util_2.isObject(self.$config.watch)) {\r\n                var handler_2 = self.$config.watch[propertyAccessStr];\r\n                if (handler_2) {\r\n                    // TODO: createProxy的watch的处理\r\n                    util_2.createExecutionContext.call(self, self, function () {\r\n                        // oldVal, newVal\r\n                        handler_2.call(self, util_2.execExpression(self.$noProxySrcData, propertyAccessStr), null);\r\n                    });\r\n                }\r\n            }\r\n            eval(\"delete self.$noProxySrcData.\" + propertyAccessStr);\r\n            // 先进行计算\r\n            var result = Reflect.deleteProperty(target, property);\r\n            dirtyStack_1.push(renderHandler, property);\r\n            return result;\r\n        },\r\n    });\r\n    /**\r\n     * 继续进行迭代，迭代srcObj的所有属性，为srcObj的所有属性都进行代理\r\n     */\r\n    for (var p in srcObj) {\r\n        // obj是Array, 迭代数组\r\n        // p是0,1,2,3...等索引\r\n        var objItem = srcObj[p];\r\n        if (isProxyProperty(p) && (util_2.isObject(objItem) || util_2.isArray(objItem))) {\r\n            srcObj[p] = createProxy.call(self, objItem, renderHandler);\r\n            // 创建value的上下级关系\r\n            // 如果srcObj是数组则记录数组的索引\r\n            objItem[constants_1.PATH_SYMBOLS[0]] = util_2.isArray(srcObj) ? \"[\" + p + \"]\" : p;\r\n            objItem[constants_1.PATH_SYMBOLS[1]] = srcObj;\r\n        }\r\n    }\r\n    return proxy;\r\n}\r\n/**\r\n * createVueProxy - Component实例创建代理\r\n * @param srcObj - Object | Array 被代理的对象\r\n * @return {Proxy} - 代理对象\r\n */\r\nfunction createVueProxy(srcObj) {\r\n    return createProxy.call(this, srcObj, function () {\r\n        // 调用渲染句柄\r\n        render_1.render.call(this, this.$config.el, false);\r\n    });\r\n}\r\nexports.createVueProxy = createVueProxy;\r\n/**\r\n * createComponentProxy - 组件实例创建代理\r\n * @param srcObj - Object | Array 被代理的对象\r\n * @return {Proxy} - 代理对象\r\n */\r\nfunction createComponentProxy(srcObj) {\r\n    return createProxy.call(this, srcObj, function () {\r\n        // 组件自身更新\r\n        var VNode = render_1.renderComponent.call(this);\r\n        VNode.key = this.$key;\r\n        this.assignClassAndStyle(VNode);\r\n        if (this.$top && util_2.isFunction(this.$top.refresh)) {\r\n            this.$top.refresh(VNode);\r\n        }\r\n    });\r\n}\r\nexports.createComponentProxy = createComponentProxy;\r\n/**\r\n * createPropsProxy - 创建props的代理\r\n * @param props - Object props\r\n * @return Proxy\r\n */\r\nfunction createPropsProxy(props) {\r\n    var self = this;\r\n    return new Proxy(props, {\r\n        set: function (target, key, value, receiver) {\r\n            // watch监听\r\n            if (self.$config.watch && util_2.isObject(self.$config.watch)) {\r\n                var handler_3 = self.$config.watch[key];\r\n                if (handler_3) {\r\n                    // 调用watch的监听句柄\r\n                    // handler(oldValue,newValue)\r\n                    // value是没有被代理的\r\n                    // target[key]已经是被代理的对象，需要找到对应的非代理对象\r\n                    // clone的目的是不让用户修改这个值\r\n                    var cloneValue = util_2.cloneDeep(value);\r\n                    var newVal_2 = cloneValue;\r\n                    // 是数组且不是length监听\r\n                    if (util_2.isArray(target) && key !== 'length') {\r\n                        // 取出array的值，clone的目的防止用户修改\r\n                        var array = util_2.cloneDeep(eval(\"self.$noProxySrcData.\" + key));\r\n                        // key是数组的索引，为key索引赋值新值\r\n                        array[key] = cloneValue;\r\n                        newVal_2 = array;\r\n                    }\r\n                    // 调用watch的相关句柄\r\n                    // TODO: createPropsProxy的watch的处理\r\n                    util_2.createExecutionContext.call(self, self, function () {\r\n                        handler_3.call(self, util_2.execExpression(self.$noProxySrcData, key), newVal_2);\r\n                    });\r\n                }\r\n            }\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n    });\r\n}\r\nexports.createPropsProxy = createPropsProxy;\r\n/**\r\n * getPropertyVisitPathStr - 获取属性访问的完整字符串路径 a.b.c.d.e.f\r\n * @param target Proxy中set的target参数\r\n * @param key Proxy中set的key参数\r\n * @return {string}\r\n */\r\nfunction getPropertyVisitPathStr(target, key) {\r\n    // 最终的访问路径 - 先将最后一个key放入\r\n    var visitPath = util_2.isArray(target) && key !== 'length' ? [] : [key];\r\n    if (target[constants_1.PATH_SYMBOLS[0]]) {\r\n        visitPath.push(target[constants_1.PATH_SYMBOLS[0]]);\r\n    }\r\n    var parent = target[constants_1.PATH_SYMBOLS[1]];\r\n    while (parent) {\r\n        if (parent[constants_1.PATH_SYMBOLS[0]]) {\r\n            visitPath.push(parent[constants_1.PATH_SYMBOLS[0]]);\r\n        }\r\n        parent = parent[constants_1.PATH_SYMBOLS[1]];\r\n    }\r\n    // [0] c b a\r\n    // a b c [0]\r\n    // a [0]\r\n    visitPath.reverse();\r\n    var result = [];\r\n    for (var i = 0; i < visitPath.length; i++) {\r\n        var item = visitPath[i];\r\n        if (item.startsWith('[') && item.endsWith(']')) {\r\n            result[result.length - 1] = \"\" + result[result.length - 1] + item;\r\n        }\r\n        else {\r\n            result.push(item);\r\n        }\r\n    }\r\n    return result.join('.');\r\n}\r\nexports.getPropertyVisitPathStr = getPropertyVisitPathStr;\r\n/**\r\n * isProxyProperty - 是否是代理属性 一般对$开头的属性不进行任何处理\r\n * @param property - Object\r\n * @return {boolean}\r\n */\r\nfunction isProxyProperty(property) {\r\n    return !(constants_1.CREATE_PROXY_EXCLUDE_PREFIX.some(function (t) { return property.startsWith(t); }) ||\r\n        constants_1.CREATE_PROXY_EXCLUDE_SUFFIX.some(function (t) { return property.endsWith(t); }));\r\n}\r\nexports.isProxyProperty = isProxyProperty;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","isProxyProperty","getPropertyVisitPathStr","createPropsProxy","createComponentProxy","createVueProxy","createContext","util_1","require","dirtyStack_1","util_2","render_1","constants_1","srcContext","arg","context","createProxy","srcObj","renderHandler","self","proxy","isObject","isArray","Proxy","get","target","key","receiver","$config","computed","undefined","$dataProxy","Reflect","set","isComputedProperty","propertyAccessStr","cloneValue","handler_1","newVal_1","array","watch","cloneDeep","eval","createExecutionContext","execExpression","$noProxySrcData","cloneDeepRef","PATH_SYMBOLS","result","push","deleteProperty","property","handler_2","objItem","render","el","VNode","renderComponent","$key","assignClassAndStyle","$top","isFunction","refresh","props","handler_3","newVal_2","visitPath","parent","reverse","item","startsWith","endsWith","join","CREATE_PROXY_EXCLUDE_PREFIX","some","CREATE_PROXY_EXCLUDE_SUFFIX"],"mappings":"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"}