{"version":3,"file":"proxy.js","sources":["core/proxy.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isProxyProperty = exports.getPropertyVisitPathStr = exports.createPropsProxy = exports.createComponentProxy = exports.createVueProxy = exports.createContext = void 0;\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar util_1 = require(\"./util\");\r\n// import { push } from '../compiler/proxyDirtyStack';\r\nvar util_2 = require(\"../shared/util\");\r\nvar render_1 = require(\"../compiler/render\");\r\nvar renderComponent_1 = require(\"../compiler/renderComponent\");\r\nvar constants_1 = require(\"../shared/constants\");\r\n/**\r\n * createContext - 创建上下文(主要是在v-for的时候需要重新创建一个新的上下文)\r\n * @param srcContext - Object 原始的srcContext对象\r\n * @param argv - Object 上下文的参数\r\n * @return Object 新的上下文\r\n */\r\nfunction createContext(srcContext, argv) {\r\n    if (argv === void 0) { argv = {}; }\r\n    // const context = { ...(arg || {}) };\r\n    //\r\n    // // 根据this的代理对象创建上下对象\r\n    // for (const p in srcContext) {\r\n    //   if (isProxyProperty(p)) {\r\n    //     context[p] = srcContext[p];\r\n    //   }\r\n    // }\r\n    //\r\n    // return context;\r\n    return __assign(__assign({}, srcContext), (argv || {}));\r\n}\r\nexports.createContext = createContext;\r\n/**\r\n * createProxy - 创建对象的代理(对data和computed的响应式创建，支持Object和Array)\r\n * @param srcObj - Object | Array 要代理的对象\r\n * @param depth - boolean 是否深度创建代理\r\n * @param renderHandler - Function 渲染的句柄函数\r\n * @return Proxy\r\n */\r\nfunction createProxy(srcObj, depth, renderHandler) {\r\n    var self = this;\r\n    var proxy = null;\r\n    // 只有对象和数组才能进行代理\r\n    if (!vue_util_1.isObject(srcObj) && !vue_util_1.isArray(srcObj))\r\n        return proxy;\r\n    // 创建srcObj的代理过程\r\n    proxy = new Proxy(srcObj, {\r\n        /**\r\n         * get 陷阱的函数\r\n         * @param target\r\n         * @param key\r\n         * @param receiver\r\n         * @return {any}\r\n         */\r\n        get: function (target, key, receiver) {\r\n            // 处理计算属性\r\n            if (key in (self.$config.computed || {})) {\r\n                // 如果这个值存在则返回，否则进行一次computed的计算\r\n                if (target[key] === null || target[key] === undefined) {\r\n                    // computed:{\r\n                    //   message:function(){\r\n                    //\r\n                    //   },\r\n                    //   message:{\r\n                    //     get: function(){\r\n                    //\r\n                    //     },\r\n                    //     set: function() {\r\n                    //\r\n                    //     }\r\n                    //   }\r\n                    // }\r\n                    // 调用计算属性方法返回计算属性的值\r\n                    target[key] = self.$config.computed[key].call(self.$dataProxy);\r\n                }\r\n            }\r\n            return Reflect.get(target, key, receiver);\r\n        },\r\n        /**\r\n         * set 陷阱的函数\r\n         * 一般都是在生命周期hook或者事件处理函数中对data的值进行修改，会触发set\r\n         * @param target\r\n         * @param key\r\n         * @param value\r\n         * @param receiver\r\n         * @return {boolean}\r\n         */\r\n        set: function (target, key, value, receiver) {\r\n            // 如果不是代理属性则不处理\r\n            // 比如已$等开头的key不进行处理 或者是计算属性的key\r\n            if (!isProxyProperty(key) || util_1.isComputedProperty(target, key)) {\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            var cloneDeepRef = vue_util_1.cloneDeep;\r\n            // 是数组\r\n            if (vue_util_1.isArray(target)) {\r\n                // 数组的原始长度\r\n                var srcLength = target.length;\r\n                var result = Reflect.set(target, key, value, receiver);\r\n                // 数组在data中的访问表达式\r\n                var propertyAccessStr = getPropertyVisitPathStr(target, key);\r\n                // 对原始对象赋值\r\n                eval(\"self.$noProxySrcData.\" + propertyAccessStr + \" = cloneDeepRef(target)\");\r\n                // 数组的当前长度\r\n                var targetLength = target.length;\r\n                // watch监听\r\n                if (self.$config.watch && vue_util_1.isObject(self.$config.watch)) {\r\n                    var handler_1 = self.$config.watch[propertyAccessStr];\r\n                    if (handler_1) {\r\n                        // 在执行上下文中执行watch的回调\r\n                        util_2.createExecutionContext.call(self, self, function () {\r\n                            handler_1.call(self, key, value);\r\n                        });\r\n                    }\r\n                }\r\n                // 数组是删除\r\n                if (targetLength < srcLength) {\r\n                    util_2.log('删除', \"key:\" + key, \"value:\" + value);\r\n                }\r\n                // 数组是添加\r\n                else if (targetLength > srcLength) {\r\n                    util_2.log('添加', \"key:\" + key, \"value:\" + value);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((vue_util_1.isObject(value) || vue_util_1.isArray(value)) && !(constants_1.PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy.call(self, value, depth, renderHandler);\r\n                        value[constants_1.PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[constants_1.PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // 数组修改\r\n                else {\r\n                    util_2.log('修改', \"key:\" + key, \"value:\" + value);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((vue_util_1.isObject(value) || vue_util_1.isArray(value)) && !(constants_1.PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy.call(self, value, depth, renderHandler);\r\n                        value[constants_1.PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[constants_1.PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // 变更入栈\r\n                self.$proxyDirtyStack.push(renderHandler, value);\r\n                return result;\r\n            }\r\n            // 是对象\r\n            if (vue_util_1.isObject(target)) {\r\n                // a.b.c.d = 1\r\n                // target = c\r\n                // key = d\r\n                // value = 1\r\n                // 对data和computed的值进行了修改\r\n                // 1.进行watch监听\r\n                // 2.对代理的修改同步到noProxy对象上\r\n                // 3.如果修改的值是引用类型则递归的设置代理\r\n                // 4.重新计算所有的计算属性\r\n                // 5.进行render\r\n                // 一个表达式路径 比如a.b.c.d这样的一个路径，key是target的一个键，但是target也是其他对象键的值，\r\n                // 这个方法会返回追溯到整个的一个访问链\r\n                var propertyAccessStr_1 = getPropertyVisitPathStr(target, key);\r\n                var cloneValue = void 0;\r\n                // watch监听\r\n                if (self.$config.watch && vue_util_1.isObject(self.$config.watch)) {\r\n                    // 监听表达式 例如：'a.b.c.d'\r\n                    // 根据propertyAccessStr获取watch的句柄\r\n                    var handler_2 = self.$config.watch[propertyAccessStr_1];\r\n                    if (handler_2) {\r\n                        // 调用watch的监听句柄\r\n                        // handler(oldValue,newValue)\r\n                        // value是没有被代理的\r\n                        // target[key]已经是被代理的对象，需要找到对应的非代理对象\r\n                        // clone的目的是不让用户修改这个值\r\n                        // 新的值\r\n                        var newVal_1 = vue_util_1.cloneDeep(value);\r\n                        // 调用watch的相关句柄\r\n                        // oldVal,newVal\r\n                        // TODO: createProxy的watch的处理\r\n                        util_2.createExecutionContext.call(self, self, function () {\r\n                            handler_2.call(self, util_2.execExpression.call(self, self.$noProxySrcData, propertyAccessStr_1), newVal_1);\r\n                        });\r\n                    }\r\n                }\r\n                // 对代理的修改同步到noProxy对象上\r\n                // 例如修改的是a.b.c.d\r\n                // 例如修改的是a\r\n                // 例如修改的是a.b\r\n                // 回写原始数据\r\n                eval(\"\\n           if(!cloneValue) {\\n              cloneValue = cloneDeepRef(value);\\n           } \\n           self.$noProxySrcData.\" + propertyAccessStr_1 + \" = cloneValue;\\n        \");\r\n                // 如果不是私有属性且是对象或数组继续loop，给value进行代理\r\n                if ((vue_util_1.isObject(value) || vue_util_1.isArray(value)) && !(constants_1.PATH_SYMBOLS[0] in value)) {\r\n                    value = createProxy.call(self, value, depth, renderHandler);\r\n                    // 创建value的上下级关系(留着在watch中在原始对象中通过上下级关系找到变量)\r\n                    value[constants_1.PATH_SYMBOLS[0]] = key;\r\n                    value[constants_1.PATH_SYMBOLS[1]] = target /* [key] */;\r\n                }\r\n                // ---------------------------------有数据更新\r\n                // 先进行计算\r\n                var result = Reflect.set(target, key, value, receiver);\r\n                // 变更入栈\r\n                self.$proxyDirtyStack.push(renderHandler, value);\r\n                // -----------------------------------end\r\n                return result;\r\n            }\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n        /**\r\n         * deleteProperty - 对象删除属性\r\n         * @param target - 目标对象\r\n         * @param property - 删除的属性\r\n         * @return Object\r\n         */\r\n        deleteProperty: function (target, property) {\r\n            if (!isProxyProperty(property) || util_1.isComputedProperty(target, property)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            // 不处理数组的删除\r\n            if (vue_util_1.isArray(target)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            var propertyAccessStr = getPropertyVisitPathStr(target, property);\r\n            // watch监听\r\n            if (self.$config.watch && vue_util_1.isObject(self.$config.watch)) {\r\n                var handler_3 = self.$config.watch[propertyAccessStr];\r\n                if (handler_3) {\r\n                    // TODO: createProxy的watch的处理\r\n                    util_2.createExecutionContext.call(self, self, function () {\r\n                        // oldVal, newVal\r\n                        handler_3.call(self, util_2.execExpression.call(self, self.$noProxySrcData, propertyAccessStr), null);\r\n                    });\r\n                }\r\n            }\r\n            eval(\"delete self.$noProxySrcData.\" + propertyAccessStr);\r\n            // 先进行计算\r\n            var result = Reflect.deleteProperty(target, property);\r\n            // 变更入栈\r\n            self.$proxyDirtyStack.push(renderHandler, property);\r\n            return result;\r\n        },\r\n    });\r\n    // 如果是深度创建代理\r\n    if (depth) {\r\n        /**\r\n         * 继续进行迭代，迭代srcObj的所有属性，为srcObj的所有属性都进行代理\r\n         */\r\n        for (var p in srcObj) {\r\n            // obj是Array, 迭代数组\r\n            // p是0,1,2,3...等索引\r\n            var objItem = srcObj[p];\r\n            if (isProxyProperty(p) && (vue_util_1.isObject(objItem) || vue_util_1.isArray(objItem))) {\r\n                srcObj[p] = createProxy.call(self, objItem, depth, renderHandler);\r\n                // 创建value的上下级关系\r\n                // 如果srcObj是数组则记录数组的索引\r\n                objItem[constants_1.PATH_SYMBOLS[0]] = vue_util_1.isArray(srcObj) ? \"[\" + p + \"]\" : p;\r\n                objItem[constants_1.PATH_SYMBOLS[1]] = srcObj;\r\n            }\r\n        }\r\n    }\r\n    return proxy;\r\n}\r\n/**\r\n * createVueProxy - Vue实例创建代理\r\n * @param srcObj - Object | Array 被代理的对象\r\n * @param depth - boolean 是否深度创建代理\r\n * @return {Proxy} - 代理对象\r\n */\r\nfunction createVueProxy(srcObj, depth) {\r\n    if (depth === void 0) { depth = true; }\r\n    // 调用实际创建代理的方法\r\n    return createProxy.call(this, srcObj, depth, function () {\r\n        // 调用渲染句柄，有执行上下文来调用\r\n        render_1.render.call(this, this.$config.el, false);\r\n    });\r\n}\r\nexports.createVueProxy = createVueProxy;\r\n/**\r\n * createComponentProxy - 组件实例创建代理\r\n * @param srcObj - Object | Array 被代理的对象\r\n * @param depth - boolean 是否深度创建代理\r\n * @return {Proxy} - 代理对象\r\n */\r\nfunction createComponentProxy(srcObj, depth) {\r\n    if (depth === void 0) { depth = true; }\r\n    return createProxy.call(this, srcObj, depth, function () {\r\n        // 组件自身更新\r\n        var VNode = renderComponent_1.renderComponent.call(this);\r\n        VNode.key = this.$key;\r\n        this.$assignClassAndStyle(VNode);\r\n        // $top是vue实例对象\r\n        if (this.$root && vue_util_1.isFunction(this.$root.$refresh)) {\r\n            this.$root.$refresh(VNode);\r\n        }\r\n    });\r\n}\r\nexports.createComponentProxy = createComponentProxy;\r\n/**\r\n * createPropsProxy - 创建props的代理\r\n * @param props - Object props\r\n * @return Proxy\r\n */\r\nfunction createPropsProxy(props) {\r\n    var self = this;\r\n    return new Proxy(props, {\r\n        set: function (target, key, value, receiver) {\r\n            // watch监听\r\n            if (self.$config.watch && vue_util_1.isObject(self.$config.watch)) {\r\n                var handler_4 = self.$config.watch[key];\r\n                if (handler_4) {\r\n                    // 调用watch的监听句柄\r\n                    // handler(oldValue,newValue)\r\n                    // value是没有被代理的\r\n                    // target[key]已经是被代理的对象，需要找到对应的非代理对象\r\n                    // clone的目的是不让用户修改这个值\r\n                    var cloneValue = vue_util_1.cloneDeep(value);\r\n                    var newVal_2 = cloneValue;\r\n                    // 是数组且不是length监听\r\n                    if (vue_util_1.isArray(target) && key !== 'length') {\r\n                        // 取出array的值，clone的目的防止用户修改\r\n                        var array = vue_util_1.cloneDeep(eval(\"self.$noProxySrcData.\" + key));\r\n                        // key是数组的索引，为key索引赋值新值\r\n                        array[key] = cloneValue;\r\n                        newVal_2 = array;\r\n                    }\r\n                    // 调用watch的相关句柄\r\n                    // TODO: createPropsProxy的watch的处理\r\n                    util_2.createExecutionContext.call(self, self, function () {\r\n                        handler_4.call(self, util_2.execExpression.call(self, self.$noProxySrcData, key), newVal_2);\r\n                    });\r\n                }\r\n            }\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n    });\r\n}\r\nexports.createPropsProxy = createPropsProxy;\r\n/**\r\n * getPropertyVisitPathStr - 获取属性访问的完整字符串路径 a.b.c.d.e.f\r\n * @param target Proxy中set的target参数\r\n * @param key Proxy中set的key参数\r\n * @return {string}\r\n */\r\nfunction getPropertyVisitPathStr(target, key) {\r\n    // 最终的访问路径 - 先将最后一个key放入\r\n    var visitPath = vue_util_1.isArray(target) /* && key !== 'length' */ ? [] : [key];\r\n    if (target[constants_1.PATH_SYMBOLS[0]]) {\r\n        visitPath.push(target[constants_1.PATH_SYMBOLS[0]]);\r\n    }\r\n    var parent = target[constants_1.PATH_SYMBOLS[1]];\r\n    while (parent) {\r\n        if (parent[constants_1.PATH_SYMBOLS[0]]) {\r\n            visitPath.push(parent[constants_1.PATH_SYMBOLS[0]]);\r\n        }\r\n        parent = parent[constants_1.PATH_SYMBOLS[1]];\r\n    }\r\n    // [0] c b a\r\n    // a b c [0]\r\n    // a [0]\r\n    visitPath.reverse();\r\n    var result = [];\r\n    for (var i = 0; i < visitPath.length; i++) {\r\n        var item = visitPath[i];\r\n        if (item.startsWith('[') && item.endsWith(']')) {\r\n            result[result.length - 1] = \"\" + result[result.length - 1] + item;\r\n        }\r\n        else {\r\n            result.push(item);\r\n        }\r\n    }\r\n    return result.join('.');\r\n}\r\nexports.getPropertyVisitPathStr = getPropertyVisitPathStr;\r\n/**\r\n * isProxyProperty - 是否是代理属性 一般对$开头的属性不进行任何处理\r\n * @param property - Object\r\n * @return {boolean}\r\n */\r\nfunction isProxyProperty(property) {\r\n    return !(constants_1.CREATE_PROXY_EXCLUDE_PREFIX.some(function (t) { return property.startsWith(t); }) ||\r\n        constants_1.CREATE_PROXY_EXCLUDE_SUFFIX.some(function (t) { return property.endsWith(t); }));\r\n}\r\nexports.isProxyProperty = isProxyProperty;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","isProxyProperty","getPropertyVisitPathStr","createPropsProxy","createComponentProxy","createVueProxy","createContext","vue_util_1","require","util_1","util_2","render_1","renderComponent_1","constants_1","srcContext","argv","createProxy","srcObj","depth","renderHandler","self","proxy","isObject","isArray","Proxy","get","target","key","receiver","$config","computed","undefined","$dataProxy","Reflect","set","isComputedProperty","cloneDeepRef","cloneDeep","srcLength","result","propertyAccessStr","eval","targetLength","handler_1","watch","createExecutionContext","log","PATH_SYMBOLS","$proxyDirtyStack","push","propertyAccessStr_1","cloneValue","handler_2","newVal_1","execExpression","$noProxySrcData","deleteProperty","property","handler_3","objItem","render","el","VNode","renderComponent","$key","$assignClassAndStyle","$root","isFunction","$refresh","props","handler_4","newVal_2","array","visitPath","parent","reverse","item","startsWith","endsWith","join","CREATE_PROXY_EXCLUDE_PREFIX","some","CREATE_PROXY_EXCLUDE_SUFFIX"],"mappings":"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"}