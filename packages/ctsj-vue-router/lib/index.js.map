{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path_to_regexp_1 = require(\"path-to-regexp\");\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar qs_1 = require(\"./qs\");\r\n/**\r\n * getConfig - 获取配置\r\n * @param config - Object\r\n * @return Object\r\n */\r\nfunction getConfig(config) {\r\n    var result = {};\r\n    for (var p in config) {\r\n        Object.defineProperty(result, p, {\r\n            writable: false,\r\n            value: config[p],\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * linkRoutes - $config.routes中的每一项加入parent属性\r\n * @param routes - Array\r\n */\r\nfunction linkRoutes(routes) {\r\n    for (var i = 0; i < routes.length; i++) {\r\n        linkRouteLoop(routes[i]);\r\n    }\r\n}\r\n/**\r\n * linkRouteLoop - 递归处理linkRoutes\r\n * @param route - Object\r\n */\r\nfunction linkRouteLoop(route) {\r\n    for (var i = 0, len = (route.children || []).length; i < len; i++) {\r\n        var curRoute = route.children[i];\r\n        curRoute.parent = route;\r\n        linkRouteLoop(curRoute);\r\n    }\r\n}\r\n/**\r\n * createRoute - 创建route\r\n * @param route - Object 命中的route配置\r\n * @param paramMap - :foo/:bar 等的匹配对象\r\n * @return Object\r\n */\r\nfunction createRoute(_a) {\r\n    var route = _a.route, paramMap = _a.paramMap;\r\n    return {\r\n        // 字符串，对应当前路由的路径，总是解析为绝对路径，如 \"/foo/bar\"\r\n        path: getCurRoutePath(route),\r\n        // 一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象\r\n        params: paramMap,\r\n        // 一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象\r\n        query: qs_1.parse(),\r\n        // 当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串\r\n        hash: window.location.hash,\r\n        // 完成解析后的 URL，包含查询参数和 hash 的完整路径\r\n        fullPath: window.location.href,\r\n        // 一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)\r\n        matched: vue_util_1.cloneDeep(route),\r\n        // 当前路由的名称，如果有的话。(查看命名路由)\r\n        name: '',\r\n        // 如果存在重定向，即为重定向来源的路由的名字。(参阅重定向和别名)\r\n        redirectedFrom: '',\r\n    };\r\n}\r\n/**\r\n * getCurRoutePath - 获取route向上的完整路径\r\n * @param route - Object 当前的路由对象\r\n * @return string\r\n */\r\nfunction getCurRoutePath(route) {\r\n    var result = [];\r\n    var curRoute = route;\r\n    while (curRoute) {\r\n        result.push(curRoute.path);\r\n        // 不是以/结尾在添加/\r\n        if (curRoute.path.lastIndexOf('/') === -1) {\r\n            result.push('/');\r\n        }\r\n        curRoute = curRoute.parent;\r\n    }\r\n    if (result.length) {\r\n        // 不是以/开头\r\n        if (result[0].indexOf('/') === -1) {\r\n            result.unshift('/');\r\n        }\r\n        // 不是以/结尾\r\n        if (result[result.length - 1].indexOf('/') === -1) {\r\n            result.push('/');\r\n        }\r\n    }\r\n    return result.reverse().join('');\r\n}\r\n/**\r\n * VueRouter - 路由\r\n * @class VueRouter\r\n * @classdesc VueRouter\r\n */\r\nvar VueRouter = /** @class */ (function () {\r\n    /**\r\n     * constructor\r\n     * @param config\r\n     * {\r\n         routes - 路由的定义\r\n         mode - 类型 默认值是hash\r\n         base - 应用的基路径\r\n         linkActiveClass 全局配置 <router-link> 默认的激活的 class\r\n         linkExactActiveClass 全局配置 <router-link> 默认的精确激活的 class\r\n         // scrollBehavior\r\n         // parseQuery / stringifyQuery\r\n         // fallback\r\n     * }\r\n     */\r\n    function VueRouter(config) {\r\n        this.$config = getConfig(config);\r\n        // 需要处理$config中routes这个属性，这个属性是一个树形结构，需要接入parent属性\r\n        linkRoutes(this.$config.routes || []);\r\n        // 属性\r\n        // .app\r\n        //  .类型: Vue instance\r\n        //  .配置了 router 的 Vue 根实例\r\n        // .mode\r\n        //  .类型: string\r\n        //  .路由使用的模式\r\n        // .currentRoute(当前不知道什么意思)\r\n    }\r\n    /**\r\n     * $getComponentIsVueIns - 获取$config的routers第一级中路径匹配项的component属性值\r\n     * @return Object\r\n     */\r\n    VueRouter.prototype.$getComponentIsVueIns = function () {\r\n        // 获取地址栏的pathname\r\n        var pathname = window.location.pathname;\r\n        // 获取$config.routers\r\n        var routers = this.$config.routers;\r\n        var result;\r\n        var _loop_1 = function (i, len) {\r\n            var _a = routers[i], path = _a.path, component = _a.component;\r\n            var keys = [];\r\n            var reg = path_to_regexp_1.pathToRegexp(path, keys);\r\n            // keys = [{ name: 'foo', prefix: '/', ... }, { name: 'bar', prefix: '/', ... }]\r\n            // 如果patchname匹配的path\r\n            if (reg.test(pathname)) {\r\n                var paramMap_1 = {};\r\n                // 返回匹配的数组\r\n                var matchValues_1 = reg.exec(pathname);\r\n                // 填充paramMap /:foo/:bar 组成的对象\r\n                keys.forEach(function (_a, index) {\r\n                    var name = _a.name;\r\n                    paramMap_1[name] = matchValues_1[index];\r\n                });\r\n                result = {\r\n                    component: component,\r\n                    detail: createRoute({\r\n                        route: routers[i],\r\n                        paramMap: paramMap_1,\r\n                    }),\r\n                    route: routers[i],\r\n                };\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0, len = (routers || []).length; i < len; i++) {\r\n            var state_1 = _loop_1(i, len);\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * $getComponentIsComIns - 获取组件所在的route中匹配的component属性值\r\n     * @param route Object - 组件所在的route\r\n     * @return Object\r\n     */\r\n    VueRouter.prototype.$getComponentIsComIns = function (route) {\r\n        // 获取地址栏的pathname\r\n        var pathname = window.location.pathname;\r\n        // 获取route的children\r\n        var _a = route.children, children = _a === void 0 ? [] : _a;\r\n        var result;\r\n        // 获取route向上的完整路径\r\n        var parentFullPath = getCurRoutePath(route);\r\n        var _loop_2 = function (i, len) {\r\n            var _a = children[i], path = _a.path, component = _a.component;\r\n            var keys = [];\r\n            var curPath = \"\" + parentFullPath + path;\r\n            if (parentFullPath.endsWith('/')) {\r\n                if (path.startsWith('/')) {\r\n                    curPath = \"\" + parentFullPath + path.substring(1);\r\n                }\r\n            }\r\n            else if (!path.startsWith('/')) {\r\n                curPath = parentFullPath + \"/\" + path;\r\n            }\r\n            var reg = path_to_regexp_1.pathToRegexp(curPath, keys);\r\n            // keys = [{ name: 'foo', prefix: '/', ... }, { name: 'bar', prefix: '/', ... }]\r\n            // 如果patchname匹配的path\r\n            if (reg.test(pathname)) {\r\n                var paramMap_2 = {};\r\n                // 返回匹配的数组\r\n                var matchValues_2 = reg.exec(pathname);\r\n                // 填充paramMap /:foo/:bar 组成的对象\r\n                keys.forEach(function (_a, index) {\r\n                    var name = _a.name;\r\n                    paramMap_2[name] = matchValues_2[index];\r\n                });\r\n                result = {\r\n                    component: component,\r\n                    detail: createRoute({\r\n                        route: children[i],\r\n                        paramMap: paramMap_2,\r\n                    }),\r\n                    route: children[i],\r\n                };\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0, len = (children || []).length; i < len; i++) {\r\n            var state_2 = _loop_2(i, len);\r\n            if (state_2 === \"break\")\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    return VueRouter;\r\n}());\r\nexports.default = VueRouter;\r\n"],"names":["Object","defineProperty","exports","value","path_to_regexp_1","require","vue_util_1","qs_1","getConfig","config","p","result","writable","linkRoutes","routes","i","length","linkRouteLoop","route","len","children","curRoute","parent","createRoute","_a","paramMap","path","getCurRoutePath","params","query","parse","hash","window","location","fullPath","href","matched","cloneDeep","name","redirectedFrom","push","lastIndexOf","indexOf","unshift","reverse","join","VueRouter","this","$config","prototype","$getComponentIsVueIns","pathname","routers","component","keys","reg","pathToRegexp","test","paramMap_1","matchValues_1","exec","forEach","index","detail","_loop_1","$getComponentIsComIns","parentFullPath","curPath","endsWith","startsWith","substring","paramMap_2","matchValues_2","_loop_2","default"],"mappings":"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"}