{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path_to_regexp_1 = __importDefault(require(\"path-to-regexp\"));\r\nvar vue_util_1 = require(\"@ctsj/vue-util\");\r\nvar constants_1 = require(\"./constants\");\r\nvar qs_1 = require(\"./qs\");\r\nvar routeHooks_1 = require(\"./routeHooks\");\r\nvar util_1 = require(\"./util\");\r\n// 用来存放beforeEach回调函数的句柄\r\nvar _beforeEachHandler;\r\n// 用来存放afterEach回调函数的句柄\r\nvar _afterEachHandler;\r\n// 用来存放onError回调函数的句柄\r\nvar _errorHandler;\r\n/**\r\n * getConfig - 获取配置\r\n * @param config - Object\r\n * @return Object\r\n */\r\nfunction getConfig(config) {\r\n    var result = {};\r\n    for (var p in config) {\r\n        Object.defineProperty(result, p, {\r\n            writable: false,\r\n            value: config[p],\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * linkRoutes - $config.routes中的每一项加入parent属性\r\n * @param routes - Array\r\n */\r\nfunction linkRoutes(routes) {\r\n    for (var i = 0; i < routes.length; i++) {\r\n        linkRouteLoop(routes[i]);\r\n    }\r\n}\r\n/**\r\n * linkRouteLoop - 递归处理linkRoutes\r\n * @param route - Object\r\n */\r\nfunction linkRouteLoop(route) {\r\n    for (var i = 0, len = (route.children || []).length; i < len; i++) {\r\n        var curRoute = route.children[i];\r\n        curRoute.parent = route;\r\n        linkRouteLoop(curRoute);\r\n    }\r\n}\r\n/**\r\n * createRoute - 创建route\r\n * @param route - Object 命中的route配置\r\n * @param paramMap - :foo/:bar 等的匹配对象\r\n * @param name - string 命名的路由名称\r\n * @return Object\r\n */\r\nfunction createRoute(_a) {\r\n    var route = _a.route, paramMap = _a.paramMap, name = _a.name;\r\n    return {\r\n        // 字符串，对应当前路由的路径，总是解析为绝对路径，如 \"/foo/bar\"\r\n        path: util_1.getCurRoutePath(route),\r\n        // 一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象\r\n        params: paramMap,\r\n        // 一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象\r\n        query: qs_1.parse(),\r\n        // 当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串\r\n        hash: window.location.hash,\r\n        // 完成解析后的 URL，包含查询参数和 hash 的完整路径\r\n        fullPath: window.location.href,\r\n        // 一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)\r\n        matched: vue_util_1.cloneDeep(route),\r\n        // 当前路由的名称，如果有的话。(查看命名路由)\r\n        name: name,\r\n        // 如果存在重定向，即为重定向来源的路由的名字。(参阅重定向和别名)\r\n        redirectedFrom: '',\r\n    };\r\n}\r\n/**\r\n * createProps - 创建命中组件的props对象\r\n * @param detail - 命中的路由详细信息\r\n * @param props [boolean | Object | Function] 命中的路由配置中props属性的配置\r\n * @return Object\r\n */\r\nfunction createProps(_a) {\r\n    var detail = _a.detail, props = _a.props;\r\n    // props是boolean值\r\n    // .布尔模式\r\n    //  如果 props 被设置为 true，route.params 将会被设置为组件属性。\r\n    if (vue_util_1.isBoolean(props) && props) {\r\n        return __assign({}, detail.params);\r\n    }\r\n    // props是object\r\n    // .对象模式\r\n    //  如果 props 是一个对象，它会被按原样设置为组件属性。当 props 是静态的时候有用\r\n    if (vue_util_1.isObject(props)) {\r\n        return __assign({}, props);\r\n    }\r\n    // props是function\r\n    // .函数模式\r\n    //  你可以创建一个函数返回 props。这样你便可以将参数转换成另一种类型，将静态值与基于路由的值结合等等\r\n    if (vue_util_1.isFunction(props)) {\r\n        return props(__assign({}, detail));\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * createPath - 创建push | replace方法的path路径\r\n * @param location - [string | Object] 导航的信息\r\n * @return string path\r\n *\r\n *\r\n * // 字符串\r\n router.push('home')\r\n\r\n // 对象\r\n router.push({ path: 'home' })\r\n\r\n // 命名的路由\r\n router.push({ name: 'user', params: { userId: '123' }})\r\n\r\n // 带查询参数，变成 /register?plan=private\r\n router.push({ path: 'register', query: { plan: 'private' }})\r\n\r\n\r\n const userId = '123'\r\n router.push({ name: 'user', params: { userId }}) // -> /user/123\r\n router.push({ path: `/user/${userId}` }) // -> /user/123\r\n // 这里的 params 不生效\r\n router.push({ path: '/user', params: { userId }}) // -> /user\r\n */\r\nfunction createPath(location) {\r\n    if (vue_util_1.isEmpty(location))\r\n        return '';\r\n    // location是string 那就是path的值\r\n    if (vue_util_1.isString(location)) {\r\n        return location;\r\n    }\r\n    // location是Object\r\n    if (vue_util_1.isObject(location)) {\r\n        // 替换params和query参数到path上\r\n        var name_1 = location.name, _a = location.params, params = _a === void 0 ? {} : _a, _b = location.query, query = _b === void 0 ? {} : _b;\r\n        // 路由的配置项\r\n        var _c = this.$config.routes, routes = _c === void 0 ? [] : _c;\r\n        // 如果含有name属性(命名视图)\r\n        if ('name' in location && !vue_util_1.isEmpty(name_1)) {\r\n            var route = findRouteByName(routes || [], name_1);\r\n            if (route) {\r\n                // 获取当前route的全路径\r\n                var path = util_1.getCurRoutePath(route);\r\n                // 替换params和query参数\r\n                // 替换params\r\n                // params对象是 {\r\n                //   userId: '123',\r\n                //   teacherId: '456',\r\n                // }\r\n                // 假如路径是 /system/:userId/:teacherId/abc/def\r\n                var toPath = path_to_regexp_1.default.compile(path, { encode: encodeURIComponent });\r\n                path = toPath(params || {});\r\n                // 替换query参数\r\n                // query对象是 {\r\n                //   id: '1',\r\n                //   name: 'lzq',\r\n                // }\r\n                // 假如路径是 /system/abc/def/\r\n                path = \"\" + path + qs_1.stringify(query || {});\r\n                return path;\r\n            }\r\n        }\r\n        // 如果含有path属性\r\n        if ('path' in location && !vue_util_1.isEmpty(location.path)) {\r\n            // 替换query参数到path上\r\n            var path = location.path;\r\n            path = \"\" + path + qs_1.stringify(query || {});\r\n            return path;\r\n        }\r\n    }\r\n    return '';\r\n}\r\n/**\r\n * findRouteByName - 通过route的name属性寻找route的配置\r\n * @param routerConfigv - Array 路由的配置\r\n * @param name - string 视图的名字\r\n * @return Route\r\n */\r\nfunction findRouteByName(routerConfigv, name) {\r\n    var result;\r\n    for (var i = 0, len = (routerConfigv || []).length; i < len; i++) {\r\n        var route = routerConfigv[i];\r\n        if (route.name === 'name') {\r\n            result = route;\r\n            break;\r\n        }\r\n        else {\r\n            result = findRouteByName(route.children || [], name);\r\n            if (result)\r\n                break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * onPopstate - 并且仅当用户在同一文档的两个历史记录条目之间导航时才触发该事件\r\n * @param e - HtmlEvent\r\n *\r\n * 注意：仅调用history.pushState()或history.replaceState()不会触发popstate事件。\r\n *      该popstate事件仅做一个浏览器行动，诸如后退按钮的点击（或调用触发history.back()JavaScript中）。\r\n *      并且仅当用户在同一文档的两个历史记录条目之间导航时才触发该事件\r\n */\r\nfunction onPopstate() {\r\n    var _this = this;\r\n    var to = \"\" + window.location.pathname + window.location.search;\r\n    var matchData = routeHooks_1.getMatchData();\r\n    var toRoute;\r\n    var route = matchData.find(function (data) { return data.path === to; });\r\n    if (route) {\r\n        toRoute = {\r\n            path: route.path,\r\n            fullPath: to,\r\n            name: route.name,\r\n            params: route.params,\r\n            query: route.query,\r\n            hash: route.hash,\r\n        };\r\n    }\r\n    else {\r\n        toRoute = {\r\n            fullPath: to,\r\n        };\r\n    }\r\n    // 加入路由守卫功能\r\n    routeHooks_1.guard(toRoute, this).then(function () {\r\n        routeHooks_1.clear();\r\n        // 这里会执行强制刷新\r\n        _this.$root.$forceUpdate();\r\n    });\r\n}\r\n/**\r\n * historyChange - 改变路由的地址\r\n * @param location - [string | Object] 导航的信息\r\n * @param onComplete - Function\r\n * @param onAbort - Function\r\n * @param historyChangeCallback - Function history改变的回调\r\n * @return Promise\r\n *\r\n * // 字符串\r\n router.push('home')\r\n\r\n // 对象\r\n router.push({ path: 'home' })\r\n\r\n // 命名的路由\r\n router.push({ name: 'user', params: { userId: '123' }})\r\n\r\n // 带查询参数，变成 /register?plan=private\r\n router.push({ path: 'register', query: { plan: 'private' }})\r\n\r\n\r\n const userId = '123'\r\n router.push({ name: 'user', params: { userId }}) // -> /user/123\r\n router.push({ path: `/user/${userId}` }) // -> /user/123\r\n // 这里的 params 不生效\r\n router.push({ path: '/user', params: { userId }}) // -> /user\r\n\r\n\r\n 在 2.2.0+，可选的在 router.push 或 router.replace 中提供 onComplete 和 onAbort 回调作为第二个和第三个参数。这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。在 3.1.0+，可以省略第二个和第三个参数，此时如果支持 Promise，router.push 或 router.replace 将返回一个 Promise。\r\n\r\n 注意： 如果目的地和当前路由相同，只有参数发生了改变 (比如从一个用户资料到另一个 /users/1 -> /users/2)，你需要使用 beforeRouteUpdate 来响应这个变化 (比如抓取用户信息)\r\n */\r\nfunction historyChange(_a) {\r\n    var location = _a.location, onComplete = _a.onComplete, onAbort = _a.onAbort, historyChangeCallback = _a.historyChangeCallback;\r\n    var self = this;\r\n    var _b = window.location, pathname = _b.pathname, search = _b.search;\r\n    // 1.根据数据拼接路径(这个路径是要跳转到的路径)\r\n    var path = createPath.call(self, location);\r\n    var topMatchData = routeHooks_1.getTop();\r\n    var toRoute = __assign(__assign({}, location), { fullPath: path });\r\n    var fromRoute = {\r\n        path: topMatchData.path,\r\n        fullPath: \"\" + pathname + search,\r\n        name: topMatchData.name,\r\n        params: topMatchData.params,\r\n        query: topMatchData.query,\r\n        hash: topMatchData.hash,\r\n    };\r\n    // 设置router的currentRoute对象\r\n    self.currentRoute = {\r\n        from: fromRoute,\r\n        to: toRoute,\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n        // 这里要要进行路由守卫的操作\r\n        routeHooks_1.guard(toRoute, self).then(function () {\r\n            // 到这里已经可以进行path的跳转了\r\n            // 2.使用history.pushState替换浏览器路径\r\n            historyChangeCallback(toRoute);\r\n            // 清空匹配数据\r\n            routeHooks_1.clear();\r\n            // 3.执行重新渲染\r\n            if (self.$root.$forceUpdate()) {\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n                // 调用全局的 afterEach 钩子\r\n                var afterEach = self.getAfterEachHandler();\r\n                if (afterEach) {\r\n                    afterEach(path, pathname);\r\n                }\r\n                resolve();\r\n            }\r\n            // 渲染失败\r\n            else {\r\n                if (onAbort) {\r\n                    onAbort();\r\n                }\r\n                reject();\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * VueRouter - 路由\r\n * @class VueRouter\r\n * @classdesc VueRouter\r\n */\r\nvar VueRouter = /** @class */ (function () {\r\n    /**\r\n     * constructor\r\n     * @param config\r\n     * {\r\n         routes - 路由的定义\r\n         mode - 类型 默认值是hash\r\n         base - 应用的基路径\r\n         linkActiveClass 全局配置 <router-link> 默认的激活的 class\r\n         linkExactActiveClass 全局配置 <router-link> 默认的精确激活的 class\r\n         // scrollBehavior\r\n         // parseQuery / stringifyQuery\r\n         // fallback\r\n     * }\r\n     */\r\n    function VueRouter(config) {\r\n        this.$config = getConfig(__assign({ base: constants_1.PATH_SPLIT }, config));\r\n        // 需要处理$config中routes这个属性，这个属性是一个树形结构，需要接入parent属性\r\n        linkRoutes(this.$config.routes || []);\r\n        onPopstate = onPopstate.bind(this);\r\n        // 注册popstate的事件\r\n        window.addEventListener('popstate', onPopstate);\r\n        // 属性\r\n        // .app\r\n        //  .类型: Vue instance\r\n        //  .配置了 router 的 Vue 根实例\r\n        // .mode\r\n        //  .类型: string\r\n        //  .路由使用的模式\r\n        // .currentRoute(当前不知道什么意思)\r\n    }\r\n    /**\r\n     * $destory 执行销毁操作\r\n     */\r\n    VueRouter.prototype.$destory = function () {\r\n        window.removeEventListener('popstate', onPopstate);\r\n    };\r\n    /**\r\n     * $setVueIns - 设置Vue实例对象\r\n     * @param vueIns - Vue Vue实例的对象\r\n     */\r\n    VueRouter.prototype.$setVueIns = function (vueIns) {\r\n        this.$root = vueIns;\r\n    };\r\n    /**\r\n     * $getComponentIsVueIns - 获取$config的routes第一级中路径匹配项的component属性值\r\n     *\r\n     * 如果是Vue实例template的<router-view>则只能在router的第一层中进行寻找\r\n     *\r\n     * @param viewName string - <router-view name=\"\"> 中的name\r\n     * @return Object\r\n     */\r\n    VueRouter.prototype.$getComponentIsVueIns = function (viewName) {\r\n        // 获取地址栏的pathname\r\n        var pathname = window.location.pathname;\r\n        // 获取$config.routes\r\n        var _a = this.$config, routes = _a.routes, base = _a.base;\r\n        var result;\r\n        var _loop_1 = function (i, len) {\r\n            var _a = routes[i], path = _a.path, component = _a.component, components = _a.components, _b = _a.name, name_2 = _b === void 0 ? '' : _b, props = _a.props;\r\n            var keys = [];\r\n            // 生成正则表达式的路径\r\n            var targetPath = util_1.wrapPathByBase(base, path);\r\n            // 通过路由中定义的path生成正则表达式\r\n            var reg = path_to_regexp_1.default(targetPath, keys, {\r\n                sensitive: false,\r\n                strict: false,\r\n                end: 'exact' in routes[i],\r\n                delimiter: '/',\r\n            });\r\n            // keys = [{ name: 'foo', prefix: '/', ... }, { name: 'bar', prefix: '/', ... }]\r\n            // /children 全路径\r\n            // / ~ 正则 ~ 不能命中这个\r\n            // children ~ 正则 ~ 只能命中这个\r\n            // :id/:name\r\n            // window.location.pathname 是一个全的路径\r\n            // 而router中配置的嵌套路由则是pathname中的一部分\r\n            // 如果pathname匹配的path\r\n            if (reg.test(pathname)) {\r\n                var paramMap_1 = {};\r\n                // 返回匹配的数组\r\n                var matchValues_1 = reg.exec(pathname);\r\n                // 填充paramMap /:foo/:bar 组成的对象\r\n                keys.forEach(function (_a, index) {\r\n                    var keyName = _a.name;\r\n                    paramMap_1[keyName] = matchValues_1[index + 1];\r\n                });\r\n                // 根据是否设置了viewName和components来返回实际的component(主要是处理命名视图)\r\n                var curComponent = viewName ? (components ? components[viewName] : component) : component;\r\n                // 当前命中的路由信息的包装\r\n                var detail = createRoute({\r\n                    route: routes[i],\r\n                    paramMap: paramMap_1,\r\n                    name: name_2,\r\n                });\r\n                // 返回值\r\n                result = {\r\n                    // 命中的组件\r\n                    component: curComponent,\r\n                    // 当前命中的路由信息的包装\r\n                    detail: detail,\r\n                    // 当前命中的路由配置信息\r\n                    route: routes[i],\r\n                    // 命中的组件props的信息\r\n                    props: createProps({ detail: detail, props: props }),\r\n                    // 当前路由配置路径\r\n                    path: targetPath,\r\n                    // 匹配的正则表达式\r\n                    regexp: reg,\r\n                };\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0, len = (routes || []).length; i < len; i++) {\r\n            var state_1 = _loop_1(i, len);\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * $getComponentIsComIns - 获取组件所在的route中匹配的component属性值\r\n     *\r\n     * 若果是组件template中的<router-view>则只能在route的组下寻找\r\n     *\r\n     * @param route Object - 组件所在的route\r\n     * @param viewName string - <router-view name=\"\"> 中的name\r\n     * @return Object\r\n     */\r\n    VueRouter.prototype.$getComponentIsComIns = function (route, viewName) {\r\n        // 获取地址栏的pathname\r\n        var pathname = window.location.pathname;\r\n        // 获取route的children\r\n        var _a = route.children, children = _a === void 0 ? [] : _a;\r\n        var result;\r\n        var base = this.$config.base;\r\n        // 获取route向上的完整路径\r\n        var parentFullPath = util_1.wrapPathByBase(base, util_1.getCurRoutePath(route));\r\n        var _loop_2 = function (i, len) {\r\n            var _a = children[i], path = _a.path, component = _a.component, components = _a.components, props = _a.props;\r\n            var keys = [];\r\n            var curPath = \"\" + parentFullPath + path;\r\n            if (parentFullPath.endsWith(constants_1.PATH_SPLIT)) {\r\n                if (path.startsWith(constants_1.PATH_SPLIT)) {\r\n                    curPath = \"\" + parentFullPath + path.substring(1);\r\n                }\r\n            }\r\n            else if (!path.startsWith(constants_1.PATH_SPLIT)) {\r\n                curPath = parentFullPath + \"/\" + path;\r\n            }\r\n            // 生成正则表达式\r\n            var reg = path_to_regexp_1.default(curPath, keys, {\r\n                sensitive: false,\r\n                strict: false,\r\n                end: 'exact' in children[i],\r\n                delimiter: constants_1.PATH_SPLIT,\r\n            });\r\n            // keys = [{ name: 'foo', prefix: PATH_SPLIT, ... }, { name: 'bar', prefix: PATH_SPLIT, ... }]\r\n            // 如果patchname匹配的path\r\n            if (reg.test(pathname)) {\r\n                var paramMap_2 = {};\r\n                // 返回匹配的数组\r\n                var matchValues_2 = reg.exec(pathname);\r\n                // 填充paramMap /:foo/:bar 组成的对象\r\n                keys.forEach(function (_a, index) {\r\n                    var name = _a.name;\r\n                    paramMap_2[name] = matchValues_2[index + 1];\r\n                });\r\n                // 根据是否设置了viewName和components来返回实际的component(主要是处理命名视图)\r\n                var curComponent = viewName ? (components ? components[viewName] : component) : component;\r\n                // 当前命中的路由信息的包装\r\n                var detail = createRoute({\r\n                    route: children[i],\r\n                    paramMap: paramMap_2,\r\n                });\r\n                // 返回值\r\n                result = {\r\n                    // 命中的组件\r\n                    component: curComponent,\r\n                    // 当前命中的路由信息的包装\r\n                    detail: detail,\r\n                    // 当前命中的路由配置信息\r\n                    route: children[i],\r\n                    // 命中组件的props信息\r\n                    props: createProps({ detail: detail, props: props }),\r\n                    // 当前路由配置路径\r\n                    path: curPath,\r\n                    // 匹配的正则表达式\r\n                    regexp: reg,\r\n                };\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0, len = (children || []).length; i < len; i++) {\r\n            var state_2 = _loop_2(i, len);\r\n            if (state_2 === \"break\")\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * createPath - 创建push | replace方法的path路径\r\n     * @param location - [string | Object] 导航的信息\r\n     * @return string path\r\n     *\r\n     *\r\n     * // 字符串\r\n     router.push('home')\r\n  \r\n     // 对象\r\n     router.push({ path: 'home' })\r\n  \r\n     // 命名的路由\r\n     router.push({ name: 'user', params: { userId: '123' }})\r\n  \r\n     // 带查询参数，变成 /register?plan=private\r\n     router.push({ path: 'register', query: { plan: 'private' }})\r\n  \r\n  \r\n     const userId = '123'\r\n     router.push({ name: 'user', params: { userId }}) // -> /user/123\r\n     router.push({ path: `/user/${userId}` }) // -> /user/123\r\n     // 这里的 params 不生效\r\n     router.push({ path: '/user', params: { userId }}) // -> /user\r\n     */\r\n    VueRouter.prototype.createPath = function (location) {\r\n        return createPath.call(this, location);\r\n    };\r\n    /**\r\n     * push - 改变路由的地址\r\n     * @param location - [string | Object] 导航的信息\r\n     * @param onComplete - Function\r\n     * @param onAbort - Function\r\n     * @return Promise\r\n     *\r\n     * // 字符串\r\n       router.push('home')\r\n  \r\n       // 对象\r\n       router.push({ path: 'home' })\r\n  \r\n       // 命名的路由\r\n       router.push({ name: 'user', params: { userId: '123' }})\r\n  \r\n       // 带查询参数，变成 /register?plan=private\r\n       router.push({ path: 'register', query: { plan: 'private' }})\r\n  \r\n  \r\n       const userId = '123'\r\n       router.push({ name: 'user', params: { userId }}) // -> /user/123\r\n       router.push({ path: `/user/${userId}` }) // -> /user/123\r\n       // 这里的 params 不生效\r\n       router.push({ path: '/user', params: { userId }}) // -> /user\r\n  \r\n  \r\n       在 2.2.0+，可选的在 router.push 或 router.replace 中提供 onComplete 和 onAbort 回调作为第二个和第三个参数。这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。在 3.1.0+，可以省略第二个和第三个参数，此时如果支持 Promise，router.push 或 router.replace 将返回一个 Promise。\r\n  \r\n       注意： 如果目的地和当前路由相同，只有参数发生了改变 (比如从一个用户资料到另一个 /users/1 -> /users/2)，你需要使用 beforeRouteUpdate 来响应这个变化 (比如抓取用户信息)\r\n     */\r\n    VueRouter.prototype.push = function (location, onComplete, onAbort) {\r\n        return historyChange.call(this, {\r\n            location: location,\r\n            onComplete: onComplete,\r\n            onAbort: onAbort,\r\n            historyChangeCallback: function (toRoute) {\r\n                window.history.pushState({\r\n                    location: location,\r\n                    toRoute: toRoute,\r\n                }, toRoute.fullPath, toRoute.fullPath);\r\n            },\r\n        });\r\n    };\r\n    /**\r\n     * replace - 替换路由的地址\r\n     * @param location - [string | Object] 导航的信息\r\n     * @param onComplete - Function\r\n     * @param onAbort - Function\r\n     * @return Promise\r\n     */\r\n    VueRouter.prototype.replace = function (location, onComplete, onAbort) {\r\n        return historyChange.call(this, {\r\n            location: location,\r\n            onComplete: onComplete,\r\n            onAbort: onAbort,\r\n            historyChangeCallback: function (toRoute) {\r\n                window.history.replaceState({\r\n                    location: location,\r\n                    toRoute: toRoute,\r\n                }, toRoute.fullPath, toRoute.fullPath);\r\n            },\r\n        });\r\n    };\r\n    /**\r\n     * beforeEach - 全局beforeEach守卫\r\n     * @param handler - Function\r\n     */\r\n    VueRouter.prototype.beforeEach = function (handler) {\r\n        _beforeEachHandler = handler;\r\n    };\r\n    /**\r\n     * afterEach - 全局afterEach守卫\r\n     * @param handler - Function\r\n     */\r\n    VueRouter.prototype.afterEach = function (handler) {\r\n        _afterEachHandler = handler;\r\n    };\r\n    /**\r\n     * onError - 注册一个回调，该回调会在路由导航过程中出错时被调用。注意被调用的错误必须是下列情形中的一种\r\n     错误在一个路由守卫函数中被同步抛出；\r\n  \r\n     错误在一个路由守卫函数中通过调用 next(err) 的方式异步捕获并处理；\r\n  \r\n     渲染一个路由的过程中，需要尝试解析一个异步组件时发生错误\r\n     * @param handler\r\n     */\r\n    VueRouter.prototype.onError = function (handler) {\r\n        _errorHandler = handler;\r\n    };\r\n    /**\r\n     * getBeforeEachHandler\r\n     * @return {Function}\r\n     */\r\n    VueRouter.prototype.getBeforeEachHandler = function () {\r\n        return _beforeEachHandler;\r\n    };\r\n    /**\r\n     * getAfterEachHandler\r\n     * @return {Function}\r\n     */\r\n    VueRouter.prototype.getAfterEachHandler = function () {\r\n        return _afterEachHandler;\r\n    };\r\n    /**\r\n     * getErrorHandler - 获取errorHandler\r\n     * @return {Function}\r\n     */\r\n    VueRouter.prototype.getErrorHandler = function () {\r\n        return _errorHandler;\r\n    };\r\n    /**\r\n     * go - 和history一致\r\n     * @param number\r\n     */\r\n    VueRouter.prototype.go = function (number) {\r\n        window.history.go(number);\r\n    };\r\n    /**\r\n     * back - 和history一致\r\n     */\r\n    VueRouter.prototype.back = function () {\r\n        window.history.back();\r\n    };\r\n    /**\r\n     * forward - 和history一致\r\n     */\r\n    VueRouter.prototype.forward = function () {\r\n        window.history.forward();\r\n    };\r\n    /**\r\n     * insertRoute - 动态添加route\r\n     * @param curRoute - Route 当前要操作的Route 如果为空则向router的第一级配置中添加\r\n     * @param index - 插入的位置 如果是-1则是向头部添加，如果大于length，则也是向尾部添加\r\n     * @param route - [Route | Array[Route] ] 添加的Route数据\r\n     */\r\n    VueRouter.prototype.insertRoute = function (_a) {\r\n        var _b;\r\n        var curRoute = _a.curRoute, index = _a.index, route = _a.route;\r\n        var execRoute = curRoute || this.$config;\r\n        if ('children' in execRoute) {\r\n            if (vue_util_1.isArray(execRoute.children)) {\r\n                if (index === -1) {\r\n                    this.unshiftRoute({ curRoute: curRoute, route: route });\r\n                }\r\n                else if (index >= execRoute.children.length) {\r\n                    this.pushRoute({ curRoute: curRoute, route: route });\r\n                }\r\n                else if (vue_util_1.isArray(route)) {\r\n                    (_b = execRoute.children).splice.apply(_b, __spreadArrays([index, 0], route));\r\n                }\r\n                else {\r\n                    execRoute.children.splice(index, 0, route);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * pushRoute - 动态尾部添加Route\r\n     * @param curRoute - Route 当前要操作的Route 如果为空则向router的第一级配置中添加\r\n     * @param route - [Route | Array[Route] ] 添加的Route数据\r\n     */\r\n    VueRouter.prototype.pushRoute = function (_a) {\r\n        var curRoute = _a.curRoute, route = _a.route;\r\n        var execRoute = curRoute || this.$config;\r\n        if ('children' in execRoute) {\r\n            if (vue_util_1.isArray(execRoute.children)) {\r\n                if (vue_util_1.isObject(route)) {\r\n                    execRoute.children.push(route);\r\n                }\r\n                if (vue_util_1.isArray(route)) {\r\n                    execRoute.children = execRoute.children.concat(route);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * unshiftRoute - 动态头部添加Route\r\n     * @param curRoute - Route 当前要操作的Route 如果为空则向router的第一级配置中添加\r\n     * @param route - [Route | Array[Route] ] 添加的Route数据\r\n     */\r\n    VueRouter.prototype.unshiftRoute = function (_a) {\r\n        var curRoute = _a.curRoute, route = _a.route;\r\n        var execRoute = curRoute || this.$config;\r\n        if ('children' in execRoute) {\r\n            if (vue_util_1.isArray(execRoute.children)) {\r\n                if (vue_util_1.isObject(route)) {\r\n                    execRoute.children.unshift(route);\r\n                }\r\n                if (vue_util_1.isArray(route)) {\r\n                    execRoute.children = route.concat(execRoute.children);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return VueRouter;\r\n}());\r\nexports.default = VueRouter;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","__importDefault","mod","__esModule","default","defineProperty","exports","value","_beforeEachHandler","_afterEachHandler","_errorHandler","path_to_regexp_1","require","vue_util_1","constants_1","qs_1","routeHooks_1","util_1","getConfig","config","result","writable","linkRoutes","routes","linkRouteLoop","route","len","children","curRoute","parent","createRoute","_a","paramMap","name","path","getCurRoutePath","params","query","parse","hash","window","location","fullPath","href","matched","cloneDeep","redirectedFrom","createProps","detail","props","isBoolean","isObject","isFunction","createPath","isEmpty","isString","name_1","_b","_c","$config","findRouteByName","compile","encode","encodeURIComponent","toPath","stringify","routerConfigv","onPopstate","_this","to","pathname","search","getMatchData","find","data","toRoute","guard","then","clear","$root","$forceUpdate","historyChange","onComplete","onAbort","historyChangeCallback","self","topMatchData","getTop","fromRoute","currentRoute","from","Promise","resolve","reject","afterEach","getAfterEachHandler","VueRouter","base","PATH_SPLIT","bind","addEventListener","$destory","removeEventListener","$setVueIns","vueIns","$getComponentIsVueIns","viewName","component","components","name_2","keys","targetPath","wrapPathByBase","reg","sensitive","strict","end","delimiter","test","paramMap_1","matchValues_1","exec","forEach","index","keyName","curComponent","regexp","_loop_1","$getComponentIsComIns","parentFullPath","curPath","endsWith","startsWith","substring","paramMap_2","matchValues_2","_loop_2","push","history","pushState","replace","replaceState","beforeEach","handler","onError","getBeforeEachHandler","getErrorHandler","go","number","back","forward","insertRoute","execRoute","isArray","unshiftRoute","pushRoute","splice","concat","unshift"],"mappings":"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"}