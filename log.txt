.v-for的context值的嵌套 ok
.计算属性缓存 ok
.get监控时是否执行了render，是因为赋值$event的时候 ok
.watch ok
.v-show 判断display的值 ok
.v-html实现 ok
.v-on的实现 ok
.v-for的key ok
.v-model实现 ok
.component的kebab-case | PascalCase ok
.v-bind="xxx"这种形式的 ok
.component的$emit ok
.template标签 ok
.slot
 基本slot ok
 作用域slot ok
.component标签 ok
.在一个方法中多次修改data只render一次 ok
 在什么地方能进行数据的修改
 1.生命周期hook(在生命周期hook中在调用其他方法)
 2.事件处理函数(在事件处理函数中在调用其他方法)
   2.1 html的事件处理函数
   2.2 $emit触发的事件处理函数
 3.watch处理函数(在事件处理函数中在调用其他方法)
 现在应该可是实现同步的函数，但是异步函数无法实现(除非提供一个创建这样函数的方法可以实现此功能)
.Vue实例现在VNode替换了el元素，而我们想实现的是作为孩子 ok

.v-model select赋值需要创建一个template进行计算
.v-if
.v-else-if

.自定义指令
.mixin

.keep-alive标签
.computed(不需要)
 get
 set
.filter (很难)
 自定义filter

// components集合的键应该用元素的key
// 每一个组件元素没有key都要随机生成一个key
// v-if 和 v-for的时候需要根据条件删除components集合中的component
// components应该是按组来划分的
// parentEl [key1,key2]

<div>
   <component-1 key=1 />
   <component-1 key=2 />
   <component-1 key=3 />

   <component-1 v-if="true" key=4 />

   <div>
     <component-1 v-for="true" key=4 />
   </div>

</div>
